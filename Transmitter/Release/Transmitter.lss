
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000023ae  00002442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000188  00800140  00800140  00002482  2**0
                  ALLOC
  3 .debug_aranges 00000880  00000000  00000000  00002482  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000016d7  00000000  00000000  00002d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b946  00000000  00000000  000043d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002659  00000000  00000000  0000fd1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005f73  00000000  00000000  00012378  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001010  00000000  00000000  000182ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002704  00000000  00000000  000192fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005758  00000000  00000000  0001ba00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000738  00000000  00000000  00021158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
{
    _address[0] = first_octet;
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}
       4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_1>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_2>



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
       c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
}

void operator delete[](void * ptr)
{
  free(ptr);
}
      10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>


	this->pointer_message_read=0;
	MSG_LENGTH=6;

}
      14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
	return msg;


}

void activate_receiving_mode(){
      18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      1c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_7>
      20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      40:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_16>
      44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      48:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_18>
      4c:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_19>
      50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      60:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_24>
      64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

00000068 <_ZL21tone_pin_to_timer_PGM>:
      68:	02                                                  .

00000069 <port_to_mode_PGM>:
      69:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000073 <port_to_output_PGM>:
      73:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007d <port_to_input_PGM>:
      7d:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000087 <digital_pin_to_port_PGM>:
      87:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      97:	03 03 03 03                                         ....

0000009b <digital_pin_to_bit_mask_PGM>:
      9b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ab:	04 08 10 20                                         ... 

000000af <digital_pin_to_timer_PGM>:
      af:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      bf:	00 00 00 00 00                                      .....

000000c4 <__ctors_start>:
      c4:	6a 09       	sbc	r22, r10
      c6:	c0 09       	sbc	r28, r0
      c8:	f4 10       	cpse	r15, r4

000000ca <__ctors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf ef       	ldi	r28, 0xFF	; 255
      d0:	d8 e0       	ldi	r29, 0x08	; 8
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	11 e0       	ldi	r17, 0x01	; 1
      d8:	a0 e0       	ldi	r26, 0x00	; 0
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	ee ea       	ldi	r30, 0xAE	; 174
      de:	f3 e2       	ldi	r31, 0x23	; 35
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <.do_copy_data_start>

000000e2 <.do_copy_data_loop>:
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0

000000e6 <.do_copy_data_start>:
      e6:	a0 34       	cpi	r26, 0x40	; 64
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <.do_copy_data_loop>

000000ec <__do_clear_bss>:
      ec:	12 e0       	ldi	r17, 0x02	; 2
      ee:	a0 e4       	ldi	r26, 0x40	; 64
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	a8 3c       	cpi	r26, 0xC8	; 200
      f8:	b1 07       	cpc	r27, r17
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>

000000fc <__do_global_ctors>:
      fc:	10 e0       	ldi	r17, 0x00	; 0
      fe:	ca ec       	ldi	r28, 0xCA	; 202
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	04 c0       	rjmp	.+8      	; 0x10c <.do_global_ctors_start>

00000104 <.do_global_ctors_loop>:
     104:	22 97       	sbiw	r28, 0x02	; 2
     106:	fe 01       	movw	r30, r28
     108:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__tablejump__>

0000010c <.do_global_ctors_start>:
     10c:	c4 3c       	cpi	r28, 0xC4	; 196
     10e:	d1 07       	cpc	r29, r17
     110:	c9 f7       	brne	.-14     	; 0x104 <.do_global_ctors_loop>
     112:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <main>
     116:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <_exit>

0000011a <__bad_interrupt>:
     11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	00 f5       	brcc	.+64     	; 0x162 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
     122:	e8 2f       	mov	r30, r24
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	ee 0f       	add	r30, r30
     128:	ff 1f       	adc	r31, r31
     12a:	e0 5c       	subi	r30, 0xC0	; 192
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	71 83       	std	Z+1, r23	; 0x01
     130:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     132:	88 23       	and	r24, r24
     134:	19 f0       	breq	.+6      	; 0x13c <attachInterrupt+0x1e>
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	a1 f4       	brne	.+40     	; 0x162 <attachInterrupt+0x44>
     13a:	08 c0       	rjmp	.+16     	; 0x14c <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     13c:	80 91 69 00 	lds	r24, 0x0069
     140:	8c 7f       	andi	r24, 0xFC	; 252
     142:	84 2b       	or	r24, r20
     144:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
     148:	e8 9a       	sbi	0x1d, 0	; 29
     14a:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     14c:	80 91 69 00 	lds	r24, 0x0069
     150:	44 0f       	add	r20, r20
     152:	55 1f       	adc	r21, r21
     154:	44 0f       	add	r20, r20
     156:	55 1f       	adc	r21, r21
     158:	83 7f       	andi	r24, 0xF3	; 243
     15a:	84 2b       	or	r24, r20
     15c:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
     160:	e9 9a       	sbi	0x1d, 1	; 29
     162:	08 95       	ret

00000164 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     164:	82 30       	cpi	r24, 0x02	; 2
     166:	80 f4       	brcc	.+32     	; 0x188 <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
     168:	88 23       	and	r24, r24
     16a:	19 f0       	breq	.+6      	; 0x172 <detachInterrupt+0xe>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	21 f4       	brne	.+8      	; 0x178 <detachInterrupt+0x14>
     170:	02 c0       	rjmp	.+4      	; 0x176 <detachInterrupt+0x12>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
     172:	e8 98       	cbi	0x1d, 0	; 29
     174:	01 c0       	rjmp	.+2      	; 0x178 <detachInterrupt+0x14>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
     176:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
     178:	e8 2f       	mov	r30, r24
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	ee 0f       	add	r30, r30
     17e:	ff 1f       	adc	r31, r31
     180:	e0 5c       	subi	r30, 0xC0	; 192
     182:	fe 4f       	sbci	r31, 0xFE	; 254
     184:	11 82       	std	Z+1, r1	; 0x01
     186:	10 82       	st	Z, r1
     188:	08 95       	ret

0000018a <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	5f 93       	push	r21
     19c:	6f 93       	push	r22
     19e:	7f 93       	push	r23
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	af 93       	push	r26
     1a6:	bf 93       	push	r27
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     1ac:	80 91 40 01 	lds	r24, 0x0140
     1b0:	90 91 41 01 	lds	r25, 0x0141
     1b4:	89 2b       	or	r24, r25
     1b6:	29 f0       	breq	.+10     	; 0x1c2 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     1b8:	e0 91 40 01 	lds	r30, 0x0140
     1bc:	f0 91 41 01 	lds	r31, 0x0141
     1c0:	09 95       	icall
}
     1c2:	ff 91       	pop	r31
     1c4:	ef 91       	pop	r30
     1c6:	bf 91       	pop	r27
     1c8:	af 91       	pop	r26
     1ca:	9f 91       	pop	r25
     1cc:	8f 91       	pop	r24
     1ce:	7f 91       	pop	r23
     1d0:	6f 91       	pop	r22
     1d2:	5f 91       	pop	r21
     1d4:	4f 91       	pop	r20
     1d6:	3f 91       	pop	r19
     1d8:	2f 91       	pop	r18
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <__vector_2>:

SIGNAL(INT1_vect) {
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	6f 93       	push	r22
     1f8:	7f 93       	push	r23
     1fa:	8f 93       	push	r24
     1fc:	9f 93       	push	r25
     1fe:	af 93       	push	r26
     200:	bf 93       	push	r27
     202:	ef 93       	push	r30
     204:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     206:	80 91 42 01 	lds	r24, 0x0142
     20a:	90 91 43 01 	lds	r25, 0x0143
     20e:	89 2b       	or	r24, r25
     210:	29 f0       	breq	.+10     	; 0x21c <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     212:	e0 91 42 01 	lds	r30, 0x0142
     216:	f0 91 43 01 	lds	r31, 0x0143
     21a:	09 95       	icall
}
     21c:	ff 91       	pop	r31
     21e:	ef 91       	pop	r30
     220:	bf 91       	pop	r27
     222:	af 91       	pop	r26
     224:	9f 91       	pop	r25
     226:	8f 91       	pop	r24
     228:	7f 91       	pop	r23
     22a:	6f 91       	pop	r22
     22c:	5f 91       	pop	r21
     22e:	4f 91       	pop	r20
     230:	3f 91       	pop	r19
     232:	2f 91       	pop	r18
     234:	0f 90       	pop	r0
     236:	0f be       	out	0x3f, r0	; 63
     238:	0f 90       	pop	r0
     23a:	1f 90       	pop	r1
     23c:	18 95       	reti

0000023e <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	bc 01       	movw	r22, r24
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	91 05       	cpc	r25, r1
     24c:	10 f4       	brcc	.+4      	; 0x252 <malloc+0x14>
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     252:	e0 91 c6 02 	lds	r30, 0x02C6
     256:	f0 91 c7 02 	lds	r31, 0x02C7
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	24 c0       	rjmp	.+72     	; 0x2ac <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	86 17       	cp	r24, r22
     26a:	97 07       	cpc	r25, r23
     26c:	d0 f0       	brcs	.+52     	; 0x2a2 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
     26e:	86 17       	cp	r24, r22
     270:	97 07       	cpc	r25, r23
     272:	71 f4       	brne	.+28     	; 0x290 <malloc+0x52>
     274:	82 81       	ldd	r24, Z+2	; 0x02
     276:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     278:	10 97       	sbiw	r26, 0x00	; 0
     27a:	29 f0       	breq	.+10     	; 0x286 <malloc+0x48>
				fp2->nx = fp1->nx;
     27c:	13 96       	adiw	r26, 0x03	; 3
     27e:	9c 93       	st	X, r25
     280:	8e 93       	st	-X, r24
     282:	12 97       	sbiw	r26, 0x02	; 2
     284:	2c c0       	rjmp	.+88     	; 0x2de <malloc+0xa0>
			else
				__flp = fp1->nx;
     286:	90 93 c7 02 	sts	0x02C7, r25
     28a:	80 93 c6 02 	sts	0x02C6, r24
     28e:	27 c0       	rjmp	.+78     	; 0x2de <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
     290:	41 15       	cp	r20, r1
     292:	51 05       	cpc	r21, r1
     294:	19 f0       	breq	.+6      	; 0x29c <malloc+0x5e>
     296:	84 17       	cp	r24, r20
     298:	95 07       	cpc	r25, r21
     29a:	18 f4       	brcc	.+6      	; 0x2a2 <malloc+0x64>
     29c:	ef 01       	movw	r28, r30
     29e:	8d 01       	movw	r16, r26
     2a0:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     2a2:	df 01       	movw	r26, r30
     2a4:	82 81       	ldd	r24, Z+2	; 0x02
     2a6:	93 81       	ldd	r25, Z+3	; 0x03
     2a8:	9c 01       	movw	r18, r24
     2aa:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
     2ac:	30 97       	sbiw	r30, 0x00	; 0
     2ae:	d1 f6       	brne	.-76     	; 0x264 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     2b0:	41 15       	cp	r20, r1
     2b2:	51 05       	cpc	r21, r1
     2b4:	f9 f0       	breq	.+62     	; 0x2f4 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
     2b6:	ca 01       	movw	r24, r20
     2b8:	86 1b       	sub	r24, r22
     2ba:	97 0b       	sbc	r25, r23
     2bc:	84 30       	cpi	r24, 0x04	; 4
     2be:	91 05       	cpc	r25, r1
     2c0:	80 f4       	brcc	.+32     	; 0x2e2 <malloc+0xa4>
     2c2:	8a 81       	ldd	r24, Y+2	; 0x02
     2c4:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
     2c6:	01 15       	cp	r16, r1
     2c8:	11 05       	cpc	r17, r1
     2ca:	21 f0       	breq	.+8      	; 0x2d4 <malloc+0x96>
				sfp2->nx = sfp1->nx;
     2cc:	f8 01       	movw	r30, r16
     2ce:	93 83       	std	Z+3, r25	; 0x03
     2d0:	82 83       	std	Z+2, r24	; 0x02
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <malloc+0x9e>
			else
				__flp = sfp1->nx;
     2d4:	90 93 c7 02 	sts	0x02C7, r25
     2d8:	80 93 c6 02 	sts	0x02C6, r24
			return &(sfp1->nx);
     2dc:	fe 01       	movw	r30, r28
     2de:	32 96       	adiw	r30, 0x02	; 2
     2e0:	2f c0       	rjmp	.+94     	; 0x340 <malloc+0x102>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
     2e2:	fe 01       	movw	r30, r28
     2e4:	e8 0f       	add	r30, r24
     2e6:	f9 1f       	adc	r31, r25
     2e8:	61 93       	st	Z+, r22
     2ea:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
     2ec:	02 97       	sbiw	r24, 0x02	; 2
     2ee:	99 83       	std	Y+1, r25	; 0x01
     2f0:	88 83       	st	Y, r24
     2f2:	26 c0       	rjmp	.+76     	; 0x340 <malloc+0x102>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	cp = STACK_POINTER() - __MALLOC_MARGIN__;
     2f4:	8d b7       	in	r24, 0x3d	; 61
     2f6:	9e b7       	in	r25, 0x3e	; 62
     2f8:	88 57       	subi	r24, 0x78	; 120
     2fa:	90 40       	sbci	r25, 0x00	; 0
	if (cp <= __brkval)
     2fc:	20 91 00 01 	lds	r18, 0x0100
     300:	30 91 01 01 	lds	r19, 0x0101
     304:	28 17       	cp	r18, r24
     306:	39 07       	cpc	r19, r25
     308:	c8 f4       	brcc	.+50     	; 0x33c <malloc+0xfe>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
     30a:	ac 01       	movw	r20, r24
     30c:	42 1b       	sub	r20, r18
     30e:	53 0b       	sbc	r21, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
     310:	46 17       	cp	r20, r22
     312:	57 07       	cpc	r21, r23
     314:	98 f0       	brcs	.+38     	; 0x33c <malloc+0xfe>
     316:	cb 01       	movw	r24, r22
     318:	02 96       	adiw	r24, 0x02	; 2
     31a:	48 17       	cp	r20, r24
     31c:	59 07       	cpc	r21, r25
     31e:	70 f0       	brcs	.+28     	; 0x33c <malloc+0xfe>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
     320:	82 0f       	add	r24, r18
     322:	93 1f       	adc	r25, r19
     324:	90 93 01 01 	sts	0x0101, r25
     328:	80 93 00 01 	sts	0x0100, r24
		__brkval_maximum = __brkval;
     32c:	90 93 03 01 	sts	0x0103, r25
     330:	80 93 02 01 	sts	0x0102, r24
		fp1->sz = len;
     334:	f9 01       	movw	r30, r18
     336:	61 93       	st	Z+, r22
     338:	71 93       	st	Z+, r23
     33a:	02 c0       	rjmp	.+4      	; 0x340 <malloc+0x102>
		return &(fp1->nx);
     33c:	e0 e0       	ldi	r30, 0x00	; 0
     33e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
     340:	cf 01       	movw	r24, r30
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	9c 01       	movw	r18, r24
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	09 f4       	brne	.+2      	; 0x358 <free+0xc>
     356:	8f c0       	rjmp	.+286    	; 0x476 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
     358:	ec 01       	movw	r28, r24
     35a:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
     35c:	1b 82       	std	Y+3, r1	; 0x03
     35e:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
     360:	60 91 c6 02 	lds	r22, 0x02C6
     364:	70 91 c7 02 	lds	r23, 0x02C7
     368:	61 15       	cp	r22, r1
     36a:	71 05       	cpc	r23, r1
     36c:	81 f4       	brne	.+32     	; 0x38e <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
     36e:	88 81       	ld	r24, Y
     370:	99 81       	ldd	r25, Y+1	; 0x01
     372:	82 0f       	add	r24, r18
     374:	93 1f       	adc	r25, r19
     376:	20 91 00 01 	lds	r18, 0x0100
     37a:	30 91 01 01 	lds	r19, 0x0101
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	39 f5       	brne	.+78     	; 0x3d2 <free+0x86>
			__brkval = cpnew;
     384:	d0 93 01 01 	sts	0x0101, r29
     388:	c0 93 00 01 	sts	0x0100, r28
     38c:	74 c0       	rjmp	.+232    	; 0x476 <free+0x12a>
		else
			__flp = fpnew;
     38e:	db 01       	movw	r26, r22
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     394:	ac 17       	cp	r26, r28
     396:	bd 07       	cpc	r27, r29
     398:	08 f1       	brcs	.+66     	; 0x3dc <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     39a:	bb 83       	std	Y+3, r27	; 0x03
     39c:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
     39e:	fe 01       	movw	r30, r28
     3a0:	21 91       	ld	r18, Z+
     3a2:	31 91       	ld	r19, Z+
     3a4:	e2 0f       	add	r30, r18
     3a6:	f3 1f       	adc	r31, r19
     3a8:	ae 17       	cp	r26, r30
     3aa:	bf 07       	cpc	r27, r31
     3ac:	79 f4       	brne	.+30     	; 0x3cc <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
     3ae:	8d 91       	ld	r24, X+
     3b0:	9c 91       	ld	r25, X
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	28 0f       	add	r18, r24
     3b6:	39 1f       	adc	r19, r25
     3b8:	2e 5f       	subi	r18, 0xFE	; 254
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
     3bc:	39 83       	std	Y+1, r19	; 0x01
     3be:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
     3c0:	12 96       	adiw	r26, 0x02	; 2
     3c2:	8d 91       	ld	r24, X+
     3c4:	9c 91       	ld	r25, X
     3c6:	13 97       	sbiw	r26, 0x03	; 3
     3c8:	9b 83       	std	Y+3, r25	; 0x03
     3ca:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
     3cc:	41 15       	cp	r20, r1
     3ce:	51 05       	cpc	r21, r1
     3d0:	71 f4       	brne	.+28     	; 0x3ee <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
     3d2:	d0 93 c7 02 	sts	0x02C7, r29
     3d6:	c0 93 c6 02 	sts	0x02C6, r28
     3da:	4d c0       	rjmp	.+154    	; 0x476 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     3dc:	12 96       	adiw	r26, 0x02	; 2
     3de:	8d 91       	ld	r24, X+
     3e0:	9c 91       	ld	r25, X
     3e2:	13 97       	sbiw	r26, 0x03	; 3
     3e4:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	11 f0       	breq	.+4      	; 0x3ee <free+0xa2>
     3ea:	dc 01       	movw	r26, r24
     3ec:	d3 cf       	rjmp	.-90     	; 0x394 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
     3ee:	da 01       	movw	r26, r20
     3f0:	13 96       	adiw	r26, 0x03	; 3
     3f2:	dc 93       	st	X, r29
     3f4:	ce 93       	st	-X, r28
     3f6:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
     3f8:	fa 01       	movw	r30, r20
     3fa:	21 91       	ld	r18, Z+
     3fc:	31 91       	ld	r19, Z+
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	ce 17       	cp	r28, r30
     404:	df 07       	cpc	r29, r31
     406:	69 f4       	brne	.+26     	; 0x422 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
     408:	88 81       	ld	r24, Y
     40a:	99 81       	ldd	r25, Y+1	; 0x01
     40c:	28 0f       	add	r18, r24
     40e:	39 1f       	adc	r19, r25
     410:	2e 5f       	subi	r18, 0xFE	; 254
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	fa 01       	movw	r30, r20
     416:	31 83       	std	Z+1, r19	; 0x01
     418:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	9b 81       	ldd	r25, Y+3	; 0x03
     41e:	93 83       	std	Z+3, r25	; 0x03
     420:	82 83       	std	Z+2, r24	; 0x02
     422:	e0 e0       	ldi	r30, 0x00	; 0
     424:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
     426:	db 01       	movw	r26, r22
     428:	12 96       	adiw	r26, 0x02	; 2
     42a:	8d 91       	ld	r24, X+
     42c:	9c 91       	ld	r25, X
     42e:	13 97       	sbiw	r26, 0x03	; 3
     430:	00 97       	sbiw	r24, 0x00	; 0
     432:	19 f0       	breq	.+6      	; 0x43a <free+0xee>
     434:	bc 01       	movw	r22, r24
     436:	fd 01       	movw	r30, r26
     438:	f6 cf       	rjmp	.-20     	; 0x426 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
     43a:	ab 01       	movw	r20, r22
     43c:	4e 5f       	subi	r20, 0xFE	; 254
     43e:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
     440:	db 01       	movw	r26, r22
     442:	8d 91       	ld	r24, X+
     444:	9c 91       	ld	r25, X
     446:	84 0f       	add	r24, r20
     448:	95 1f       	adc	r25, r21
     44a:	20 91 00 01 	lds	r18, 0x0100
     44e:	30 91 01 01 	lds	r19, 0x0101
     452:	28 17       	cp	r18, r24
     454:	39 07       	cpc	r19, r25
     456:	79 f4       	brne	.+30     	; 0x476 <free+0x12a>
		if (fp2 == NULL)
     458:	30 97       	sbiw	r30, 0x00	; 0
     45a:	29 f4       	brne	.+10     	; 0x466 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
     45c:	10 92 c7 02 	sts	0x02C7, r1
     460:	10 92 c6 02 	sts	0x02C6, r1
     464:	02 c0       	rjmp	.+4      	; 0x46a <free+0x11e>
		else
			fp2->nx = NULL;
     466:	13 82       	std	Z+3, r1	; 0x03
     468:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
     46a:	42 50       	subi	r20, 0x02	; 2
     46c:	50 40       	sbci	r21, 0x00	; 0
     46e:	50 93 01 01 	sts	0x0101, r21
     472:	40 93 00 01 	sts	0x0100, r20
	}
}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
     47c:	6f 92       	push	r6
     47e:	7f 92       	push	r7
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	8c 01       	movw	r16, r24
     49a:	00 97       	sbiw	r24, 0x00	; 0
     49c:	29 f4       	brne	.+10     	; 0x4a8 <realloc+0x2c>
		return malloc(len);
     49e:	cb 01       	movw	r24, r22
     4a0:	0e 94 1f 01 	call	0x23e	; 0x23e <malloc>
     4a4:	8c 01       	movw	r16, r24
     4a6:	b4 c0       	rjmp	.+360    	; 0x610 <realloc+0x194>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
     4a8:	8e ef       	ldi	r24, 0xFE	; 254
     4aa:	e8 2e       	mov	r14, r24
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	f8 2e       	mov	r15, r24
     4b0:	e0 0e       	add	r14, r16
     4b2:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
     4b4:	58 01       	movw	r10, r16
     4b6:	a6 0e       	add	r10, r22
     4b8:	b7 1e       	adc	r11, r23
	if (cp < cp1)
     4ba:	ae 14       	cp	r10, r14
     4bc:	bf 04       	cpc	r11, r15
     4be:	08 f4       	brcc	.+2      	; 0x4c2 <realloc+0x46>
     4c0:	a5 c0       	rjmp	.+330    	; 0x60c <realloc+0x190>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
     4c2:	d7 01       	movw	r26, r14
     4c4:	4d 91       	ld	r20, X+
     4c6:	5c 91       	ld	r21, X
     4c8:	11 97       	sbiw	r26, 0x01	; 1
     4ca:	46 17       	cp	r20, r22
     4cc:	57 07       	cpc	r21, r23
     4ce:	b8 f0       	brcs	.+46     	; 0x4fe <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
     4d0:	45 30       	cpi	r20, 0x05	; 5
     4d2:	51 05       	cpc	r21, r1
     4d4:	08 f4       	brcc	.+2      	; 0x4d8 <realloc+0x5c>
     4d6:	9c c0       	rjmp	.+312    	; 0x610 <realloc+0x194>
     4d8:	ca 01       	movw	r24, r20
     4da:	04 97       	sbiw	r24, 0x04	; 4
     4dc:	86 17       	cp	r24, r22
     4de:	97 07       	cpc	r25, r23
     4e0:	08 f4       	brcc	.+2      	; 0x4e4 <realloc+0x68>
     4e2:	96 c0       	rjmp	.+300    	; 0x610 <realloc+0x194>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
     4e4:	42 50       	subi	r20, 0x02	; 2
     4e6:	50 40       	sbci	r21, 0x00	; 0
     4e8:	46 1b       	sub	r20, r22
     4ea:	57 0b       	sbc	r21, r23
     4ec:	f5 01       	movw	r30, r10
     4ee:	41 93       	st	Z+, r20
     4f0:	51 93       	st	Z+, r21
		fp1->sz = len;
     4f2:	6d 93       	st	X+, r22
     4f4:	7c 93       	st	X, r23
		free(&(fp2->nx));
     4f6:	cf 01       	movw	r24, r30
     4f8:	0e 94 a6 01 	call	0x34c	; 0x34c <free>
     4fc:	89 c0       	rjmp	.+274    	; 0x610 <realloc+0x194>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
     4fe:	4b 01       	movw	r8, r22
     500:	84 1a       	sub	r8, r20
     502:	95 0a       	sbc	r9, r21
	cp = (char *)ptr + fp1->sz;
     504:	38 01       	movw	r6, r16
     506:	64 0e       	add	r6, r20
     508:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
     50a:	a0 91 c6 02 	lds	r26, 0x02C6
     50e:	b0 91 c7 02 	lds	r27, 0x02C7
     512:	cc 24       	eor	r12, r12
     514:	dd 24       	eor	r13, r13
     516:	e0 e0       	ldi	r30, 0x00	; 0
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	47 c0       	rjmp	.+142    	; 0x5aa <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
     51c:	a6 15       	cp	r26, r6
     51e:	b7 05       	cpc	r27, r7
     520:	a9 f5       	brne	.+106    	; 0x58c <realloc+0x110>
     522:	cd 91       	ld	r28, X+
     524:	dc 91       	ld	r29, X
     526:	11 97       	sbiw	r26, 0x01	; 1
     528:	ce 01       	movw	r24, r28
     52a:	02 96       	adiw	r24, 0x02	; 2
     52c:	88 15       	cp	r24, r8
     52e:	99 05       	cpc	r25, r9
     530:	68 f1       	brcs	.+90     	; 0x58c <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
     532:	ce 01       	movw	r24, r28
     534:	88 19       	sub	r24, r8
     536:	99 09       	sbc	r25, r9
     538:	02 96       	adiw	r24, 0x02	; 2
     53a:	12 96       	adiw	r26, 0x02	; 2
     53c:	2c 91       	ld	r18, X
     53e:	12 97       	sbiw	r26, 0x02	; 2
     540:	13 96       	adiw	r26, 0x03	; 3
     542:	3c 91       	ld	r19, X
     544:	05 97       	sbiw	r24, 0x05	; 5
     546:	58 f0       	brcs	.+22     	; 0x55e <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
     548:	f5 01       	movw	r30, r10
				fp2->nx = fp3->nx;
     54a:	22 83       	std	Z+2, r18	; 0x02
     54c:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
     54e:	c8 19       	sub	r28, r8
     550:	d9 09       	sbc	r29, r9
     552:	d1 83       	std	Z+1, r29	; 0x01
     554:	c0 83       	st	Z, r28
				fp1->sz = len;
     556:	d7 01       	movw	r26, r14
     558:	6d 93       	st	X+, r22
     55a:	7c 93       	st	X, r23
     55c:	09 c0       	rjmp	.+18     	; 0x570 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
     55e:	4e 5f       	subi	r20, 0xFE	; 254
     560:	5f 4f       	sbci	r21, 0xFF	; 255
     562:	4c 0f       	add	r20, r28
     564:	5d 1f       	adc	r21, r29
     566:	f7 01       	movw	r30, r14
     568:	51 83       	std	Z+1, r21	; 0x01
     56a:	40 83       	st	Z, r20
				fp2 = fp3->nx;
     56c:	c9 01       	movw	r24, r18
     56e:	fc 01       	movw	r30, r24
			}
			if (ofp3)
     570:	c1 14       	cp	r12, r1
     572:	d1 04       	cpc	r13, r1
     574:	31 f0       	breq	.+12     	; 0x582 <realloc+0x106>
				ofp3->nx = fp2;
     576:	d6 01       	movw	r26, r12
     578:	13 96       	adiw	r26, 0x03	; 3
     57a:	fc 93       	st	X, r31
     57c:	ee 93       	st	-X, r30
     57e:	12 97       	sbiw	r26, 0x02	; 2
     580:	47 c0       	rjmp	.+142    	; 0x610 <realloc+0x194>
			else
				__flp = fp2;
     582:	f0 93 c7 02 	sts	0x02C7, r31
     586:	e0 93 c6 02 	sts	0x02C6, r30
     58a:	42 c0       	rjmp	.+132    	; 0x610 <realloc+0x194>
     58c:	8d 91       	ld	r24, X+
     58e:	9c 91       	ld	r25, X
     590:	11 97       	sbiw	r26, 0x01	; 1
     592:	e8 17       	cp	r30, r24
     594:	f9 07       	cpc	r31, r25
     596:	08 f4       	brcc	.+2      	; 0x59a <realloc+0x11e>
     598:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
     59a:	6d 01       	movw	r12, r26
     59c:	12 96       	adiw	r26, 0x02	; 2
     59e:	8c 91       	ld	r24, X
     5a0:	12 97       	sbiw	r26, 0x02	; 2
     5a2:	13 96       	adiw	r26, 0x03	; 3
     5a4:	9c 91       	ld	r25, X
     5a6:	9c 01       	movw	r18, r24
     5a8:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
     5aa:	10 97       	sbiw	r26, 0x00	; 0
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <realloc+0x134>
     5ae:	b6 cf       	rjmp	.-148    	; 0x51c <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
     5b0:	80 91 00 01 	lds	r24, 0x0100
     5b4:	90 91 01 01 	lds	r25, 0x0101
     5b8:	86 15       	cp	r24, r6
     5ba:	97 05       	cpc	r25, r7
     5bc:	b1 f4       	brne	.+44     	; 0x5ea <realloc+0x16e>
     5be:	e6 17       	cp	r30, r22
     5c0:	f7 07       	cpc	r31, r23
     5c2:	98 f4       	brcc	.+38     	; 0x5ea <realloc+0x16e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __MALLOC_MARGIN__;
     5c4:	8d b7       	in	r24, 0x3d	; 61
     5c6:	9e b7       	in	r25, 0x3e	; 62
		if (cp < cp1) {
     5c8:	88 57       	subi	r24, 0x78	; 120
     5ca:	90 40       	sbci	r25, 0x00	; 0
     5cc:	a8 16       	cp	r10, r24
     5ce:	b9 06       	cpc	r11, r25
     5d0:	e8 f4       	brcc	.+58     	; 0x60c <realloc+0x190>
			__brkval = cp;
     5d2:	b0 92 01 01 	sts	0x0101, r11
     5d6:	a0 92 00 01 	sts	0x0100, r10
			__brkval_maximum = cp;
     5da:	b0 92 03 01 	sts	0x0103, r11
     5de:	a0 92 02 01 	sts	0x0102, r10
			fp1->sz = len;
     5e2:	f7 01       	movw	r30, r14
     5e4:	71 83       	std	Z+1, r23	; 0x01
     5e6:	60 83       	st	Z, r22
     5e8:	13 c0       	rjmp	.+38     	; 0x610 <realloc+0x194>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
     5ea:	cb 01       	movw	r24, r22
     5ec:	0e 94 1f 01 	call	0x23e	; 0x23e <malloc>
     5f0:	ec 01       	movw	r28, r24
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	59 f0       	breq	.+22     	; 0x60c <realloc+0x190>
		return 0;
	memcpy(memp, ptr, fp1->sz);
     5f6:	d7 01       	movw	r26, r14
     5f8:	4d 91       	ld	r20, X+
     5fa:	5c 91       	ld	r21, X
     5fc:	b8 01       	movw	r22, r16
     5fe:	0e 94 a6 07 	call	0xf4c	; 0xf4c <memcpy>
	free(ptr);
     602:	c8 01       	movw	r24, r16
     604:	0e 94 a6 01 	call	0x34c	; 0x34c <free>
     608:	8e 01       	movw	r16, r28
     60a:	02 c0       	rjmp	.+4      	; 0x610 <realloc+0x194>
	return memp;
     60c:	00 e0       	ldi	r16, 0x00	; 0
     60e:	10 e0       	ldi	r17, 0x00	; 0
}
     610:	c8 01       	movw	r24, r16
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	9f 90       	pop	r9
     628:	8f 90       	pop	r8
     62a:	7f 90       	pop	r7
     62c:	6f 90       	pop	r6
     62e:	08 95       	ret

00000630 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	2f 93       	push	r18
     63c:	3f 93       	push	r19
     63e:	8f 93       	push	r24
     640:	9f 93       	push	r25
     642:	af 93       	push	r26
     644:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     646:	80 91 48 01 	lds	r24, 0x0148
     64a:	90 91 49 01 	lds	r25, 0x0149
     64e:	a0 91 4a 01 	lds	r26, 0x014A
     652:	b0 91 4b 01 	lds	r27, 0x014B
	unsigned char f = timer0_fract;
     656:	30 91 4c 01 	lds	r19, 0x014C

	m += MILLIS_INC;
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	a1 1d       	adc	r26, r1
     65e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     660:	23 2f       	mov	r18, r19
     662:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     664:	2d 37       	cpi	r18, 0x7D	; 125
     666:	20 f0       	brcs	.+8      	; 0x670 <__vector_16+0x40>
		f -= FRACT_MAX;
     668:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	a1 1d       	adc	r26, r1
     66e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     670:	20 93 4c 01 	sts	0x014C, r18
	timer0_millis = m;
     674:	80 93 48 01 	sts	0x0148, r24
     678:	90 93 49 01 	sts	0x0149, r25
     67c:	a0 93 4a 01 	sts	0x014A, r26
     680:	b0 93 4b 01 	sts	0x014B, r27
	timer0_overflow_count++;
     684:	80 91 44 01 	lds	r24, 0x0144
     688:	90 91 45 01 	lds	r25, 0x0145
     68c:	a0 91 46 01 	lds	r26, 0x0146
     690:	b0 91 47 01 	lds	r27, 0x0147
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	a1 1d       	adc	r26, r1
     698:	b1 1d       	adc	r27, r1
     69a:	80 93 44 01 	sts	0x0144, r24
     69e:	90 93 45 01 	sts	0x0145, r25
     6a2:	a0 93 46 01 	sts	0x0146, r26
     6a6:	b0 93 47 01 	sts	0x0147, r27
}
     6aa:	bf 91       	pop	r27
     6ac:	af 91       	pop	r26
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	3f 91       	pop	r19
     6b4:	2f 91       	pop	r18
     6b6:	0f 90       	pop	r0
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	0f 90       	pop	r0
     6bc:	1f 90       	pop	r1
     6be:	18 95       	reti

000006c0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     6c0:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     6c2:	f8 94       	cli
	m = timer0_millis;
     6c4:	20 91 48 01 	lds	r18, 0x0148
     6c8:	30 91 49 01 	lds	r19, 0x0149
     6cc:	40 91 4a 01 	lds	r20, 0x014A
     6d0:	50 91 4b 01 	lds	r21, 0x014B
	SREG = oldSREG;
     6d4:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     6d6:	b9 01       	movw	r22, r18
     6d8:	ca 01       	movw	r24, r20
     6da:	08 95       	ret

000006dc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     6dc:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     6de:	f8 94       	cli
	m = timer0_overflow_count;
     6e0:	20 91 44 01 	lds	r18, 0x0144
     6e4:	30 91 45 01 	lds	r19, 0x0145
     6e8:	40 91 46 01 	lds	r20, 0x0146
     6ec:	50 91 47 01 	lds	r21, 0x0147
#if defined(TCNT0)
	t = TCNT0;
     6f0:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     6f2:	a8 9b       	sbis	0x15, 0	; 21
     6f4:	06 c0       	rjmp	.+12     	; 0x702 <micros+0x26>
     6f6:	8f 3f       	cpi	r24, 0xFF	; 255
     6f8:	21 f0       	breq	.+8      	; 0x702 <micros+0x26>
		m++;
     6fa:	2f 5f       	subi	r18, 0xFF	; 255
     6fc:	3f 4f       	sbci	r19, 0xFF	; 255
     6fe:	4f 4f       	sbci	r20, 0xFF	; 255
     700:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     702:	9f bf       	out	0x3f, r25	; 63
     704:	54 2f       	mov	r21, r20
     706:	43 2f       	mov	r20, r19
     708:	32 2f       	mov	r19, r18
     70a:	22 27       	eor	r18, r18
     70c:	28 0f       	add	r18, r24
     70e:	31 1d       	adc	r19, r1
     710:	41 1d       	adc	r20, r1
     712:	51 1d       	adc	r21, r1
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	22 0f       	add	r18, r18
     718:	33 1f       	adc	r19, r19
     71a:	44 1f       	adc	r20, r20
     71c:	55 1f       	adc	r21, r21
     71e:	8a 95       	dec	r24
     720:	d1 f7       	brne	.-12     	; 0x716 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
     722:	b9 01       	movw	r22, r18
     724:	ca 01       	movw	r24, r20
     726:	08 95       	ret

00000728 <delay>:

void delay(unsigned long ms)
{
     728:	9b 01       	movw	r18, r22
     72a:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     72c:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
     72e:	f8 94       	cli
	m = timer0_overflow_count;
     730:	80 91 44 01 	lds	r24, 0x0144
     734:	90 91 45 01 	lds	r25, 0x0145
     738:	a0 91 46 01 	lds	r26, 0x0146
     73c:	b0 91 47 01 	lds	r27, 0x0147
#if defined(TCNT0)
	t = TCNT0;
     740:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     742:	a8 9b       	sbis	0x15, 0	; 21
     744:	05 c0       	rjmp	.+10     	; 0x750 <delay+0x28>
     746:	6f 3f       	cpi	r22, 0xFF	; 255
     748:	19 f0       	breq	.+6      	; 0x750 <delay+0x28>
		m++;
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	a1 1d       	adc	r26, r1
     74e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     750:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
     752:	ba 2f       	mov	r27, r26
     754:	a9 2f       	mov	r26, r25
     756:	98 2f       	mov	r25, r24
     758:	88 27       	eor	r24, r24
     75a:	86 0f       	add	r24, r22
     75c:	91 1d       	adc	r25, r1
     75e:	a1 1d       	adc	r26, r1
     760:	b1 1d       	adc	r27, r1
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	aa 1f       	adc	r26, r26
     76a:	bb 1f       	adc	r27, r27
     76c:	6a 95       	dec	r22
     76e:	d1 f7       	brne	.-12     	; 0x764 <delay+0x3c>
     770:	bc 01       	movw	r22, r24
     772:	2d c0       	rjmp	.+90     	; 0x7ce <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     774:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
     776:	f8 94       	cli
	m = timer0_overflow_count;
     778:	80 91 44 01 	lds	r24, 0x0144
     77c:	90 91 45 01 	lds	r25, 0x0145
     780:	a0 91 46 01 	lds	r26, 0x0146
     784:	b0 91 47 01 	lds	r27, 0x0147
#if defined(TCNT0)
	t = TCNT0;
     788:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     78a:	a8 9b       	sbis	0x15, 0	; 21
     78c:	05 c0       	rjmp	.+10     	; 0x798 <delay+0x70>
     78e:	ef 3f       	cpi	r30, 0xFF	; 255
     790:	19 f0       	breq	.+6      	; 0x798 <delay+0x70>
		m++;
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	a1 1d       	adc	r26, r1
     796:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     798:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
     79a:	ba 2f       	mov	r27, r26
     79c:	a9 2f       	mov	r26, r25
     79e:	98 2f       	mov	r25, r24
     7a0:	88 27       	eor	r24, r24
     7a2:	8e 0f       	add	r24, r30
     7a4:	91 1d       	adc	r25, r1
     7a6:	a1 1d       	adc	r26, r1
     7a8:	b1 1d       	adc	r27, r1
     7aa:	e2 e0       	ldi	r30, 0x02	; 2
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	aa 1f       	adc	r26, r26
     7b2:	bb 1f       	adc	r27, r27
     7b4:	ea 95       	dec	r30
     7b6:	d1 f7       	brne	.-12     	; 0x7ac <delay+0x84>
     7b8:	86 1b       	sub	r24, r22
     7ba:	97 0b       	sbc	r25, r23
     7bc:	88 5e       	subi	r24, 0xE8	; 232
     7be:	93 40       	sbci	r25, 0x03	; 3
     7c0:	c8 f2       	brcs	.-78     	; 0x774 <delay+0x4c>
			ms--;
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	40 40       	sbci	r20, 0x00	; 0
     7c8:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
     7ca:	68 51       	subi	r22, 0x18	; 24
     7cc:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     7ce:	21 15       	cp	r18, r1
     7d0:	31 05       	cpc	r19, r1
     7d2:	41 05       	cpc	r20, r1
     7d4:	51 05       	cpc	r21, r1
     7d6:	71 f6       	brne	.-100    	; 0x774 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     7d8:	08 95       	ret

000007da <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	39 f0       	breq	.+14     	; 0x7ec <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
     7e6:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <delayMicroseconds+0xe>
     7ec:	08 95       	ret

000007ee <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     7ee:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     7f0:	84 b5       	in	r24, 0x24	; 36
     7f2:	82 60       	ori	r24, 0x02	; 2
     7f4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     7f6:	84 b5       	in	r24, 0x24	; 36
     7f8:	81 60       	ori	r24, 0x01	; 1
     7fa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     7fc:	85 b5       	in	r24, 0x25	; 37
     7fe:	82 60       	ori	r24, 0x02	; 2
     800:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     802:	85 b5       	in	r24, 0x25	; 37
     804:	81 60       	ori	r24, 0x01	; 1
     806:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     808:	ee e6       	ldi	r30, 0x6E	; 110
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	81 60       	ori	r24, 0x01	; 1
     810:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     812:	e1 e8       	ldi	r30, 0x81	; 129
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     818:	80 81       	ld	r24, Z
     81a:	82 60       	ori	r24, 0x02	; 2
     81c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     81e:	80 81       	ld	r24, Z
     820:	81 60       	ori	r24, 0x01	; 1
     822:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     824:	e0 e8       	ldi	r30, 0x80	; 128
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	81 60       	ori	r24, 0x01	; 1
     82c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     82e:	e1 eb       	ldi	r30, 0xB1	; 177
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	84 60       	ori	r24, 0x04	; 4
     836:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     838:	e0 eb       	ldi	r30, 0xB0	; 176
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	81 60       	ori	r24, 0x01	; 1
     840:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     842:	ea e7       	ldi	r30, 0x7A	; 122
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	84 60       	ori	r24, 0x04	; 4
     84a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     84c:	80 81       	ld	r24, Z
     84e:	82 60       	ori	r24, 0x02	; 2
     850:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     852:	80 81       	ld	r24, Z
     854:	81 60       	ori	r24, 0x01	; 1
     856:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     858:	80 81       	ld	r24, Z
     85a:	80 68       	ori	r24, 0x80	; 128
     85c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     85e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     862:	08 95       	ret

00000864 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     868:	48 2f       	mov	r20, r24
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	ca 01       	movw	r24, r20
     86e:	85 56       	subi	r24, 0x65	; 101
     870:	9f 4f       	sbci	r25, 0xFF	; 255
     872:	fc 01       	movw	r30, r24
     874:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
     876:	49 57       	subi	r20, 0x79	; 121
     878:	5f 4f       	sbci	r21, 0xFF	; 255
     87a:	fa 01       	movw	r30, r20
     87c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     87e:	88 23       	and	r24, r24
     880:	69 f1       	breq	.+90     	; 0x8dc <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	fc 01       	movw	r30, r24
     88a:	e7 59       	subi	r30, 0x97	; 151
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
     88e:	a5 91       	lpm	r26, Z+
     890:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
     892:	fc 01       	movw	r30, r24
     894:	ed 58       	subi	r30, 0x8D	; 141
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	c5 91       	lpm	r28, Z+
     89a:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
     89c:	66 23       	and	r22, r22
     89e:	51 f4       	brne	.+20     	; 0x8b4 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     8a0:	2f b7       	in	r18, 0x3f	; 63
                cli();
     8a2:	f8 94       	cli
		*reg &= ~bit;
     8a4:	8c 91       	ld	r24, X
     8a6:	93 2f       	mov	r25, r19
     8a8:	90 95       	com	r25
     8aa:	89 23       	and	r24, r25
     8ac:	8c 93       	st	X, r24
		*out &= ~bit;
     8ae:	88 81       	ld	r24, Y
     8b0:	89 23       	and	r24, r25
     8b2:	0b c0       	rjmp	.+22     	; 0x8ca <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     8b4:	62 30       	cpi	r22, 0x02	; 2
     8b6:	61 f4       	brne	.+24     	; 0x8d0 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     8b8:	2f b7       	in	r18, 0x3f	; 63
                cli();
     8ba:	f8 94       	cli
		*reg &= ~bit;
     8bc:	8c 91       	ld	r24, X
     8be:	93 2f       	mov	r25, r19
     8c0:	90 95       	com	r25
     8c2:	89 23       	and	r24, r25
     8c4:	8c 93       	st	X, r24
		*out |= bit;
     8c6:	88 81       	ld	r24, Y
     8c8:	83 2b       	or	r24, r19
     8ca:	88 83       	st	Y, r24
		SREG = oldSREG;
     8cc:	2f bf       	out	0x3f, r18	; 63
     8ce:	06 c0       	rjmp	.+12     	; 0x8dc <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     8d0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     8d2:	f8 94       	cli
		*reg |= bit;
     8d4:	8c 91       	ld	r24, X
     8d6:	83 2b       	or	r24, r19
     8d8:	8c 93       	st	X, r24
		SREG = oldSREG;
     8da:	9f bf       	out	0x3f, r25	; 63
	}
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
     8e2:	48 2f       	mov	r20, r24
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	ca 01       	movw	r24, r20
     8e8:	81 55       	subi	r24, 0x51	; 81
     8ea:	9f 4f       	sbci	r25, 0xFF	; 255
     8ec:	fc 01       	movw	r30, r24
     8ee:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     8f0:	ca 01       	movw	r24, r20
     8f2:	85 56       	subi	r24, 0x65	; 101
     8f4:	9f 4f       	sbci	r25, 0xFF	; 255
     8f6:	fc 01       	movw	r30, r24
     8f8:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
     8fa:	49 57       	subi	r20, 0x79	; 121
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	fa 01       	movw	r30, r20
     900:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     902:	33 23       	and	r19, r19
     904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
     906:	40 c0       	rjmp	.+128    	; 0x988 <__stack+0x89>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     908:	22 23       	and	r18, r18
     90a:	51 f1       	breq	.+84     	; 0x960 <__stack+0x61>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     90c:	23 30       	cpi	r18, 0x03	; 3
     90e:	71 f0       	breq	.+28     	; 0x92c <__stack+0x2d>
     910:	24 30       	cpi	r18, 0x04	; 4
     912:	28 f4       	brcc	.+10     	; 0x91e <__stack+0x1f>
     914:	21 30       	cpi	r18, 0x01	; 1
     916:	a1 f0       	breq	.+40     	; 0x940 <__stack+0x41>
     918:	22 30       	cpi	r18, 0x02	; 2
     91a:	11 f5       	brne	.+68     	; 0x960 <__stack+0x61>
     91c:	14 c0       	rjmp	.+40     	; 0x946 <__stack+0x47>
     91e:	26 30       	cpi	r18, 0x06	; 6
     920:	b1 f0       	breq	.+44     	; 0x94e <__stack+0x4f>
     922:	27 30       	cpi	r18, 0x07	; 7
     924:	c1 f0       	breq	.+48     	; 0x956 <__stack+0x57>
     926:	24 30       	cpi	r18, 0x04	; 4
     928:	d9 f4       	brne	.+54     	; 0x960 <__stack+0x61>
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0x35>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     92c:	80 91 80 00 	lds	r24, 0x0080
     930:	8f 77       	andi	r24, 0x7F	; 127
     932:	03 c0       	rjmp	.+6      	; 0x93a <__stack+0x3b>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     934:	80 91 80 00 	lds	r24, 0x0080
     938:	8f 7d       	andi	r24, 0xDF	; 223
     93a:	80 93 80 00 	sts	0x0080, r24
     93e:	10 c0       	rjmp	.+32     	; 0x960 <__stack+0x61>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     940:	84 b5       	in	r24, 0x24	; 36
     942:	8f 77       	andi	r24, 0x7F	; 127
     944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0x4b>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     946:	84 b5       	in	r24, 0x24	; 36
     948:	8f 7d       	andi	r24, 0xDF	; 223
     94a:	84 bd       	out	0x24, r24	; 36
     94c:	09 c0       	rjmp	.+18     	; 0x960 <__stack+0x61>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     94e:	80 91 b0 00 	lds	r24, 0x00B0
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	03 c0       	rjmp	.+6      	; 0x95c <__stack+0x5d>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     956:	80 91 b0 00 	lds	r24, 0x00B0
     95a:	8f 7d       	andi	r24, 0xDF	; 223
     95c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
     960:	e3 2f       	mov	r30, r19
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	ed 58       	subi	r30, 0x8D	; 141
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	a5 91       	lpm	r26, Z+
     96e:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
     970:	2f b7       	in	r18, 0x3f	; 63
	cli();
     972:	f8 94       	cli

	if (val == LOW) {
     974:	66 23       	and	r22, r22
     976:	21 f4       	brne	.+8      	; 0x980 <__stack+0x81>
		*out &= ~bit;
     978:	8c 91       	ld	r24, X
     97a:	90 95       	com	r25
     97c:	89 23       	and	r24, r25
     97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x85>
	} else {
		*out |= bit;
     980:	8c 91       	ld	r24, X
     982:	89 2b       	or	r24, r25
     984:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     986:	2f bf       	out	0x3f, r18	; 63
     988:	08 95       	ret

0000098a <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
     98a:	68 2f       	mov	r22, r24
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	cb 01       	movw	r24, r22
     990:	81 55       	subi	r24, 0x51	; 81
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     998:	cb 01       	movw	r24, r22
     99a:	85 56       	subi	r24, 0x65	; 101
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	fc 01       	movw	r30, r24
     9a0:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
     9a2:	69 57       	subi	r22, 0x79	; 121
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255
     9a6:	fb 01       	movw	r30, r22
     9a8:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
     9aa:	99 23       	and	r25, r25
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <digitalRead+0x2a>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	3c c0       	rjmp	.+120    	; 0xa2c <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     9b4:	22 23       	and	r18, r18
     9b6:	51 f1       	breq	.+84     	; 0xa0c <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     9b8:	23 30       	cpi	r18, 0x03	; 3
     9ba:	71 f0       	breq	.+28     	; 0x9d8 <digitalRead+0x4e>
     9bc:	24 30       	cpi	r18, 0x04	; 4
     9be:	28 f4       	brcc	.+10     	; 0x9ca <digitalRead+0x40>
     9c0:	21 30       	cpi	r18, 0x01	; 1
     9c2:	a1 f0       	breq	.+40     	; 0x9ec <digitalRead+0x62>
     9c4:	22 30       	cpi	r18, 0x02	; 2
     9c6:	11 f5       	brne	.+68     	; 0xa0c <digitalRead+0x82>
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <digitalRead+0x68>
     9ca:	26 30       	cpi	r18, 0x06	; 6
     9cc:	b1 f0       	breq	.+44     	; 0x9fa <digitalRead+0x70>
     9ce:	27 30       	cpi	r18, 0x07	; 7
     9d0:	c1 f0       	breq	.+48     	; 0xa02 <digitalRead+0x78>
     9d2:	24 30       	cpi	r18, 0x04	; 4
     9d4:	d9 f4       	brne	.+54     	; 0xa0c <digitalRead+0x82>
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     9d8:	80 91 80 00 	lds	r24, 0x0080
     9dc:	8f 77       	andi	r24, 0x7F	; 127
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     9e0:	80 91 80 00 	lds	r24, 0x0080
     9e4:	8f 7d       	andi	r24, 0xDF	; 223
     9e6:	80 93 80 00 	sts	0x0080, r24
     9ea:	10 c0       	rjmp	.+32     	; 0xa0c <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     9ec:	84 b5       	in	r24, 0x24	; 36
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     9f2:	84 b5       	in	r24, 0x24	; 36
     9f4:	8f 7d       	andi	r24, 0xDF	; 223
     9f6:	84 bd       	out	0x24, r24	; 36
     9f8:	09 c0       	rjmp	.+18     	; 0xa0c <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     9fa:	80 91 b0 00 	lds	r24, 0x00B0
     9fe:	8f 77       	andi	r24, 0x7F	; 127
     a00:	03 c0       	rjmp	.+6      	; 0xa08 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     a02:	80 91 b0 00 	lds	r24, 0x00B0
     a06:	8f 7d       	andi	r24, 0xDF	; 223
     a08:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
     a0c:	89 2f       	mov	r24, r25
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	83 58       	subi	r24, 0x83	; 131
     a16:	9f 4f       	sbci	r25, 0xFF	; 255
     a18:	fc 01       	movw	r30, r24
     a1a:	a5 91       	lpm	r26, Z+
     a1c:	b4 91       	lpm	r27, Z+
     a1e:	8c 91       	ld	r24, X
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	84 23       	and	r24, r20
     a26:	11 f0       	breq	.+4      	; 0xa2c <digitalRead+0xa2>
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
     a2c:	c9 01       	movw	r24, r18
     a2e:	08 95       	ret

00000a30 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     a30:	88 0f       	add	r24, r24
     a32:	80 93 ba 00 	sts	0x00BA, r24
}
     a36:	08 95       	ret

00000a38 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
     a38:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     a3a:	41 32       	cpi	r20, 0x21	; 33
     a3c:	10 f0       	brcs	.+4      	; 0xa42 <twi_readFrom+0xa>
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	42 c0       	rjmp	.+132    	; 0xac6 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     a42:	80 91 4d 01 	lds	r24, 0x014D
     a46:	88 23       	and	r24, r24
     a48:	e1 f7       	brne	.-8      	; 0xa42 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	90 93 4d 01 	sts	0x014D, r25
  twi_sendStop = sendStop;
     a50:	20 93 4f 01 	sts	0x014F, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	80 93 ba 01 	sts	0x01BA, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     a5a:	10 92 75 01 	sts	0x0175, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     a5e:	41 50       	subi	r20, 0x01	; 1
     a60:	40 93 76 01 	sts	0x0176, r20
     a64:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     a66:	90 93 4e 01 	sts	0x014E, r25
  twi_slarw |= address << 1;
     a6a:	80 91 4e 01 	lds	r24, 0x014E
     a6e:	33 0f       	add	r19, r19
     a70:	83 2b       	or	r24, r19
     a72:	80 93 4e 01 	sts	0x014E, r24

  if (true == twi_inRepStart) {
     a76:	80 91 50 01 	lds	r24, 0x0150
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	41 f4       	brne	.+16     	; 0xa8e <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     a7e:	10 92 50 01 	sts	0x0150, r1
    TWDR = twi_slarw;
     a82:	80 91 4e 01 	lds	r24, 0x014E
     a86:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     a8a:	85 ec       	ldi	r24, 0xC5	; 197
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     a8e:	85 ee       	ldi	r24, 0xE5	; 229
     a90:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     a94:	80 91 4d 01 	lds	r24, 0x014D
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	e1 f3       	breq	.-8      	; 0xa94 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
     a9c:	80 91 75 01 	lds	r24, 0x0175
     aa0:	84 17       	cp	r24, r20
     aa2:	10 f4       	brcc	.+4      	; 0xaa8 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
     aa4:	40 91 75 01 	lds	r20, 0x0175
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	0a c0       	rjmp	.+20     	; 0xac2 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
     aae:	fb 01       	movw	r30, r22
     ab0:	e2 0f       	add	r30, r18
     ab2:	f3 1f       	adc	r31, r19
     ab4:	d9 01       	movw	r26, r18
     ab6:	ab 5a       	subi	r26, 0xAB	; 171
     ab8:	be 4f       	sbci	r27, 0xFE	; 254
     aba:	8c 91       	ld	r24, X
     abc:	80 83       	st	Z, r24
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     ac2:	24 17       	cp	r18, r20
     ac4:	a0 f3       	brcs	.-24     	; 0xaae <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     ac6:	84 2f       	mov	r24, r20
     ac8:	08 95       	ret

00000aca <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	58 2f       	mov	r21, r24
     ad0:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     ad2:	41 32       	cpi	r20, 0x21	; 33
     ad4:	10 f0       	brcs	.+4      	; 0xada <twi_writeTo+0x10>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	4a c0       	rjmp	.+148    	; 0xb6e <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     ada:	80 91 4d 01 	lds	r24, 0x014D
     ade:	88 23       	and	r24, r24
     ae0:	e1 f7       	brne	.-8      	; 0xada <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	80 93 4d 01 	sts	0x014D, r24
  twi_sendStop = sendStop;
     ae8:	00 93 4f 01 	sts	0x014F, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	80 93 ba 01 	sts	0x01BA, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     af2:	10 92 75 01 	sts	0x0175, r1
  twi_masterBufferLength = length;
     af6:	40 93 76 01 	sts	0x0176, r20
     afa:	a5 e5       	ldi	r26, 0x55	; 85
     afc:	b1 e0       	ldi	r27, 0x01	; 1
     afe:	fb 01       	movw	r30, r22
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     b02:	81 91       	ld	r24, Z+
     b04:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     b06:	8e 2f       	mov	r24, r30
     b08:	86 1b       	sub	r24, r22
     b0a:	84 17       	cp	r24, r20
     b0c:	d0 f3       	brcs	.-12     	; 0xb02 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     b0e:	10 92 4e 01 	sts	0x014E, r1
  twi_slarw |= address << 1;
     b12:	80 91 4e 01 	lds	r24, 0x014E
     b16:	55 0f       	add	r21, r21
     b18:	85 2b       	or	r24, r21
     b1a:	80 93 4e 01 	sts	0x014E, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     b1e:	80 91 50 01 	lds	r24, 0x0150
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	41 f4       	brne	.+16     	; 0xb36 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     b26:	10 92 50 01 	sts	0x0150, r1
    TWDR = twi_slarw;				
     b2a:	80 91 4e 01 	lds	r24, 0x014E
     b2e:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     b32:	85 ec       	ldi	r24, 0xC5	; 197
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
     b36:	85 ee       	ldi	r24, 0xE5	; 229
     b38:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     b3c:	11 23       	and	r17, r17
     b3e:	21 f0       	breq	.+8      	; 0xb48 <twi_writeTo+0x7e>
     b40:	80 91 4d 01 	lds	r24, 0x014D
     b44:	82 30       	cpi	r24, 0x02	; 2
     b46:	e1 f3       	breq	.-8      	; 0xb40 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
     b48:	80 91 ba 01 	lds	r24, 0x01BA
     b4c:	8f 3f       	cpi	r24, 0xFF	; 255
     b4e:	11 f4       	brne	.+4      	; 0xb54 <twi_writeTo+0x8a>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     b54:	80 91 ba 01 	lds	r24, 0x01BA
     b58:	80 32       	cpi	r24, 0x20	; 32
     b5a:	11 f4       	brne	.+4      	; 0xb60 <twi_writeTo+0x96>
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     b60:	80 91 ba 01 	lds	r24, 0x01BA
     b64:	80 33       	cpi	r24, 0x30	; 48
     b66:	11 f0       	breq	.+4      	; 0xb6c <twi_writeTo+0xa2>
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <twi_writeTo+0xa4>
     b6c:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	08 95       	ret

00000b74 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     b74:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     b76:	61 32       	cpi	r22, 0x21	; 33
     b78:	10 f0       	brcs	.+4      	; 0xb7e <twi_transmit+0xa>
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     b7e:	80 91 4d 01 	lds	r24, 0x014D
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	11 f0       	breq	.+4      	; 0xb8a <twi_transmit+0x16>
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     b8a:	60 93 98 01 	sts	0x0198, r22
     b8e:	a7 e7       	ldi	r26, 0x77	; 119
     b90:	b1 e0       	ldi	r27, 0x01	; 1
     b92:	84 2f       	mov	r24, r20
     b94:	9c 01       	movw	r18, r24
     b96:	f9 01       	movw	r30, r18
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
     b9a:	81 91       	ld	r24, Z+
     b9c:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     b9e:	8e 2f       	mov	r24, r30
     ba0:	84 1b       	sub	r24, r20
     ba2:	86 17       	cp	r24, r22
     ba4:	d0 f3       	brcs	.-12     	; 0xb9a <twi_transmit+0x26>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     ba8:	08 95       	ret

00000baa <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     baa:	90 93 54 01 	sts	0x0154, r25
     bae:	80 93 53 01 	sts	0x0153, r24
}
     bb2:	08 95       	ret

00000bb4 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     bb4:	90 93 52 01 	sts	0x0152, r25
     bb8:	80 93 51 01 	sts	0x0151, r24
}
     bbc:	08 95       	ret

00000bbe <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     bbe:	88 23       	and	r24, r24
     bc0:	11 f0       	breq	.+4      	; 0xbc6 <twi_reply+0x8>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     bc2:	85 ec       	ldi	r24, 0xC5	; 197
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <twi_reply+0xa>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     bc6:	85 e8       	ldi	r24, 0x85	; 133
     bc8:	80 93 bc 00 	sts	0x00BC, r24
     bcc:	08 95       	ret

00000bce <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     bce:	85 ed       	ldi	r24, 0xD5	; 213
     bd0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     bd4:	80 91 bc 00 	lds	r24, 0x00BC
     bd8:	84 fd       	sbrc	r24, 4
     bda:	fc cf       	rjmp	.-8      	; 0xbd4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     bdc:	10 92 4d 01 	sts	0x014D, r1
}
     be0:	08 95       	ret

00000be2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     be2:	85 ec       	ldi	r24, 0xC5	; 197
     be4:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     be8:	10 92 4d 01 	sts	0x014D, r1
}
     bec:	08 95       	ret

00000bee <__vector_24>:

SIGNAL(TWI_vect)
{
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
  switch(TW_STATUS){
     c10:	80 91 b9 00 	lds	r24, 0x00B9
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	88 7f       	andi	r24, 0xF8	; 248
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	80 36       	cpi	r24, 0x60	; 96
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <__vector_24+0x34>
     c20:	f2 c0       	rjmp	.+484    	; 0xe06 <__vector_24+0x218>
     c22:	81 36       	cpi	r24, 0x61	; 97
     c24:	91 05       	cpc	r25, r1
     c26:	cc f5       	brge	.+114    	; 0xc9a <__vector_24+0xac>
     c28:	88 32       	cpi	r24, 0x28	; 40
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <__vector_24+0x42>
     c2e:	7b c0       	rjmp	.+246    	; 0xd26 <__vector_24+0x138>
     c30:	89 32       	cpi	r24, 0x29	; 41
     c32:	91 05       	cpc	r25, r1
     c34:	b4 f4       	brge	.+44     	; 0xc62 <__vector_24+0x74>
     c36:	80 31       	cpi	r24, 0x10	; 16
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <__vector_24+0x50>
     c3c:	6f c0       	rjmp	.+222    	; 0xd1c <__vector_24+0x12e>
     c3e:	81 31       	cpi	r24, 0x11	; 17
     c40:	91 05       	cpc	r25, r1
     c42:	3c f4       	brge	.+14     	; 0xc52 <__vector_24+0x64>
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	09 f4       	brne	.+2      	; 0xc4a <__vector_24+0x5c>
     c48:	47 c1       	rjmp	.+654    	; 0xed8 <__vector_24+0x2ea>
     c4a:	08 97       	sbiw	r24, 0x08	; 8
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_24+0x62>
     c4e:	4f c1       	rjmp	.+670    	; 0xeee <__vector_24+0x300>
     c50:	65 c0       	rjmp	.+202    	; 0xd1c <__vector_24+0x12e>
     c52:	88 31       	cpi	r24, 0x18	; 24
     c54:	91 05       	cpc	r25, r1
     c56:	09 f4       	brne	.+2      	; 0xc5a <__vector_24+0x6c>
     c58:	66 c0       	rjmp	.+204    	; 0xd26 <__vector_24+0x138>
     c5a:	80 97       	sbiw	r24, 0x20	; 32
     c5c:	09 f0       	breq	.+2      	; 0xc60 <__vector_24+0x72>
     c5e:	47 c1       	rjmp	.+654    	; 0xeee <__vector_24+0x300>
     c60:	82 c0       	rjmp	.+260    	; 0xd66 <__vector_24+0x178>
     c62:	80 34       	cpi	r24, 0x40	; 64
     c64:	91 05       	cpc	r25, r1
     c66:	09 f4       	brne	.+2      	; 0xc6a <__vector_24+0x7c>
     c68:	a4 c0       	rjmp	.+328    	; 0xdb2 <__vector_24+0x1c4>
     c6a:	81 34       	cpi	r24, 0x41	; 65
     c6c:	91 05       	cpc	r25, r1
     c6e:	44 f4       	brge	.+16     	; 0xc80 <__vector_24+0x92>
     c70:	80 33       	cpi	r24, 0x30	; 48
     c72:	91 05       	cpc	r25, r1
     c74:	09 f4       	brne	.+2      	; 0xc78 <__vector_24+0x8a>
     c76:	82 c0       	rjmp	.+260    	; 0xd7c <__vector_24+0x18e>
     c78:	c8 97       	sbiw	r24, 0x38	; 56
     c7a:	09 f0       	breq	.+2      	; 0xc7e <__vector_24+0x90>
     c7c:	38 c1       	rjmp	.+624    	; 0xeee <__vector_24+0x300>
     c7e:	89 c0       	rjmp	.+274    	; 0xd92 <__vector_24+0x1a4>
     c80:	80 35       	cpi	r24, 0x50	; 80
     c82:	91 05       	cpc	r25, r1
     c84:	09 f4       	brne	.+2      	; 0xc88 <__vector_24+0x9a>
     c86:	89 c0       	rjmp	.+274    	; 0xd9a <__vector_24+0x1ac>
     c88:	88 35       	cpi	r24, 0x58	; 88
     c8a:	91 05       	cpc	r25, r1
     c8c:	09 f4       	brne	.+2      	; 0xc90 <__vector_24+0xa2>
     c8e:	96 c0       	rjmp	.+300    	; 0xdbc <__vector_24+0x1ce>
     c90:	88 34       	cpi	r24, 0x48	; 72
     c92:	91 05       	cpc	r25, r1
     c94:	09 f0       	breq	.+2      	; 0xc98 <__vector_24+0xaa>
     c96:	2b c1       	rjmp	.+598    	; 0xeee <__vector_24+0x300>
     c98:	ae c0       	rjmp	.+348    	; 0xdf6 <__vector_24+0x208>
     c9a:	88 39       	cpi	r24, 0x98	; 152
     c9c:	91 05       	cpc	r25, r1
     c9e:	09 f4       	brne	.+2      	; 0xca2 <__vector_24+0xb4>
     ca0:	13 c1       	rjmp	.+550    	; 0xec8 <__vector_24+0x2da>
     ca2:	89 39       	cpi	r24, 0x99	; 153
     ca4:	91 05       	cpc	r25, r1
     ca6:	ec f4       	brge	.+58     	; 0xce2 <__vector_24+0xf4>
     ca8:	88 37       	cpi	r24, 0x78	; 120
     caa:	91 05       	cpc	r25, r1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <__vector_24+0xc2>
     cae:	ab c0       	rjmp	.+342    	; 0xe06 <__vector_24+0x218>
     cb0:	89 37       	cpi	r24, 0x79	; 121
     cb2:	91 05       	cpc	r25, r1
     cb4:	4c f4       	brge	.+18     	; 0xcc8 <__vector_24+0xda>
     cb6:	88 36       	cpi	r24, 0x68	; 104
     cb8:	91 05       	cpc	r25, r1
     cba:	09 f4       	brne	.+2      	; 0xcbe <__vector_24+0xd0>
     cbc:	a4 c0       	rjmp	.+328    	; 0xe06 <__vector_24+0x218>
     cbe:	80 37       	cpi	r24, 0x70	; 112
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <__vector_24+0xd8>
     cc4:	14 c1       	rjmp	.+552    	; 0xeee <__vector_24+0x300>
     cc6:	9f c0       	rjmp	.+318    	; 0xe06 <__vector_24+0x218>
     cc8:	88 38       	cpi	r24, 0x88	; 136
     cca:	91 05       	cpc	r25, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__vector_24+0xe2>
     cce:	fc c0       	rjmp	.+504    	; 0xec8 <__vector_24+0x2da>
     cd0:	80 39       	cpi	r24, 0x90	; 144
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <__vector_24+0xea>
     cd6:	9d c0       	rjmp	.+314    	; 0xe12 <__vector_24+0x224>
     cd8:	80 38       	cpi	r24, 0x80	; 128
     cda:	91 05       	cpc	r25, r1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <__vector_24+0xf2>
     cde:	07 c1       	rjmp	.+526    	; 0xeee <__vector_24+0x300>
     ce0:	98 c0       	rjmp	.+304    	; 0xe12 <__vector_24+0x224>
     ce2:	80 3b       	cpi	r24, 0xB0	; 176
     ce4:	91 05       	cpc	r25, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <__vector_24+0xfc>
     ce8:	c6 c0       	rjmp	.+396    	; 0xe76 <__vector_24+0x288>
     cea:	81 3b       	cpi	r24, 0xB1	; 177
     cec:	91 05       	cpc	r25, r1
     cee:	4c f4       	brge	.+18     	; 0xd02 <__vector_24+0x114>
     cf0:	80 3a       	cpi	r24, 0xA0	; 160
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <__vector_24+0x10a>
     cf6:	9f c0       	rjmp	.+318    	; 0xe36 <__vector_24+0x248>
     cf8:	88 3a       	cpi	r24, 0xA8	; 168
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f0       	breq	.+2      	; 0xd00 <__vector_24+0x112>
     cfe:	f7 c0       	rjmp	.+494    	; 0xeee <__vector_24+0x300>
     d00:	ba c0       	rjmp	.+372    	; 0xe76 <__vector_24+0x288>
     d02:	80 3c       	cpi	r24, 0xC0	; 192
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <__vector_24+0x11c>
     d08:	e3 c0       	rjmp	.+454    	; 0xed0 <__vector_24+0x2e2>
     d0a:	88 3c       	cpi	r24, 0xC8	; 200
     d0c:	91 05       	cpc	r25, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__vector_24+0x124>
     d10:	df c0       	rjmp	.+446    	; 0xed0 <__vector_24+0x2e2>
     d12:	88 3b       	cpi	r24, 0xB8	; 184
     d14:	91 05       	cpc	r25, r1
     d16:	09 f0       	breq	.+2      	; 0xd1a <__vector_24+0x12c>
     d18:	ea c0       	rjmp	.+468    	; 0xeee <__vector_24+0x300>
     d1a:	c2 c0       	rjmp	.+388    	; 0xea0 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     d1c:	80 91 4e 01 	lds	r24, 0x014E
     d20:	80 93 bb 00 	sts	0x00BB, r24
     d24:	cf c0       	rjmp	.+414    	; 0xec4 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     d26:	90 91 75 01 	lds	r25, 0x0175
     d2a:	80 91 76 01 	lds	r24, 0x0176
     d2e:	98 17       	cp	r25, r24
     d30:	68 f4       	brcc	.+26     	; 0xd4c <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     d32:	90 91 75 01 	lds	r25, 0x0175
     d36:	e9 2f       	mov	r30, r25
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	eb 5a       	subi	r30, 0xAB	; 171
     d3c:	fe 4f       	sbci	r31, 0xFE	; 254
     d3e:	80 81       	ld	r24, Z
     d40:	80 93 bb 00 	sts	0x00BB, r24
     d44:	9f 5f       	subi	r25, 0xFF	; 255
     d46:	90 93 75 01 	sts	0x0175, r25
     d4a:	bc c0       	rjmp	.+376    	; 0xec4 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
     d4c:	80 91 4f 01 	lds	r24, 0x014F
     d50:	88 23       	and	r24, r24
     d52:	09 f4       	brne	.+2      	; 0xd56 <__vector_24+0x168>
     d54:	4b c0       	rjmp	.+150    	; 0xdec <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d56:	85 ed       	ldi	r24, 0xD5	; 213
     d58:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d5c:	80 91 bc 00 	lds	r24, 0x00BC
     d60:	84 fd       	sbrc	r24, 4
     d62:	fc cf       	rjmp	.-8      	; 0xd5c <__vector_24+0x16e>
     d64:	c2 c0       	rjmp	.+388    	; 0xeea <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	80 93 ba 01 	sts	0x01BA, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d6c:	85 ed       	ldi	r24, 0xD5	; 213
     d6e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d72:	80 91 bc 00 	lds	r24, 0x00BC
     d76:	84 fd       	sbrc	r24, 4
     d78:	fc cf       	rjmp	.-8      	; 0xd72 <__vector_24+0x184>
     d7a:	b7 c0       	rjmp	.+366    	; 0xeea <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     d7c:	80 e3       	ldi	r24, 0x30	; 48
     d7e:	80 93 ba 01 	sts	0x01BA, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d82:	85 ed       	ldi	r24, 0xD5	; 213
     d84:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d88:	80 91 bc 00 	lds	r24, 0x00BC
     d8c:	84 fd       	sbrc	r24, 4
     d8e:	fc cf       	rjmp	.-8      	; 0xd88 <__vector_24+0x19a>
     d90:	ac c0       	rjmp	.+344    	; 0xeea <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     d92:	88 e3       	ldi	r24, 0x38	; 56
     d94:	80 93 ba 01 	sts	0x01BA, r24
     d98:	9b c0       	rjmp	.+310    	; 0xed0 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     d9a:	80 91 75 01 	lds	r24, 0x0175
     d9e:	90 91 bb 00 	lds	r25, 0x00BB
     da2:	e8 2f       	mov	r30, r24
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	eb 5a       	subi	r30, 0xAB	; 171
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	90 83       	st	Z, r25
     dac:	8f 5f       	subi	r24, 0xFF	; 255
     dae:	80 93 75 01 	sts	0x0175, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     db2:	90 91 75 01 	lds	r25, 0x0175
     db6:	80 91 76 01 	lds	r24, 0x0176
     dba:	82 c0       	rjmp	.+260    	; 0xec0 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     dbc:	80 91 75 01 	lds	r24, 0x0175
     dc0:	90 91 bb 00 	lds	r25, 0x00BB
     dc4:	e8 2f       	mov	r30, r24
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	eb 5a       	subi	r30, 0xAB	; 171
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	90 83       	st	Z, r25
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	80 93 75 01 	sts	0x0175, r24
	if (twi_sendStop)
     dd4:	80 91 4f 01 	lds	r24, 0x014F
     dd8:	88 23       	and	r24, r24
     dda:	41 f0       	breq	.+16     	; 0xdec <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     ddc:	85 ed       	ldi	r24, 0xD5	; 213
     dde:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     de2:	80 91 bc 00 	lds	r24, 0x00BC
     de6:	84 fd       	sbrc	r24, 4
     de8:	fc cf       	rjmp	.-8      	; 0xde2 <__vector_24+0x1f4>
     dea:	7f c0       	rjmp	.+254    	; 0xeea <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 50 01 	sts	0x0150, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     df2:	84 ea       	ldi	r24, 0xA4	; 164
     df4:	6e c0       	rjmp	.+220    	; 0xed2 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     df6:	85 ed       	ldi	r24, 0xD5	; 213
     df8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     dfc:	80 91 bc 00 	lds	r24, 0x00BC
     e00:	84 fd       	sbrc	r24, 4
     e02:	fc cf       	rjmp	.-8      	; 0xdfc <__vector_24+0x20e>
     e04:	72 c0       	rjmp	.+228    	; 0xeea <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	80 93 4d 01 	sts	0x014D, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     e0c:	10 92 b9 01 	sts	0x01B9, r1
     e10:	59 c0       	rjmp	.+178    	; 0xec4 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e12:	80 91 b9 01 	lds	r24, 0x01B9
     e16:	80 32       	cpi	r24, 0x20	; 32
     e18:	08 f0       	brcs	.+2      	; 0xe1c <__vector_24+0x22e>
     e1a:	56 c0       	rjmp	.+172    	; 0xec8 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     e1c:	80 91 b9 01 	lds	r24, 0x01B9
     e20:	90 91 bb 00 	lds	r25, 0x00BB
     e24:	e8 2f       	mov	r30, r24
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	e7 56       	subi	r30, 0x67	; 103
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	90 83       	st	Z, r25
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 93 b9 01 	sts	0x01B9, r24
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e36:	80 91 b9 01 	lds	r24, 0x01B9
     e3a:	80 32       	cpi	r24, 0x20	; 32
     e3c:	30 f4       	brcc	.+12     	; 0xe4a <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     e3e:	e0 91 b9 01 	lds	r30, 0x01B9
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	e7 56       	subi	r30, 0x67	; 103
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
     e48:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     e4a:	85 ed       	ldi	r24, 0xD5	; 213
     e4c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     e50:	80 91 bc 00 	lds	r24, 0x00BC
     e54:	84 fd       	sbrc	r24, 4
     e56:	fc cf       	rjmp	.-8      	; 0xe50 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     e58:	10 92 4d 01 	sts	0x014D, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     e5c:	60 91 b9 01 	lds	r22, 0x01B9
     e60:	e0 91 53 01 	lds	r30, 0x0153
     e64:	f0 91 54 01 	lds	r31, 0x0154
     e68:	89 e9       	ldi	r24, 0x99	; 153
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     e70:	10 92 b9 01 	sts	0x01B9, r1
     e74:	2d c0       	rjmp	.+90     	; 0xed0 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     e76:	84 e0       	ldi	r24, 0x04	; 4
     e78:	80 93 4d 01 	sts	0x014D, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     e7c:	10 92 97 01 	sts	0x0197, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     e80:	10 92 98 01 	sts	0x0198, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     e84:	e0 91 51 01 	lds	r30, 0x0151
     e88:	f0 91 52 01 	lds	r31, 0x0152
     e8c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     e8e:	80 91 98 01 	lds	r24, 0x0198
     e92:	88 23       	and	r24, r24
     e94:	29 f4       	brne	.+10     	; 0xea0 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 98 01 	sts	0x0198, r24
        twi_txBuffer[0] = 0x00;
     e9c:	10 92 77 01 	sts	0x0177, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     ea0:	90 91 97 01 	lds	r25, 0x0197
     ea4:	e9 2f       	mov	r30, r25
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	e9 58       	subi	r30, 0x89	; 137
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	80 81       	ld	r24, Z
     eae:	80 93 bb 00 	sts	0x00BB, r24
     eb2:	9f 5f       	subi	r25, 0xFF	; 255
     eb4:	90 93 97 01 	sts	0x0197, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     eb8:	90 91 97 01 	lds	r25, 0x0197
     ebc:	80 91 98 01 	lds	r24, 0x0198
     ec0:	98 17       	cp	r25, r24
     ec2:	10 f4       	brcc	.+4      	; 0xec8 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     ec4:	85 ec       	ldi	r24, 0xC5	; 197
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     ec8:	85 e8       	ldi	r24, 0x85	; 133
     eca:	80 93 bc 00 	sts	0x00BC, r24
     ece:	0f c0       	rjmp	.+30     	; 0xeee <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     ed0:	85 ec       	ldi	r24, 0xC5	; 197
     ed2:	80 93 bc 00 	sts	0x00BC, r24
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     ed8:	10 92 ba 01 	sts	0x01BA, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     edc:	85 ed       	ldi	r24, 0xD5	; 213
     ede:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     ee2:	80 91 bc 00 	lds	r24, 0x00BC
     ee6:	84 fd       	sbrc	r24, 4
     ee8:	fc cf       	rjmp	.-8      	; 0xee2 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     eea:	10 92 4d 01 	sts	0x014D, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     eee:	ff 91       	pop	r31
     ef0:	ef 91       	pop	r30
     ef2:	bf 91       	pop	r27
     ef4:	af 91       	pop	r26
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	7f 91       	pop	r23
     efc:	6f 91       	pop	r22
     efe:	5f 91       	pop	r21
     f00:	4f 91       	pop	r20
     f02:	3f 91       	pop	r19
     f04:	2f 91       	pop	r18
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     f10:	10 92 4d 01 	sts	0x014D, r1
  twi_sendStop = true;		// default value
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 4f 01 	sts	0x014F, r24
  twi_inRepStart = false;
     f1a:	10 92 50 01 	sts	0x0150, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     f1e:	82 e1       	ldi	r24, 0x12	; 18
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
  digitalWrite(SCL, 1);
     f26:	83 e1       	ldi	r24, 0x13	; 19
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     f2e:	e9 eb       	ldi	r30, 0xB9	; 185
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     f38:	80 81       	ld	r24, Z
     f3a:	8d 7f       	andi	r24, 0xFD	; 253
     f3c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     f3e:	88 e4       	ldi	r24, 0x48	; 72
     f40:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     f44:	85 e4       	ldi	r24, 0x45	; 69
     f46:	80 93 bc 00 	sts	0x00BC, r24
}
     f4a:	08 95       	ret

00000f4c <memcpy>:
     f4c:	fb 01       	movw	r30, r22
     f4e:	dc 01       	movw	r26, r24
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <memcpy+0xa>
     f52:	01 90       	ld	r0, Z+
     f54:	0d 92       	st	X+, r0
     f56:	41 50       	subi	r20, 0x01	; 1
     f58:	50 40       	sbci	r21, 0x00	; 0
     f5a:	d8 f7       	brcc	.-10     	; 0xf52 <memcpy+0x6>
     f5c:	08 95       	ret

00000f5e <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     f5e:	08 95       	ret

00000f60 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	8f 93       	push	r24
     f72:	9f 93       	push	r25
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     f78:	80 91 c0 00 	lds	r24, 0x00C0
     f7c:	82 fd       	sbrc	r24, 2
     f7e:	1d c0       	rjmp	.+58     	; 0xfba <__vector_18+0x5a>
      unsigned char c = UDR0;
     f80:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     f84:	20 91 fb 01 	lds	r18, 0x01FB
     f88:	30 91 fc 01 	lds	r19, 0x01FC

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	2f 73       	andi	r18, 0x3F	; 63
     f92:	30 70       	andi	r19, 0x00	; 0
     f94:	80 91 fd 01 	lds	r24, 0x01FD
     f98:	90 91 fe 01 	lds	r25, 0x01FE
     f9c:	28 17       	cp	r18, r24
     f9e:	39 07       	cpc	r19, r25
     fa0:	71 f0       	breq	.+28     	; 0xfbe <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
     fa2:	e0 91 fb 01 	lds	r30, 0x01FB
     fa6:	f0 91 fc 01 	lds	r31, 0x01FC
     faa:	e5 54       	subi	r30, 0x45	; 69
     fac:	fe 4f       	sbci	r31, 0xFE	; 254
     fae:	40 83       	st	Z, r20
    buffer->head = i;
     fb0:	30 93 fc 01 	sts	0x01FC, r19
     fb4:	20 93 fb 01 	sts	0x01FB, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     fba:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     fd6:	e0 91 4f 02 	lds	r30, 0x024F
     fda:	f0 91 50 02 	lds	r31, 0x0250
     fde:	e0 5c       	subi	r30, 0xC0	; 192
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	81 91       	ld	r24, Z+
     fe4:	91 91       	ld	r25, Z+
     fe6:	20 81       	ld	r18, Z
     fe8:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     fea:	82 1b       	sub	r24, r18
     fec:	93 0b       	sbc	r25, r19
     fee:	8f 73       	andi	r24, 0x3F	; 63
     ff0:	90 70       	andi	r25, 0x00	; 0
     ff2:	89 2b       	or	r24, r25
     ff4:	11 f0       	breq	.+4      	; 0xffa <_Z14serialEventRunv+0x24>
     ff6:	0e 94 af 07 	call	0xf5e	; 0xf5e <_Z11serialEventv>
     ffa:	08 95       	ret

00000ffc <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1012:	20 91 3f 02 	lds	r18, 0x023F
    1016:	30 91 40 02 	lds	r19, 0x0240
    101a:	80 91 41 02 	lds	r24, 0x0241
    101e:	90 91 42 02 	lds	r25, 0x0242
    1022:	28 17       	cp	r18, r24
    1024:	39 07       	cpc	r19, r25
    1026:	31 f4       	brne	.+12     	; 0x1034 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1028:	80 91 c1 00 	lds	r24, 0x00C1
    102c:	8f 7d       	andi	r24, 0xDF	; 223
    102e:	80 93 c1 00 	sts	0x00C1, r24
    1032:	14 c0       	rjmp	.+40     	; 0x105c <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1034:	e0 91 41 02 	lds	r30, 0x0241
    1038:	f0 91 42 02 	lds	r31, 0x0242
    103c:	e1 50       	subi	r30, 0x01	; 1
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1042:	80 91 41 02 	lds	r24, 0x0241
    1046:	90 91 42 02 	lds	r25, 0x0242
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	8f 73       	andi	r24, 0x3F	; 63
    104e:	90 70       	andi	r25, 0x00	; 0
    1050:	90 93 42 02 	sts	0x0242, r25
    1054:	80 93 41 02 	sts	0x0241, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1058:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	9f 91       	pop	r25
    1062:	8f 91       	pop	r24
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1072:	af 92       	push	r10
    1074:	bf 92       	push	r11
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
    1086:	7a 01       	movw	r14, r20
    1088:	8b 01       	movw	r16, r22
    108a:	dd 24       	eor	r13, r13
    108c:	40 30       	cpi	r20, 0x00	; 0
    108e:	81 ee       	ldi	r24, 0xE1	; 225
    1090:	58 07       	cpc	r21, r24
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	68 07       	cpc	r22, r24
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	78 07       	cpc	r23, r24
    109a:	11 f0       	breq	.+4      	; 0x10a0 <_ZN14HardwareSerial5beginEm+0x2e>
    109c:	dd 24       	eor	r13, r13
    109e:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	a9 2e       	mov	r10, r25
    10a4:	b1 2c       	mov	r11, r1
    10a6:	ec 89       	ldd	r30, Y+20	; 0x14
    10a8:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    10aa:	dd 20       	and	r13, r13
    10ac:	69 f0       	breq	.+26     	; 0x10c8 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    10ae:	c5 01       	movw	r24, r10
    10b0:	08 a0       	ldd	r0, Y+32	; 0x20
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <_ZN14HardwareSerial5beginEm+0x46>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <_ZN14HardwareSerial5beginEm+0x42>
    10bc:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	79 e0       	ldi	r23, 0x09	; 9
    10c2:	8d e3       	ldi	r24, 0x3D	; 61
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    10c8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    10ca:	60 e8       	ldi	r22, 0x80	; 128
    10cc:	74 e8       	ldi	r23, 0x84	; 132
    10ce:	8e e1       	ldi	r24, 0x1E	; 30
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a8 01       	movw	r20, r16
    10d4:	97 01       	movw	r18, r14
    10d6:	0e 94 ad 11 	call	0x235a	; 0x235a <__udivmodsi4>
    10da:	21 50       	subi	r18, 0x01	; 1
    10dc:	30 40       	sbci	r19, 0x00	; 0
    10de:	40 40       	sbci	r20, 0x00	; 0
    10e0:	50 40       	sbci	r21, 0x00	; 0
    10e2:	56 95       	lsr	r21
    10e4:	47 95       	ror	r20
    10e6:	37 95       	ror	r19
    10e8:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    10ea:	80 e1       	ldi	r24, 0x10	; 16
    10ec:	20 30       	cpi	r18, 0x00	; 0
    10ee:	38 07       	cpc	r19, r24
    10f0:	20 f0       	brcs	.+8      	; 0x10fa <_ZN14HardwareSerial5beginEm+0x88>
    10f2:	dd 20       	and	r13, r13
    10f4:	11 f0       	breq	.+4      	; 0x10fa <_ZN14HardwareSerial5beginEm+0x88>
    10f6:	dd 24       	eor	r13, r13
    10f8:	d6 cf       	rjmp	.-84     	; 0x10a6 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    10fa:	e8 89       	ldd	r30, Y+16	; 0x10
    10fc:	f9 89       	ldd	r31, Y+17	; 0x11
    10fe:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1100:	ea 89       	ldd	r30, Y+18	; 0x12
    1102:	fb 89       	ldd	r31, Y+19	; 0x13
    1104:	20 83       	st	Z, r18

  transmitting = false;
    1106:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    1108:	ee 89       	ldd	r30, Y+22	; 0x16
    110a:	ff 89       	ldd	r31, Y+23	; 0x17
    110c:	40 81       	ld	r20, Z
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	c9 01       	movw	r24, r18
    1114:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1116:	02 c0       	rjmp	.+4      	; 0x111c <_ZN14HardwareSerial5beginEm+0xaa>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <_ZN14HardwareSerial5beginEm+0xa6>
    1120:	48 2b       	or	r20, r24
    1122:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1124:	ee 89       	ldd	r30, Y+22	; 0x16
    1126:	ff 89       	ldd	r31, Y+23	; 0x17
    1128:	40 81       	ld	r20, Z
    112a:	c9 01       	movw	r24, r18
    112c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <_ZN14HardwareSerial5beginEm+0xc2>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <_ZN14HardwareSerial5beginEm+0xbe>
    1138:	48 2b       	or	r20, r24
    113a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    113c:	ee 89       	ldd	r30, Y+22	; 0x16
    113e:	ff 89       	ldd	r31, Y+23	; 0x17
    1140:	40 81       	ld	r20, Z
    1142:	c9 01       	movw	r24, r18
    1144:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1146:	02 c0       	rjmp	.+4      	; 0x114c <_ZN14HardwareSerial5beginEm+0xda>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <_ZN14HardwareSerial5beginEm+0xd6>
    1150:	48 2b       	or	r20, r24
    1152:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1154:	ee 89       	ldd	r30, Y+22	; 0x16
    1156:	ff 89       	ldd	r31, Y+23	; 0x17
    1158:	80 81       	ld	r24, Z
    115a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <_ZN14HardwareSerial5beginEm+0xf0>
    115e:	22 0f       	add	r18, r18
    1160:	33 1f       	adc	r19, r19
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <_ZN14HardwareSerial5beginEm+0xec>
    1166:	20 95       	com	r18
    1168:	28 23       	and	r18, r24
    116a:	20 83       	st	Z, r18
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	08 95       	ret

00001180 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1180:	dc 01       	movw	r26, r24
    1182:	1c 96       	adiw	r26, 0x0c	; 12
    1184:	ed 91       	ld	r30, X+
    1186:	fc 91       	ld	r31, X
    1188:	1d 97       	sbiw	r26, 0x0d	; 13
    118a:	e0 5c       	subi	r30, 0xC0	; 192
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	21 91       	ld	r18, Z+
    1190:	31 91       	ld	r19, Z+
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	28 1b       	sub	r18, r24
    1198:	39 0b       	sbc	r19, r25
    119a:	2f 73       	andi	r18, 0x3F	; 63
    119c:	30 70       	andi	r19, 0x00	; 0
}
    119e:	c9 01       	movw	r24, r18
    11a0:	08 95       	ret

000011a2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    11a2:	dc 01       	movw	r26, r24
    11a4:	1c 96       	adiw	r26, 0x0c	; 12
    11a6:	ed 91       	ld	r30, X+
    11a8:	fc 91       	ld	r31, X
    11aa:	1d 97       	sbiw	r26, 0x0d	; 13
    11ac:	e0 5c       	subi	r30, 0xC0	; 192
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	20 81       	ld	r18, Z
    11b2:	31 81       	ldd	r19, Z+1	; 0x01
    11b4:	e0 54       	subi	r30, 0x40	; 64
    11b6:	f0 40       	sbci	r31, 0x00	; 0
    11b8:	df 01       	movw	r26, r30
    11ba:	ae 5b       	subi	r26, 0xBE	; 190
    11bc:	bf 4f       	sbci	r27, 0xFF	; 255
    11be:	8d 91       	ld	r24, X+
    11c0:	9c 91       	ld	r25, X
    11c2:	11 97       	sbiw	r26, 0x01	; 1
    11c4:	28 17       	cp	r18, r24
    11c6:	39 07       	cpc	r19, r25
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <_ZN14HardwareSerial4peekEv+0x2e>
    11ca:	2f ef       	ldi	r18, 0xFF	; 255
    11cc:	3f ef       	ldi	r19, 0xFF	; 255
    11ce:	07 c0       	rjmp	.+14     	; 0x11de <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    11d0:	8d 91       	ld	r24, X+
    11d2:	9c 91       	ld	r25, X
    11d4:	e8 0f       	add	r30, r24
    11d6:	f9 1f       	adc	r31, r25
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    11de:	c9 01       	movw	r24, r18
    11e0:	08 95       	ret

000011e2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    11e2:	dc 01       	movw	r26, r24
    11e4:	1c 96       	adiw	r26, 0x0c	; 12
    11e6:	ed 91       	ld	r30, X+
    11e8:	fc 91       	ld	r31, X
    11ea:	1d 97       	sbiw	r26, 0x0d	; 13
    11ec:	e0 5c       	subi	r30, 0xC0	; 192
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	20 81       	ld	r18, Z
    11f2:	31 81       	ldd	r19, Z+1	; 0x01
    11f4:	e0 54       	subi	r30, 0x40	; 64
    11f6:	f0 40       	sbci	r31, 0x00	; 0
    11f8:	df 01       	movw	r26, r30
    11fa:	ae 5b       	subi	r26, 0xBE	; 190
    11fc:	bf 4f       	sbci	r27, 0xFF	; 255
    11fe:	8d 91       	ld	r24, X+
    1200:	9c 91       	ld	r25, X
    1202:	11 97       	sbiw	r26, 0x01	; 1
    1204:	28 17       	cp	r18, r24
    1206:	39 07       	cpc	r19, r25
    1208:	19 f4       	brne	.+6      	; 0x1210 <_ZN14HardwareSerial4readEv+0x2e>
    120a:	2f ef       	ldi	r18, 0xFF	; 255
    120c:	3f ef       	ldi	r19, 0xFF	; 255
    120e:	10 c0       	rjmp	.+32     	; 0x1230 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1210:	8d 91       	ld	r24, X+
    1212:	9c 91       	ld	r25, X
    1214:	11 97       	sbiw	r26, 0x01	; 1
    1216:	e8 0f       	add	r30, r24
    1218:	f9 1f       	adc	r31, r25
    121a:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    121c:	8d 91       	ld	r24, X+
    121e:	9c 91       	ld	r25, X
    1220:	11 97       	sbiw	r26, 0x01	; 1
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	8f 73       	andi	r24, 0x3F	; 63
    1226:	90 70       	andi	r25, 0x00	; 0
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	9c 93       	st	X, r25
    122c:	8e 93       	st	-X, r24
    return c;
    122e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1230:	c9 01       	movw	r24, r18
    1232:	08 95       	ret

00001234 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    1234:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    1236:	91 96       	adiw	r26, 0x21	; 33
    1238:	8c 91       	ld	r24, X
    123a:	91 97       	sbiw	r26, 0x21	; 33
    123c:	88 23       	and	r24, r24
    123e:	39 f0       	breq	.+14     	; 0x124e <_ZN14HardwareSerial5flushEv+0x1a>
    1240:	54 96       	adiw	r26, 0x14	; 20
    1242:	ed 91       	ld	r30, X+
    1244:	fc 91       	ld	r31, X
    1246:	55 97       	sbiw	r26, 0x15	; 21
    1248:	80 81       	ld	r24, Z
    124a:	86 ff       	sbrs	r24, 6
    124c:	f9 cf       	rjmp	.-14     	; 0x1240 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    124e:	91 96       	adiw	r26, 0x21	; 33
    1250:	1c 92       	st	X, r1
}
    1252:	08 95       	ret

00001254 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    125a:	ee 85       	ldd	r30, Y+14	; 0x0e
    125c:	ff 85       	ldd	r31, Y+15	; 0x0f
    125e:	e0 5c       	subi	r30, 0xC0	; 192
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	20 81       	ld	r18, Z
    1264:	31 81       	ldd	r19, Z+1	; 0x01
    1266:	e0 54       	subi	r30, 0x40	; 64
    1268:	f0 40       	sbci	r31, 0x00	; 0
    126a:	2f 5f       	subi	r18, 0xFF	; 255
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	2f 73       	andi	r18, 0x3F	; 63
    1270:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1272:	df 01       	movw	r26, r30
    1274:	ae 5b       	subi	r26, 0xBE	; 190
    1276:	bf 4f       	sbci	r27, 0xFF	; 255
    1278:	8d 91       	ld	r24, X+
    127a:	9c 91       	ld	r25, X
    127c:	11 97       	sbiw	r26, 0x01	; 1
    127e:	28 17       	cp	r18, r24
    1280:	39 07       	cpc	r19, r25
    1282:	d1 f3       	breq	.-12     	; 0x1278 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1284:	e0 5c       	subi	r30, 0xC0	; 192
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	e0 54       	subi	r30, 0x40	; 64
    128e:	f0 40       	sbci	r31, 0x00	; 0
    1290:	e8 0f       	add	r30, r24
    1292:	f9 1f       	adc	r31, r25
    1294:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1296:	ee 85       	ldd	r30, Y+14	; 0x0e
    1298:	ff 85       	ldd	r31, Y+15	; 0x0f
    129a:	e0 5c       	subi	r30, 0xC0	; 192
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	31 83       	std	Z+1, r19	; 0x01
    12a0:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    12a2:	ee 89       	ldd	r30, Y+22	; 0x16
    12a4:	ff 89       	ldd	r31, Y+23	; 0x17
    12a6:	20 81       	ld	r18, Z
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0f 8c       	ldd	r0, Y+31	; 0x1f
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <_ZN14HardwareSerial5writeEh+0x60>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <_ZN14HardwareSerial5writeEh+0x5c>
    12b8:	28 2b       	or	r18, r24
    12ba:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    12c0:	ec 89       	ldd	r30, Y+20	; 0x14
    12c2:	fd 89       	ldd	r31, Y+21	; 0x15
    12c4:	80 81       	ld	r24, Z
    12c6:	80 64       	ori	r24, 0x40	; 64
    12c8:	80 83       	st	Z, r24
  
  return 1;
}
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    12d4:	10 92 46 02 	sts	0x0246, r1
    12d8:	10 92 45 02 	sts	0x0245, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    12dc:	88 ee       	ldi	r24, 0xE8	; 232
    12de:	93 e0       	ldi	r25, 0x03	; 3
    12e0:	a0 e0       	ldi	r26, 0x00	; 0
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	80 93 47 02 	sts	0x0247, r24
    12e8:	90 93 48 02 	sts	0x0248, r25
    12ec:	a0 93 49 02 	sts	0x0249, r26
    12f0:	b0 93 4a 02 	sts	0x024A, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    12f4:	85 e1       	ldi	r24, 0x15	; 21
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	90 93 44 02 	sts	0x0244, r25
    12fc:	80 93 43 02 	sts	0x0243, r24
{
  _rx_buffer = rx_buffer;
    1300:	8b eb       	ldi	r24, 0xBB	; 187
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	90 93 50 02 	sts	0x0250, r25
    1308:	80 93 4f 02 	sts	0x024F, r24
  _tx_buffer = tx_buffer;
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	90 93 52 02 	sts	0x0252, r25
    1314:	80 93 51 02 	sts	0x0251, r24
  _ubrrh = ubrrh;
    1318:	85 ec       	ldi	r24, 0xC5	; 197
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	90 93 54 02 	sts	0x0254, r25
    1320:	80 93 53 02 	sts	0x0253, r24
  _ubrrl = ubrrl;
    1324:	84 ec       	ldi	r24, 0xC4	; 196
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 56 02 	sts	0x0256, r25
    132c:	80 93 55 02 	sts	0x0255, r24
  _ucsra = ucsra;
    1330:	80 ec       	ldi	r24, 0xC0	; 192
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	90 93 58 02 	sts	0x0258, r25
    1338:	80 93 57 02 	sts	0x0257, r24
  _ucsrb = ucsrb;
    133c:	81 ec       	ldi	r24, 0xC1	; 193
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	90 93 5a 02 	sts	0x025A, r25
    1344:	80 93 59 02 	sts	0x0259, r24
  _ucsrc = ucsrc;
    1348:	82 ec       	ldi	r24, 0xC2	; 194
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	90 93 5c 02 	sts	0x025C, r25
    1350:	80 93 5b 02 	sts	0x025B, r24
  _udr = udr;
    1354:	86 ec       	ldi	r24, 0xC6	; 198
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	90 93 5e 02 	sts	0x025E, r25
    135c:	80 93 5d 02 	sts	0x025D, r24
  _rxen = rxen;
    1360:	84 e0       	ldi	r24, 0x04	; 4
    1362:	80 93 5f 02 	sts	0x025F, r24
  _txen = txen;
    1366:	83 e0       	ldi	r24, 0x03	; 3
    1368:	80 93 60 02 	sts	0x0260, r24
  _rxcie = rxcie;
    136c:	87 e0       	ldi	r24, 0x07	; 7
    136e:	80 93 61 02 	sts	0x0261, r24
  _udrie = udrie;
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	80 93 62 02 	sts	0x0262, r24
  _u2x = u2x;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 63 02 	sts	0x0263, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    137e:	08 95       	ret

00001380 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    1380:	85 e2       	ldi	r24, 0x25	; 37
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	90 93 66 02 	sts	0x0266, r25
    1388:	80 93 65 02 	sts	0x0265, r24
{
    _address[0] = first_octet;
    138c:	10 92 67 02 	sts	0x0267, r1
    _address[1] = second_octet;
    1390:	10 92 68 02 	sts	0x0268, r1
    _address[2] = third_octet;
    1394:	10 92 69 02 	sts	0x0269, r1
    _address[3] = fourth_octet;
    1398:	10 92 6a 02 	sts	0x026A, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    139c:	08 95       	ret

0000139e <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	4c 01       	movw	r8, r24
    13b8:	6b 01       	movw	r12, r22
    13ba:	7c 01       	movw	r14, r24
    13bc:	aa 24       	eor	r10, r10
    13be:	bb 24       	eor	r11, r11
    13c0:	c0 e0       	ldi	r28, 0x00	; 0
    13c2:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    13c4:	c6 01       	movw	r24, r12
    13c6:	f7 01       	movw	r30, r14
    13c8:	62 81       	ldd	r22, Z+2	; 0x02
    13ca:	4a e0       	ldi	r20, 0x0A	; 10
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN5Print5printEhi>
    13d2:	8c 01       	movw	r16, r24
        n += p.print('.');
    13d4:	c6 01       	movw	r24, r12
    13d6:	6e e2       	ldi	r22, 0x2E	; 46
    13d8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    13dc:	08 0f       	add	r16, r24
    13de:	19 1f       	adc	r17, r25
        n += p.print('.');
    13e0:	a0 0e       	add	r10, r16
    13e2:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    13e4:	21 96       	adiw	r28, 0x01	; 1
    13e6:	08 94       	sec
    13e8:	e1 1c       	adc	r14, r1
    13ea:	f1 1c       	adc	r15, r1
    13ec:	c3 30       	cpi	r28, 0x03	; 3
    13ee:	d1 05       	cpc	r29, r1
    13f0:	49 f7       	brne	.-46     	; 0x13c4 <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    13f2:	c6 01       	movw	r24, r12
    13f4:	f4 01       	movw	r30, r8
    13f6:	65 81       	ldd	r22, Z+5	; 0x05
    13f8:	4a e0       	ldi	r20, 0x0A	; 10
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN5Print5printEhi>
    1400:	95 01       	movw	r18, r10
    1402:	28 0f       	add	r18, r24
    1404:	39 1f       	adc	r19, r25
    return n;
}
    1406:	c9 01       	movw	r24, r18
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	9f 90       	pop	r9
    141e:	8f 90       	pop	r8
    1420:	08 95       	ret

00001422 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	7c 01       	movw	r14, r24
    1434:	6b 01       	movw	r12, r22
    1436:	8a 01       	movw	r16, r20
    1438:	c0 e0       	ldi	r28, 0x00	; 0
    143a:	d0 e0       	ldi	r29, 0x00	; 0
    143c:	0f c0       	rjmp	.+30     	; 0x145c <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    143e:	d6 01       	movw	r26, r12
    1440:	6d 91       	ld	r22, X+
    1442:	6d 01       	movw	r12, r26
    1444:	d7 01       	movw	r26, r14
    1446:	ed 91       	ld	r30, X+
    1448:	fc 91       	ld	r31, X
    144a:	01 90       	ld	r0, Z+
    144c:	f0 81       	ld	r31, Z
    144e:	e0 2d       	mov	r30, r0
    1450:	c7 01       	movw	r24, r14
    1452:	09 95       	icall
    1454:	c8 0f       	add	r28, r24
    1456:	d9 1f       	adc	r29, r25
    1458:	01 50       	subi	r16, 0x01	; 1
    145a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    145c:	01 15       	cp	r16, r1
    145e:	11 05       	cpc	r17, r1
    1460:	71 f7       	brne	.-36     	; 0x143e <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1462:	ce 01       	movw	r24, r28
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	08 95       	ret

00001476 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    1476:	dc 01       	movw	r26, r24
{
  return write(c);
    1478:	ed 91       	ld	r30, X+
    147a:	fc 91       	ld	r31, X
    147c:	01 90       	ld	r0, Z+
    147e:	f0 81       	ld	r31, Z
    1480:	e0 2d       	mov	r30, r0
    1482:	09 95       	icall
}
    1484:	08 95       	ret

00001486 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    148c:	61 15       	cp	r22, r1
    148e:	71 05       	cpc	r23, r1
    1490:	19 f4       	brne	.+6      	; 0x1498 <_ZN5Print5writeEPKc+0x12>
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    1498:	db 01       	movw	r26, r22
    149a:	0d 90       	ld	r0, X+
    149c:	00 20       	and	r0, r0
    149e:	e9 f7       	brne	.-6      	; 0x149a <_ZN5Print5writeEPKc+0x14>
    14a0:	11 97       	sbiw	r26, 0x01	; 1
    14a2:	a6 1b       	sub	r26, r22
    14a4:	b7 0b       	sbc	r27, r23
    14a6:	e8 81       	ld	r30, Y
    14a8:	f9 81       	ldd	r31, Y+1	; 0x01
    14aa:	02 80       	ldd	r0, Z+2	; 0x02
    14ac:	f3 81       	ldd	r31, Z+3	; 0x03
    14ae:	e0 2d       	mov	r30, r0
    14b0:	ad 01       	movw	r20, r26
    14b2:	09 95       	icall
    14b4:	9c 01       	movw	r18, r24
    }
    14b6:	c9 01       	movw	r24, r18
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    14be:	4f 92       	push	r4
    14c0:	5f 92       	push	r5
    14c2:	7f 92       	push	r7
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	a1 97       	sbiw	r28, 0x21	; 33
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	2c 01       	movw	r4, r24
    14ee:	74 2e       	mov	r7, r20
    14f0:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	08 f4       	brcc	.+2      	; 0x14f8 <_ZN5Print11printNumberEmh+0x3a>
    14f6:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    14f8:	19 a2       	std	Y+33, r1	; 0x21
    14fa:	31 e2       	ldi	r19, 0x21	; 33
    14fc:	c3 2e       	mov	r12, r19
    14fe:	d1 2c       	mov	r13, r1
    1500:	cc 0e       	add	r12, r28
    1502:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1504:	82 2e       	mov	r8, r18
    1506:	99 24       	eor	r9, r9
    1508:	aa 24       	eor	r10, r10
    150a:	bb 24       	eor	r11, r11
    150c:	67 2d       	mov	r22, r7
    150e:	75 2f       	mov	r23, r21
    1510:	a5 01       	movw	r20, r10
    1512:	94 01       	movw	r18, r8
    1514:	0e 94 ad 11 	call	0x235a	; 0x235a <__udivmodsi4>
    1518:	79 01       	movw	r14, r18
    151a:	8a 01       	movw	r16, r20
    char c = m - base * n;
    151c:	c8 01       	movw	r24, r16
    151e:	b7 01       	movw	r22, r14
    1520:	a5 01       	movw	r20, r10
    1522:	94 01       	movw	r18, r8
    1524:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsi3>
    1528:	47 2d       	mov	r20, r7
    152a:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    152c:	08 94       	sec
    152e:	c1 08       	sbc	r12, r1
    1530:	d1 08       	sbc	r13, r1
    1532:	4a 30       	cpi	r20, 0x0A	; 10
    1534:	14 f4       	brge	.+4      	; 0x153a <_ZN5Print11printNumberEmh+0x7c>
    1536:	40 5d       	subi	r20, 0xD0	; 208
    1538:	01 c0       	rjmp	.+2      	; 0x153c <_ZN5Print11printNumberEmh+0x7e>
    153a:	49 5c       	subi	r20, 0xC9	; 201
    153c:	f6 01       	movw	r30, r12
    153e:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1540:	e1 14       	cp	r14, r1
    1542:	f1 04       	cpc	r15, r1
    1544:	01 05       	cpc	r16, r1
    1546:	11 05       	cpc	r17, r1
    1548:	21 f0       	breq	.+8      	; 0x1552 <_ZN5Print11printNumberEmh+0x94>
    154a:	7e 2c       	mov	r7, r14
    154c:	5f 2d       	mov	r21, r15
    154e:	c8 01       	movw	r24, r16
    1550:	dd cf       	rjmp	.-70     	; 0x150c <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1552:	c2 01       	movw	r24, r4
    1554:	b6 01       	movw	r22, r12
    1556:	0e 94 43 0a 	call	0x1486	; 0x1486 <_ZN5Print5writeEPKc>
}
    155a:	a1 96       	adiw	r28, 0x21	; 33
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	9f 90       	pop	r9
    157c:	8f 90       	pop	r8
    157e:	7f 90       	pop	r7
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	08 95       	ret

00001586 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1586:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1588:	21 15       	cp	r18, r1
    158a:	31 05       	cpc	r19, r1
    158c:	41 f4       	brne	.+16     	; 0x159e <_ZN5Print5printEmi+0x18>
    158e:	ed 91       	ld	r30, X+
    1590:	fc 91       	ld	r31, X
    1592:	01 90       	ld	r0, Z+
    1594:	f0 81       	ld	r31, Z
    1596:	e0 2d       	mov	r30, r0
    1598:	64 2f       	mov	r22, r20
    159a:	09 95       	icall
    159c:	08 95       	ret
  else return printNumber(n, base);
    159e:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN5Print11printNumberEmh>
}
    15a2:	08 95       	ret

000015a4 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    15ae:	e6 2e       	mov	r14, r22
    15b0:	ff 24       	eor	r15, r15
    15b2:	00 e0       	ldi	r16, 0x00	; 0
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	b8 01       	movw	r22, r16
    15b8:	a7 01       	movw	r20, r14
    15ba:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN5Print5printEmi>
}
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	08 95       	ret

000015c8 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	41 f0       	breq	.+16     	; 0x15dc <_Z12disableTimerh+0x14>
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	18 f0       	brcs	.+6      	; 0x15d6 <_Z12disableTimerh+0xe>
    15d0:	82 30       	cpi	r24, 0x02	; 2
    15d2:	d1 f4       	brne	.+52     	; 0x1608 <_Z12disableTimerh+0x40>
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <_Z12disableTimerh+0x20>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    15d6:	10 92 6e 00 	sts	0x006E, r1
    15da:	08 95       	ret
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    15dc:	80 91 6f 00 	lds	r24, 0x006F
    15e0:	8d 7f       	andi	r24, 0xFD	; 253
    15e2:	80 93 6f 00 	sts	0x006F, r24
    15e6:	08 95       	ret
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    15e8:	80 91 70 00 	lds	r24, 0x0070
    15ec:	8d 7f       	andi	r24, 0xFD	; 253
    15ee:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    15f8:	80 91 b1 00 	lds	r24, 0x00B1
    15fc:	88 7f       	andi	r24, 0xF8	; 248
    15fe:	84 60       	ori	r24, 0x04	; 4
    1600:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1604:	10 92 b3 00 	sts	0x00B3, r1
    1608:	08 95       	ret

0000160a <_Z6noToneh>:
#endif
  }
}


void noTone(uint8_t _pin)
    160a:	1f 93       	push	r17
    160c:	18 2f       	mov	r17, r24
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    160e:	80 91 04 01 	lds	r24, 0x0104
    1612:	81 17       	cp	r24, r17
    1614:	11 f0       	breq	.+4      	; 0x161a <_Z6noToneh+0x10>
    1616:	9f ef       	ldi	r25, 0xFF	; 255
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    161a:	e8 e6       	ldi	r30, 0x68	; 104
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	94 91       	lpm	r25, Z+
      tone_pins[i] = 255;
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	80 93 04 01 	sts	0x0104, r24
    }
  }
  
  disableTimer(_timer);
    1626:	89 2f       	mov	r24, r25
    1628:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    162c:	81 2f       	mov	r24, r17
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
}
    1634:	1f 91       	pop	r17
    1636:	08 95       	ret

00001638 <__vector_7>:
}
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	2f 93       	push	r18
    1644:	3f 93       	push	r19
    1646:	4f 93       	push	r20
    1648:	5f 93       	push	r21
    164a:	6f 93       	push	r22
    164c:	7f 93       	push	r23
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	ef 93       	push	r30
    1658:	ff 93       	push	r31
{

  if (timer2_toggle_count != 0)
    165a:	80 91 6b 02 	lds	r24, 0x026B
    165e:	90 91 6c 02 	lds	r25, 0x026C
    1662:	a0 91 6d 02 	lds	r26, 0x026D
    1666:	b0 91 6e 02 	lds	r27, 0x026E
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	a1 05       	cpc	r26, r1
    166e:	b1 05       	cpc	r27, r1
    1670:	51 f1       	breq	.+84     	; 0x16c6 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1672:	e0 91 6f 02 	lds	r30, 0x026F
    1676:	f0 91 70 02 	lds	r31, 0x0270
    167a:	80 81       	ld	r24, Z
    167c:	90 91 71 02 	lds	r25, 0x0271
    1680:	89 27       	eor	r24, r25
    1682:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1684:	80 91 6b 02 	lds	r24, 0x026B
    1688:	90 91 6c 02 	lds	r25, 0x026C
    168c:	a0 91 6d 02 	lds	r26, 0x026D
    1690:	b0 91 6e 02 	lds	r27, 0x026E
    1694:	18 16       	cp	r1, r24
    1696:	19 06       	cpc	r1, r25
    1698:	1a 06       	cpc	r1, r26
    169a:	1b 06       	cpc	r1, r27
    169c:	c4 f4       	brge	.+48     	; 0x16ce <__vector_7+0x96>
      timer2_toggle_count--;
    169e:	80 91 6b 02 	lds	r24, 0x026B
    16a2:	90 91 6c 02 	lds	r25, 0x026C
    16a6:	a0 91 6d 02 	lds	r26, 0x026D
    16aa:	b0 91 6e 02 	lds	r27, 0x026E
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	a1 09       	sbc	r26, r1
    16b2:	b1 09       	sbc	r27, r1
    16b4:	80 93 6b 02 	sts	0x026B, r24
    16b8:	90 93 6c 02 	sts	0x026C, r25
    16bc:	a0 93 6d 02 	sts	0x026D, r26
    16c0:	b0 93 6e 02 	sts	0x026E, r27
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    16c6:	80 91 04 01 	lds	r24, 0x0104
    16ca:	0e 94 05 0b 	call	0x160a	; 0x160a <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <main>:
#include <Arduino.h>

int main(void)
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
{
	init();
    16f4:	0e 94 f7 03 	call	0x7ee	; 0x7ee <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    16f8:	0e 94 77 10 	call	0x20ee	; 0x20ee <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    16fc:	cb ee       	ldi	r28, 0xEB	; 235
    16fe:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    1700:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <loop>
		if (serialEventRun) serialEventRun();
    1704:	20 97       	sbiw	r28, 0x00	; 0
    1706:	e1 f3       	breq	.-8      	; 0x1700 <main+0x10>
    1708:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_Z14serialEventRunv>
    170c:	f9 cf       	rjmp	.-14     	; 0x1700 <main+0x10>

0000170e <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    170e:	0e 94 a6 01 	call	0x34c	; 0x34c <free>
}
    1712:	08 95       	ret

00001714 <_ZN7MessageC1EPi>:





Message::Message(int bits[]) {
    1714:	fc 01       	movw	r30, r24
    1716:	db 01       	movw	r26, r22
    1718:	8b e2       	ldi	r24, 0x2B	; 43
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub

	this->bits[0] = bits[0];
    1720:	8d 91       	ld	r24, X+
    1722:	9c 91       	ld	r25, X
    1724:	11 97       	sbiw	r26, 0x01	; 1
    1726:	93 83       	std	Z+3, r25	; 0x03
    1728:	82 83       	std	Z+2, r24	; 0x02
	this->bits[1] = bits[1];
    172a:	12 96       	adiw	r26, 0x02	; 2
    172c:	8d 91       	ld	r24, X+
    172e:	9c 91       	ld	r25, X
    1730:	13 97       	sbiw	r26, 0x03	; 3
    1732:	95 83       	std	Z+5, r25	; 0x05
    1734:	84 83       	std	Z+4, r24	; 0x04
	this->bits[2] = bits[2];
    1736:	14 96       	adiw	r26, 0x04	; 4
    1738:	8d 91       	ld	r24, X+
    173a:	9c 91       	ld	r25, X
    173c:	15 97       	sbiw	r26, 0x05	; 5
    173e:	97 83       	std	Z+7, r25	; 0x07
    1740:	86 83       	std	Z+6, r24	; 0x06
	this->bits[3] = bits[3];
    1742:	16 96       	adiw	r26, 0x06	; 6
    1744:	8d 91       	ld	r24, X+
    1746:	9c 91       	ld	r25, X
    1748:	17 97       	sbiw	r26, 0x07	; 7
    174a:	91 87       	std	Z+9, r25	; 0x09
    174c:	80 87       	std	Z+8, r24	; 0x08
	this->bits[4] = bits[4];
    174e:	18 96       	adiw	r26, 0x08	; 8
    1750:	8d 91       	ld	r24, X+
    1752:	9c 91       	ld	r25, X
    1754:	19 97       	sbiw	r26, 0x09	; 9
    1756:	93 87       	std	Z+11, r25	; 0x0b
    1758:	82 87       	std	Z+10, r24	; 0x0a
	this->bits[5] = bits[5];
    175a:	1a 96       	adiw	r26, 0x0a	; 10
    175c:	8d 91       	ld	r24, X+
    175e:	9c 91       	ld	r25, X
    1760:	1b 97       	sbiw	r26, 0x0b	; 11
    1762:	95 87       	std	Z+13, r25	; 0x0d
    1764:	84 87       	std	Z+12, r24	; 0x0c


	this->pointer_message_read=0;
    1766:	17 86       	std	Z+15, r1	; 0x0f
    1768:	16 86       	std	Z+14, r1	; 0x0e
	MSG_LENGTH=6;
    176a:	86 e0       	ldi	r24, 0x06	; 6
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	91 8b       	std	Z+17, r25	; 0x11
    1770:	80 8b       	std	Z+16, r24	; 0x10

}
    1772:	08 95       	ret

00001774 <_ZN7MessageD1Ev>:


Message::~Message() {
    1774:	fc 01       	movw	r30, r24
    1776:	8b e2       	ldi	r24, 0x2B	; 43
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
	this->MSG_LENGTH=6;
    177e:	86 e0       	ldi	r24, 0x06	; 6
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	91 8b       	std	Z+17, r25	; 0x11
    1784:	80 8b       	std	Z+16, r24	; 0x10
	// TODO Auto-generated destructor stub

}
    1786:	08 95       	ret

00001788 <_ZN7MessageD0Ev>:
	MSG_LENGTH=6;

}


Message::~Message() {
    1788:	fc 01       	movw	r30, r24
    178a:	8b e2       	ldi	r24, 0x2B	; 43
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
	this->MSG_LENGTH=6;
    1792:	86 e0       	ldi	r24, 0x06	; 6
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	91 8b       	std	Z+17, r25	; 0x11
    1798:	80 8b       	std	Z+16, r24	; 0x10
	// TODO Auto-generated destructor stub

}
    179a:	cf 01       	movw	r24, r30
    179c:	0e 94 87 0b 	call	0x170e	; 0x170e <_ZdlPv>
    17a0:	08 95       	ret

000017a2 <_Z10send_bit_0v>:



void send_bit_0(){
	//do nothing
	delay(5);
    17a2:	65 e0       	ldi	r22, 0x05	; 5
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 94 03 	call	0x728	; 0x728 <delay>

}
    17ae:	08 95       	ret

000017b0 <_Z10send_bit_1v>:

void send_bit_1(){
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
	   */


	  //Serial.println("PING");
	  //delay(5);
	  Wire.beginTransmission(112);
    17b4:	0a eb       	ldi	r16, 0xBA	; 186
    17b6:	12 e0       	ldi	r17, 0x02	; 2
    17b8:	c8 01       	movw	r24, r16
    17ba:	60 e7       	ldi	r22, 0x70	; 112
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN7TwoWire17beginTransmissionEi>
	  Wire.write(byte(0x00)); // Register 0 -> control register
    17c2:	c8 01       	movw	r24, r16
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN7TwoWire5writeEh>
	  Wire.write(byte(0x5C)); // Erzeugt einen 8 zyklischen 40khz Impuls/Ton
    17ca:	c8 01       	movw	r24, r16
    17cc:	6c e5       	ldi	r22, 0x5C	; 92
    17ce:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN7TwoWire5writeEh>
	  Wire.endTransmission();
    17d2:	c8 01       	movw	r24, r16
    17d4:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN7TwoWire15endTransmissionEv>

	  delay(5);
    17d8:	65 e0       	ldi	r22, 0x05	; 5
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 94 03 	call	0x728	; 0x728 <delay>


}
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	08 95       	ret

000017ea <loop>:



void loop() {
	//HEADER_START
	send_bit_1();
    17ea:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    17ee:	67 e2       	ldi	r22, 0x27	; 39
    17f0:	71 e0       	ldi	r23, 0x01	; 1
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 94 03 	call	0x728	; 0x728 <delay>

	//MSG_TYPE 2
	send_bit_0();
    17fa:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    17fe:	67 e2       	ldi	r22, 0x27	; 39
    1800:	71 e0       	ldi	r23, 0x01	; 1
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    180a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    180e:	67 e2       	ldi	r22, 0x27	; 39
    1810:	71 e0       	ldi	r23, 0x01	; 1
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    181a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    181e:	67 e2       	ldi	r22, 0x27	; 39
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    182a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    182e:	67 e2       	ldi	r22, 0x27	; 39
    1830:	71 e0       	ldi	r23, 0x01	; 1
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 94 03 	call	0x728	; 0x728 <delay>




	//MAC_FROM
	send_bit_0();
    183a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    183e:	67 e2       	ldi	r22, 0x27	; 39
    1840:	71 e0       	ldi	r23, 0x01	; 1
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    184a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    184e:	67 e2       	ldi	r22, 0x27	; 39
    1850:	71 e0       	ldi	r23, 0x01	; 1
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    185a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    185e:	67 e2       	ldi	r22, 0x27	; 39
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    186a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    186e:	67 e2       	ldi	r22, 0x27	; 39
    1870:	71 e0       	ldi	r23, 0x01	; 1
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    187a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    187e:	67 e2       	ldi	r22, 0x27	; 39
    1880:	71 e0       	ldi	r23, 0x01	; 1
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    188a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    188e:	67 e2       	ldi	r22, 0x27	; 39
    1890:	71 e0       	ldi	r23, 0x01	; 1
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    189a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    189e:	67 e2       	ldi	r22, 0x27	; 39
    18a0:	71 e0       	ldi	r23, 0x01	; 1
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    18aa:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    18ae:	67 e2       	ldi	r22, 0x27	; 39
    18b0:	71 e0       	ldi	r23, 0x01	; 1
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	//Parity_BIT
//	send_bit_0();
//	delay(WAITING_TIME);

	//MAC_TO
	send_bit_0();
    18ba:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    18be:	67 e2       	ldi	r22, 0x27	; 39
    18c0:	71 e0       	ldi	r23, 0x01	; 1
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    18ca:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    18ce:	67 e2       	ldi	r22, 0x27	; 39
    18d0:	71 e0       	ldi	r23, 0x01	; 1
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    18da:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    18de:	67 e2       	ldi	r22, 0x27	; 39
    18e0:	71 e0       	ldi	r23, 0x01	; 1
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    18ea:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    18ee:	67 e2       	ldi	r22, 0x27	; 39
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    18fa:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    18fe:	67 e2       	ldi	r22, 0x27	; 39
    1900:	71 e0       	ldi	r23, 0x01	; 1
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    190a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    190e:	67 e2       	ldi	r22, 0x27	; 39
    1910:	71 e0       	ldi	r23, 0x01	; 1
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    191a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    191e:	67 e2       	ldi	r22, 0x27	; 39
    1920:	71 e0       	ldi	r23, 0x01	; 1
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    192a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    192e:	67 e2       	ldi	r22, 0x27	; 39
    1930:	71 e0       	ldi	r23, 0x01	; 1
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	delay(WAITING_TIME);


	//DATA_SIZE 2 bytes

	send_bit_0();
    193a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    193e:	67 e2       	ldi	r22, 0x27	; 39
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    194a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    194e:	67 e2       	ldi	r22, 0x27	; 39
    1950:	71 e0       	ldi	r23, 0x01	; 1
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    195a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    195e:	67 e2       	ldi	r22, 0x27	; 39
    1960:	71 e0       	ldi	r23, 0x01	; 1
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    196a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    196e:	67 e2       	ldi	r22, 0x27	; 39
    1970:	71 e0       	ldi	r23, 0x01	; 1
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    197a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    197e:	67 e2       	ldi	r22, 0x27	; 39
    1980:	71 e0       	ldi	r23, 0x01	; 1
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    198a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    198e:	67 e2       	ldi	r22, 0x27	; 39
    1990:	71 e0       	ldi	r23, 0x01	; 1
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    199a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    199e:	67 e2       	ldi	r22, 0x27	; 39
    19a0:	71 e0       	ldi	r23, 0x01	; 1
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    19aa:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    19ae:	67 e2       	ldi	r22, 0x27	; 39
    19b0:	71 e0       	ldi	r23, 0x01	; 1
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	//Parity_BIT
//	send_bit_0();
//	delay(WAITING_TIME);

	//DATA 1st byte
	send_bit_1();
    19ba:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    19be:	67 e2       	ldi	r22, 0x27	; 39
    19c0:	71 e0       	ldi	r23, 0x01	; 1
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    19ca:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    19ce:	67 e2       	ldi	r22, 0x27	; 39
    19d0:	71 e0       	ldi	r23, 0x01	; 1
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    19da:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    19de:	67 e2       	ldi	r22, 0x27	; 39
    19e0:	71 e0       	ldi	r23, 0x01	; 1
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    19ea:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    19ee:	67 e2       	ldi	r22, 0x27	; 39
    19f0:	71 e0       	ldi	r23, 0x01	; 1
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    19fa:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    19fe:	67 e2       	ldi	r22, 0x27	; 39
    1a00:	71 e0       	ldi	r23, 0x01	; 1
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1a0a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1a0e:	67 e2       	ldi	r22, 0x27	; 39
    1a10:	71 e0       	ldi	r23, 0x01	; 1
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1a1a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1a1e:	67 e2       	ldi	r22, 0x27	; 39
    1a20:	71 e0       	ldi	r23, 0x01	; 1
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1a2a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1a2e:	67 e2       	ldi	r22, 0x27	; 39
    1a30:	71 e0       	ldi	r23, 0x01	; 1
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	send_bit_1();
//	delay(WAITING_TIME);


	//DATA 2nd byte
	send_bit_0();
    1a3a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1a3e:	67 e2       	ldi	r22, 0x27	; 39
    1a40:	71 e0       	ldi	r23, 0x01	; 1
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1a4a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1a4e:	67 e2       	ldi	r22, 0x27	; 39
    1a50:	71 e0       	ldi	r23, 0x01	; 1
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1a5a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1a5e:	67 e2       	ldi	r22, 0x27	; 39
    1a60:	71 e0       	ldi	r23, 0x01	; 1
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1a6a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1a6e:	67 e2       	ldi	r22, 0x27	; 39
    1a70:	71 e0       	ldi	r23, 0x01	; 1
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1a7a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1a7e:	67 e2       	ldi	r22, 0x27	; 39
    1a80:	71 e0       	ldi	r23, 0x01	; 1
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1a8a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1a8e:	67 e2       	ldi	r22, 0x27	; 39
    1a90:	71 e0       	ldi	r23, 0x01	; 1
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1a9a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1a9e:	67 e2       	ldi	r22, 0x27	; 39
    1aa0:	71 e0       	ldi	r23, 0x01	; 1
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1aaa:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1aae:	67 e2       	ldi	r22, 0x27	; 39
    1ab0:	71 e0       	ldi	r23, 0x01	; 1
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	//Parity_BIT
//	send_bit_1();
//	delay(WAITING_TIME);
	delay(10000);
    1aba:	60 e1       	ldi	r22, 0x10	; 16
    1abc:	77 e2       	ldi	r23, 0x27	; 39
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 94 03 	call	0x728	; 0x728 <delay>




	//HEADER_START
	send_bit_1();
    1ac6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1aca:	67 e2       	ldi	r22, 0x27	; 39
    1acc:	71 e0       	ldi	r23, 0x01	; 1
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 94 03 	call	0x728	; 0x728 <delay>

	//MSG_TYPE 1
	send_bit_0();
    1ad6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1ada:	67 e2       	ldi	r22, 0x27	; 39
    1adc:	71 e0       	ldi	r23, 0x01	; 1
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1ae6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1aea:	67 e2       	ldi	r22, 0x27	; 39
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1af6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1afa:	67 e2       	ldi	r22, 0x27	; 39
    1afc:	71 e0       	ldi	r23, 0x01	; 1
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1b06:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1b0a:	67 e2       	ldi	r22, 0x27	; 39
    1b0c:	71 e0       	ldi	r23, 0x01	; 1
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	send_bit_0();
//	delay(WAITING_TIME);


	//MAC_FROM
	send_bit_0();
    1b16:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1b1a:	67 e2       	ldi	r22, 0x27	; 39
    1b1c:	71 e0       	ldi	r23, 0x01	; 1
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1b26:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1b2a:	67 e2       	ldi	r22, 0x27	; 39
    1b2c:	71 e0       	ldi	r23, 0x01	; 1
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1b36:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1b3a:	67 e2       	ldi	r22, 0x27	; 39
    1b3c:	71 e0       	ldi	r23, 0x01	; 1
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1b46:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1b4a:	67 e2       	ldi	r22, 0x27	; 39
    1b4c:	71 e0       	ldi	r23, 0x01	; 1
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1b56:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1b5a:	67 e2       	ldi	r22, 0x27	; 39
    1b5c:	71 e0       	ldi	r23, 0x01	; 1
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1b66:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1b6a:	67 e2       	ldi	r22, 0x27	; 39
    1b6c:	71 e0       	ldi	r23, 0x01	; 1
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1b76:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1b7a:	67 e2       	ldi	r22, 0x27	; 39
    1b7c:	71 e0       	ldi	r23, 0x01	; 1
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1b86:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1b8a:	67 e2       	ldi	r22, 0x27	; 39
    1b8c:	71 e0       	ldi	r23, 0x01	; 1
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	//Parity_BIT
//	send_bit_0();
//	delay(WAITING_TIME);

	//MAC_TO
	send_bit_0();
    1b96:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1b9a:	67 e2       	ldi	r22, 0x27	; 39
    1b9c:	71 e0       	ldi	r23, 0x01	; 1
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1ba6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1baa:	67 e2       	ldi	r22, 0x27	; 39
    1bac:	71 e0       	ldi	r23, 0x01	; 1
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1bb6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1bba:	67 e2       	ldi	r22, 0x27	; 39
    1bbc:	71 e0       	ldi	r23, 0x01	; 1
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1bc6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1bca:	67 e2       	ldi	r22, 0x27	; 39
    1bcc:	71 e0       	ldi	r23, 0x01	; 1
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1bd6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1bda:	67 e2       	ldi	r22, 0x27	; 39
    1bdc:	71 e0       	ldi	r23, 0x01	; 1
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1be6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1bea:	67 e2       	ldi	r22, 0x27	; 39
    1bec:	71 e0       	ldi	r23, 0x01	; 1
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1bf6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1bfa:	67 e2       	ldi	r22, 0x27	; 39
    1bfc:	71 e0       	ldi	r23, 0x01	; 1
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1c06:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1c0a:	67 e2       	ldi	r22, 0x27	; 39
    1c0c:	71 e0       	ldi	r23, 0x01	; 1
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	//Parity_BIT
//	send_bit_0();
//	delay(WAITING_TIME);
	delay(10000);
    1c16:	60 e1       	ldi	r22, 0x10	; 16
    1c18:	77 e2       	ldi	r23, 0x27	; 39
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 94 03 	call	0x728	; 0x728 <delay>




	//HEADER_START
	send_bit_1();
    1c22:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1c26:	67 e2       	ldi	r22, 0x27	; 39
    1c28:	71 e0       	ldi	r23, 0x01	; 1
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 94 03 	call	0x728	; 0x728 <delay>

	//MSG_TYPE 0
	send_bit_0();
    1c32:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1c36:	67 e2       	ldi	r22, 0x27	; 39
    1c38:	71 e0       	ldi	r23, 0x01	; 1
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1c42:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1c46:	67 e2       	ldi	r22, 0x27	; 39
    1c48:	71 e0       	ldi	r23, 0x01	; 1
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1c52:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1c56:	67 e2       	ldi	r22, 0x27	; 39
    1c58:	71 e0       	ldi	r23, 0x01	; 1
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1c62:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1c66:	67 e2       	ldi	r22, 0x27	; 39
    1c68:	71 e0       	ldi	r23, 0x01	; 1
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	//Parity_BIT
//	send_bit_1();
//	delay(WAITING_TIME);

	//MAC_FROM
	send_bit_0();
    1c72:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1c76:	67 e2       	ldi	r22, 0x27	; 39
    1c78:	71 e0       	ldi	r23, 0x01	; 1
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1c82:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1c86:	67 e2       	ldi	r22, 0x27	; 39
    1c88:	71 e0       	ldi	r23, 0x01	; 1
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1c92:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1c96:	67 e2       	ldi	r22, 0x27	; 39
    1c98:	71 e0       	ldi	r23, 0x01	; 1
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1ca2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1ca6:	67 e2       	ldi	r22, 0x27	; 39
    1ca8:	71 e0       	ldi	r23, 0x01	; 1
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1cb2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1cb6:	67 e2       	ldi	r22, 0x27	; 39
    1cb8:	71 e0       	ldi	r23, 0x01	; 1
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1cc2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1cc6:	67 e2       	ldi	r22, 0x27	; 39
    1cc8:	71 e0       	ldi	r23, 0x01	; 1
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1cd2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1cd6:	67 e2       	ldi	r22, 0x27	; 39
    1cd8:	71 e0       	ldi	r23, 0x01	; 1
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1ce2:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1ce6:	67 e2       	ldi	r22, 0x27	; 39
    1ce8:	71 e0       	ldi	r23, 0x01	; 1
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	//Parity_BIT
//	send_bit_0();
//	delay(WAITING_TIME);

	//MAC_TO
	send_bit_0();
    1cf2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1cf6:	67 e2       	ldi	r22, 0x27	; 39
    1cf8:	71 e0       	ldi	r23, 0x01	; 1
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1d02:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1d06:	67 e2       	ldi	r22, 0x27	; 39
    1d08:	71 e0       	ldi	r23, 0x01	; 1
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1d12:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1d16:	67 e2       	ldi	r22, 0x27	; 39
    1d18:	71 e0       	ldi	r23, 0x01	; 1
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1d22:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1d26:	67 e2       	ldi	r22, 0x27	; 39
    1d28:	71 e0       	ldi	r23, 0x01	; 1
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1d32:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1d36:	67 e2       	ldi	r22, 0x27	; 39
    1d38:	71 e0       	ldi	r23, 0x01	; 1
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1d42:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1d46:	67 e2       	ldi	r22, 0x27	; 39
    1d48:	71 e0       	ldi	r23, 0x01	; 1
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_1();
    1d52:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
	delay(WAITING_TIME);
    1d56:	67 e2       	ldi	r22, 0x27	; 39
    1d58:	71 e0       	ldi	r23, 0x01	; 1
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
	send_bit_0();
    1d62:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
	delay(WAITING_TIME);
    1d66:	67 e2       	ldi	r22, 0x27	; 39
    1d68:	71 e0       	ldi	r23, 0x01	; 1
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//	//Parity_BIT
//	send_bit_0();
//	delay(WAITING_TIME);
	delay(10000);
    1d72:	60 e1       	ldi	r22, 0x10	; 16
    1d74:	77 e2       	ldi	r23, 0x27	; 39
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 94 03 	call	0x728	; 0x728 <delay>



	//HEADER_START
		send_bit_1();
    1d7e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1d82:	67 e2       	ldi	r22, 0x27	; 39
    1d84:	71 e0       	ldi	r23, 0x01	; 1
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 94 03 	call	0x728	; 0x728 <delay>

		//MSG_TYPE 2
		send_bit_0();
    1d8e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1d92:	67 e2       	ldi	r22, 0x27	; 39
    1d94:	71 e0       	ldi	r23, 0x01	; 1
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1d9e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1da2:	67 e2       	ldi	r22, 0x27	; 39
    1da4:	71 e0       	ldi	r23, 0x01	; 1
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1dae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1db2:	67 e2       	ldi	r22, 0x27	; 39
    1db4:	71 e0       	ldi	r23, 0x01	; 1
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1dbe:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1dc2:	67 e2       	ldi	r22, 0x27	; 39
    1dc4:	71 e0       	ldi	r23, 0x01	; 1
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//		delay(WAITING_TIME);



		//MAC_FROM
		send_bit_0();
    1dce:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1dd2:	67 e2       	ldi	r22, 0x27	; 39
    1dd4:	71 e0       	ldi	r23, 0x01	; 1
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1dde:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1de2:	67 e2       	ldi	r22, 0x27	; 39
    1de4:	71 e0       	ldi	r23, 0x01	; 1
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1dee:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1df2:	67 e2       	ldi	r22, 0x27	; 39
    1df4:	71 e0       	ldi	r23, 0x01	; 1
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1dfe:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e02:	67 e2       	ldi	r22, 0x27	; 39
    1e04:	71 e0       	ldi	r23, 0x01	; 1
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1e0e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e12:	67 e2       	ldi	r22, 0x27	; 39
    1e14:	71 e0       	ldi	r23, 0x01	; 1
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1e1e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e22:	67 e2       	ldi	r22, 0x27	; 39
    1e24:	71 e0       	ldi	r23, 0x01	; 1
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1e2e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e32:	67 e2       	ldi	r22, 0x27	; 39
    1e34:	71 e0       	ldi	r23, 0x01	; 1
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1e3e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1e42:	67 e2       	ldi	r22, 0x27	; 39
    1e44:	71 e0       	ldi	r23, 0x01	; 1
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//		//Parity_BIT
//		send_bit_0();
//		delay(WAITING_TIME);

		//MAC_TO
		send_bit_0();
    1e4e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e52:	67 e2       	ldi	r22, 0x27	; 39
    1e54:	71 e0       	ldi	r23, 0x01	; 1
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1e5e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e62:	67 e2       	ldi	r22, 0x27	; 39
    1e64:	71 e0       	ldi	r23, 0x01	; 1
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1e6e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e72:	67 e2       	ldi	r22, 0x27	; 39
    1e74:	71 e0       	ldi	r23, 0x01	; 1
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1e7e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e82:	67 e2       	ldi	r22, 0x27	; 39
    1e84:	71 e0       	ldi	r23, 0x01	; 1
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1e8e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1e92:	67 e2       	ldi	r22, 0x27	; 39
    1e94:	71 e0       	ldi	r23, 0x01	; 1
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1e9e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1ea2:	67 e2       	ldi	r22, 0x27	; 39
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1eae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1eb2:	67 e2       	ldi	r22, 0x27	; 39
    1eb4:	71 e0       	ldi	r23, 0x01	; 1
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1ebe:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1ec2:	67 e2       	ldi	r22, 0x27	; 39
    1ec4:	71 e0       	ldi	r23, 0x01	; 1
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//		delay(WAITING_TIME);


		//DATA_SIZE 3 bytes

		send_bit_0();
    1ece:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1ed2:	67 e2       	ldi	r22, 0x27	; 39
    1ed4:	71 e0       	ldi	r23, 0x01	; 1
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1ede:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1ee2:	67 e2       	ldi	r22, 0x27	; 39
    1ee4:	71 e0       	ldi	r23, 0x01	; 1
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1eee:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1ef2:	67 e2       	ldi	r22, 0x27	; 39
    1ef4:	71 e0       	ldi	r23, 0x01	; 1
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1efe:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1f02:	67 e2       	ldi	r22, 0x27	; 39
    1f04:	71 e0       	ldi	r23, 0x01	; 1
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1f0e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1f12:	67 e2       	ldi	r22, 0x27	; 39
    1f14:	71 e0       	ldi	r23, 0x01	; 1
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1f1e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1f22:	67 e2       	ldi	r22, 0x27	; 39
    1f24:	71 e0       	ldi	r23, 0x01	; 1
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1f2e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1f32:	67 e2       	ldi	r22, 0x27	; 39
    1f34:	71 e0       	ldi	r23, 0x01	; 1
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1f3e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1f42:	67 e2       	ldi	r22, 0x27	; 39
    1f44:	71 e0       	ldi	r23, 0x01	; 1
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//		//Parity_BIT
//		send_bit_1();
//		delay(WAITING_TIME);

		//DATA 1st byte
		send_bit_0();
    1f4e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1f52:	67 e2       	ldi	r22, 0x27	; 39
    1f54:	71 e0       	ldi	r23, 0x01	; 1
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1f5e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1f62:	67 e2       	ldi	r22, 0x27	; 39
    1f64:	71 e0       	ldi	r23, 0x01	; 1
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1f6e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1f72:	67 e2       	ldi	r22, 0x27	; 39
    1f74:	71 e0       	ldi	r23, 0x01	; 1
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1f7e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1f82:	67 e2       	ldi	r22, 0x27	; 39
    1f84:	71 e0       	ldi	r23, 0x01	; 1
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1f8e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1f92:	67 e2       	ldi	r22, 0x27	; 39
    1f94:	71 e0       	ldi	r23, 0x01	; 1
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    1f9e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    1fa2:	67 e2       	ldi	r22, 0x27	; 39
    1fa4:	71 e0       	ldi	r23, 0x01	; 1
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1fae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1fb2:	67 e2       	ldi	r22, 0x27	; 39
    1fb4:	71 e0       	ldi	r23, 0x01	; 1
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1fbe:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1fc2:	67 e2       	ldi	r22, 0x27	; 39
    1fc4:	71 e0       	ldi	r23, 0x01	; 1
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//		send_bit_1();
//		delay(WAITING_TIME);


		//DATA 2nd byte
		send_bit_1();
    1fce:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1fd2:	67 e2       	ldi	r22, 0x27	; 39
    1fd4:	71 e0       	ldi	r23, 0x01	; 1
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1fde:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1fe2:	67 e2       	ldi	r22, 0x27	; 39
    1fe4:	71 e0       	ldi	r23, 0x01	; 1
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1fee:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    1ff2:	67 e2       	ldi	r22, 0x27	; 39
    1ff4:	71 e0       	ldi	r23, 0x01	; 1
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    1ffe:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    2002:	67 e2       	ldi	r22, 0x27	; 39
    2004:	71 e0       	ldi	r23, 0x01	; 1
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    200e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    2012:	67 e2       	ldi	r22, 0x27	; 39
    2014:	71 e0       	ldi	r23, 0x01	; 1
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    201e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    2022:	67 e2       	ldi	r22, 0x27	; 39
    2024:	71 e0       	ldi	r23, 0x01	; 1
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    202e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    2032:	67 e2       	ldi	r22, 0x27	; 39
    2034:	71 e0       	ldi	r23, 0x01	; 1
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    203e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    2042:	67 e2       	ldi	r22, 0x27	; 39
    2044:	71 e0       	ldi	r23, 0x01	; 1
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//		//Parity_BIT
//		send_bit_0();
//		delay(WAITING_TIME);

		//DATA 3rd byte
		send_bit_0();
    204e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    2052:	67 e2       	ldi	r22, 0x27	; 39
    2054:	71 e0       	ldi	r23, 0x01	; 1
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    205e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    2062:	67 e2       	ldi	r22, 0x27	; 39
    2064:	71 e0       	ldi	r23, 0x01	; 1
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    206e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    2072:	67 e2       	ldi	r22, 0x27	; 39
    2074:	71 e0       	ldi	r23, 0x01	; 1
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    207e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    2082:	67 e2       	ldi	r22, 0x27	; 39
    2084:	71 e0       	ldi	r23, 0x01	; 1
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_0();
    208e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_Z10send_bit_0v>
		delay(WAITING_TIME);
    2092:	67 e2       	ldi	r22, 0x27	; 39
    2094:	71 e0       	ldi	r23, 0x01	; 1
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    209e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    20a2:	67 e2       	ldi	r22, 0x27	; 39
    20a4:	71 e0       	ldi	r23, 0x01	; 1
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    20ae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    20b2:	67 e2       	ldi	r22, 0x27	; 39
    20b4:	71 e0       	ldi	r23, 0x01	; 1
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 94 03 	call	0x728	; 0x728 <delay>
		send_bit_1();
    20be:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_Z10send_bit_1v>
		delay(WAITING_TIME);
    20c2:	67 e2       	ldi	r22, 0x27	; 39
    20c4:	71 e0       	ldi	r23, 0x01	; 1
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 94 03 	call	0x728	; 0x728 <delay>
//		//Parity_BIT
//		send_bit_0();
//		delay(WAITING_TIME);
		delay(10000);
    20ce:	60 e1       	ldi	r22, 0x10	; 16
    20d0:	77 e2       	ldi	r23, 0x27	; 39
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 94 03 	call	0x728	; 0x728 <delay>





}
    20da:	08 95       	ret

000020dc <_Z17send_bit_sequencePi>:
const int WAITING_TIME=295.26; //65 //995




Message send_bit_sequence(int bits_to_send[]){
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	8c 01       	movw	r16, r24
	Message msg(bits_to_send);
    20e2:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN7MessageC1EPi>
	return msg;


}
    20e6:	c8 01       	movw	r24, r16
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret

000020ee <setup>:





void setup() {
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	62 97       	sbiw	r28, 0x12	; 18
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
	//Timer1.initialize(30000);
	//Timer1.attachInterrupt(send_bit);
  (*msg)= send_bit_sequence(msg1_bits);
    2106:	00 91 72 02 	lds	r16, 0x0272
    210a:	10 91 73 02 	lds	r17, 0x0273
    210e:	ce 01       	movw	r24, r28
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	65 e0       	ldi	r22, 0x05	; 5
    2114:	71 e0       	ldi	r23, 0x01	; 1
    2116:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_Z17send_bit_sequencePi>
 */

#ifndef MESSAGE_H_
#define MESSAGE_H_

class Message {
    211a:	d8 01       	movw	r26, r16
    211c:	12 96       	adiw	r26, 0x02	; 2
    211e:	fe 01       	movw	r30, r28
    2120:	33 96       	adiw	r30, 0x03	; 3
    2122:	8c e0       	ldi	r24, 0x0C	; 12
    2124:	01 90       	ld	r0, Z+
    2126:	0d 92       	st	X+, r0
    2128:	81 50       	subi	r24, 0x01	; 1
    212a:	e1 f7       	brne	.-8      	; 0x2124 <setup+0x36>
    212c:	8f 85       	ldd	r24, Y+15	; 0x0f
    212e:	98 89       	ldd	r25, Y+16	; 0x10
    2130:	f8 01       	movw	r30, r16
    2132:	97 87       	std	Z+15, r25	; 0x0f
    2134:	86 87       	std	Z+14, r24	; 0x0e
    2136:	89 89       	ldd	r24, Y+17	; 0x11
    2138:	9a 89       	ldd	r25, Y+18	; 0x12
    213a:	91 8b       	std	Z+17, r25	; 0x11
    213c:	80 8b       	std	Z+16, r24	; 0x10
    213e:	ce 01       	movw	r24, r28
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN7MessageD1Ev>
  Wire.begin();
    2146:	8a eb       	ldi	r24, 0xBA	; 186
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN7TwoWire5beginEv>
  Serial.begin(19200);
    214e:	83 e4       	ldi	r24, 0x43	; 67
    2150:	92 e0       	ldi	r25, 0x02	; 2
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	5b e4       	ldi	r21, 0x4B	; 75
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN14HardwareSerial5beginEm>
//  Serial.print((*msg).get_bitvalues()[3]);
//  Serial.print((*msg).get_bitvalues()[4]);
//  Serial.println((*msg).get_bitvalues()[5]);


}
    215e:	62 96       	adiw	r28, 0x12	; 18
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	80 93 b9 02 	sts	0x02B9, r24
  // set address of targeted slave
  txAddress = address;
    217a:	60 93 96 02 	sts	0x0296, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    217e:	10 92 b7 02 	sts	0x02B7, r1
  txBufferLength = 0;
    2182:	10 92 b8 02 	sts	0x02B8, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    2186:	08 95       	ret

00002188 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    2188:	20 91 95 02 	lds	r18, 0x0295
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	80 91 94 02 	lds	r24, 0x0294
    2192:	28 1b       	sub	r18, r24
    2194:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    2196:	c9 01       	movw	r24, r18
    2198:	08 95       	ret

0000219a <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    219a:	40 91 94 02 	lds	r20, 0x0294
    219e:	80 91 95 02 	lds	r24, 0x0295
    21a2:	48 17       	cp	r20, r24
    21a4:	18 f0       	brcs	.+6      	; 0x21ac <_ZN7TwoWire4readEv+0x12>
    21a6:	2f ef       	ldi	r18, 0xFF	; 255
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	0a c0       	rjmp	.+20     	; 0x21c0 <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
    21ac:	e4 2f       	mov	r30, r20
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	ec 58       	subi	r30, 0x8C	; 140
    21b2:	fd 4f       	sbci	r31, 0xFD	; 253
    21b4:	80 81       	ld	r24, Z
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    21ba:	4f 5f       	subi	r20, 0xFF	; 255
    21bc:	40 93 94 02 	sts	0x0294, r20
  }

  return value;
}
    21c0:	c9 01       	movw	r24, r18
    21c2:	08 95       	ret

000021c4 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    21c4:	e0 91 94 02 	lds	r30, 0x0294
    21c8:	80 91 95 02 	lds	r24, 0x0295
    21cc:	e8 17       	cp	r30, r24
    21ce:	18 f0       	brcs	.+6      	; 0x21d6 <_ZN7TwoWire4peekEv+0x12>
    21d0:	ef ef       	ldi	r30, 0xFF	; 255
    21d2:	ff ef       	ldi	r31, 0xFF	; 255
    21d4:	06 c0       	rjmp	.+12     	; 0x21e2 <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	ec 58       	subi	r30, 0x8C	; 140
    21da:	fd 4f       	sbci	r31, 0xFD	; 253
    21dc:	80 81       	ld	r24, Z
    21de:	e8 2f       	mov	r30, r24
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    21e2:	cf 01       	movw	r24, r30
    21e4:	08 95       	ret

000021e6 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    21e6:	08 95       	ret

000021e8 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    21e8:	10 92 bd 02 	sts	0x02BD, r1
    21ec:	10 92 bc 02 	sts	0x02BC, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    21f0:	88 ee       	ldi	r24, 0xE8	; 232
    21f2:	93 e0       	ldi	r25, 0x03	; 3
    21f4:	a0 e0       	ldi	r26, 0x00	; 0
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	80 93 be 02 	sts	0x02BE, r24
    21fc:	90 93 bf 02 	sts	0x02BF, r25
    2200:	a0 93 c0 02 	sts	0x02C0, r26
    2204:	b0 93 c1 02 	sts	0x02C1, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2208:	83 e3       	ldi	r24, 0x33	; 51
    220a:	91 e0       	ldi	r25, 0x01	; 1
    220c:	90 93 bb 02 	sts	0x02BB, r25
    2210:	80 93 ba 02 	sts	0x02BA, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2214:	08 95       	ret

00002216 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    2216:	cf 92       	push	r12
    2218:	df 92       	push	r13
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	7c 01       	movw	r14, r24
    2228:	6b 01       	movw	r12, r22
    222a:	8a 01       	movw	r16, r20
{
  if(transmitting){
    222c:	80 91 b9 02 	lds	r24, 0x02B9
    2230:	88 23       	and	r24, r24
    2232:	a1 f0       	breq	.+40     	; 0x225c <_ZN7TwoWire5writeEPKhj+0x46>
    2234:	c0 e0       	ldi	r28, 0x00	; 0
    2236:	d0 e0       	ldi	r29, 0x00	; 0
    2238:	0d c0       	rjmp	.+26     	; 0x2254 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    223a:	d7 01       	movw	r26, r14
    223c:	ed 91       	ld	r30, X+
    223e:	fc 91       	ld	r31, X
    2240:	d6 01       	movw	r26, r12
    2242:	ac 0f       	add	r26, r28
    2244:	bd 1f       	adc	r27, r29
    2246:	01 90       	ld	r0, Z+
    2248:	f0 81       	ld	r31, Z
    224a:	e0 2d       	mov	r30, r0
    224c:	c7 01       	movw	r24, r14
    224e:	6c 91       	ld	r22, X
    2250:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2252:	21 96       	adiw	r28, 0x01	; 1
    2254:	c0 17       	cp	r28, r16
    2256:	d1 07       	cpc	r29, r17
    2258:	80 f3       	brcs	.-32     	; 0x223a <_ZN7TwoWire5writeEPKhj+0x24>
    225a:	04 c0       	rjmp	.+8      	; 0x2264 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    225c:	cb 01       	movw	r24, r22
    225e:	64 2f       	mov	r22, r20
    2260:	0e 94 ba 05 	call	0xb74	; 0xb74 <twi_transmit>
  }
  return quantity;
}
    2264:	c8 01       	movw	r24, r16
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	08 95       	ret

00002278 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	fc 01       	movw	r30, r24
    2284:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    2286:	80 91 b9 02 	lds	r24, 0x02B9
    228a:	88 23       	and	r24, r24
    228c:	c9 f0       	breq	.+50     	; 0x22c0 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    228e:	80 91 b8 02 	lds	r24, 0x02B8
    2292:	80 32       	cpi	r24, 0x20	; 32
    2294:	38 f0       	brcs	.+14     	; 0x22a4 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	93 83       	std	Z+3, r25	; 0x03
    229c:	82 83       	std	Z+2, r24	; 0x02
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	15 c0       	rjmp	.+42     	; 0x22ce <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    22a4:	80 91 b7 02 	lds	r24, 0x02B7
    22a8:	e8 2f       	mov	r30, r24
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	e9 56       	subi	r30, 0x69	; 105
    22ae:	fd 4f       	sbci	r31, 0xFD	; 253
    22b0:	99 81       	ldd	r25, Y+1	; 0x01
    22b2:	90 83       	st	Z, r25
    ++txBufferIndex;
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	80 93 b7 02 	sts	0x02B7, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    22ba:	80 93 b8 02 	sts	0x02B8, r24
    22be:	05 c0       	rjmp	.+10     	; 0x22ca <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	61 e0       	ldi	r22, 0x01	; 1
    22c6:	0e 94 ba 05 	call	0xb74	; 0xb74 <twi_transmit>
    22ca:	21 e0       	ldi	r18, 0x01	; 1
    22cc:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    22ce:	c9 01       	movw	r24, r18
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    22d8:	0f 93       	push	r16
    22da:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    22dc:	80 91 96 02 	lds	r24, 0x0296
    22e0:	67 e9       	ldi	r22, 0x97	; 151
    22e2:	72 e0       	ldi	r23, 0x02	; 2
    22e4:	40 91 b8 02 	lds	r20, 0x02B8
    22e8:	21 e0       	ldi	r18, 0x01	; 1
    22ea:	0e 94 65 05 	call	0xaca	; 0xaca <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    22ee:	10 92 b7 02 	sts	0x02B7, r1
  txBufferLength = 0;
    22f2:	10 92 b8 02 	sts	0x02B8, r1
  // indicate that we are done transmitting
  transmitting = 0;
    22f6:	10 92 b9 02 	sts	0x02B9, r1
  return ret;
}
    22fa:	0f 91       	pop	r16
    22fc:	08 95       	ret

000022fe <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <_ZN7TwoWire15endTransmissionEh>
}
    2304:	08 95       	ret

00002306 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2306:	10 92 94 02 	sts	0x0294, r1
  rxBufferLength = 0;
    230a:	10 92 95 02 	sts	0x0295, r1

  txBufferIndex = 0;
    230e:	10 92 b7 02 	sts	0x02B7, r1
  txBufferLength = 0;
    2312:	10 92 b8 02 	sts	0x02B8, r1

  twi_init();
    2316:	0e 94 88 07 	call	0xf10	; 0xf10 <twi_init>
}
    231a:	08 95       	ret

0000231c <__mulsi3>:
    231c:	62 9f       	mul	r22, r18
    231e:	d0 01       	movw	r26, r0
    2320:	73 9f       	mul	r23, r19
    2322:	f0 01       	movw	r30, r0
    2324:	82 9f       	mul	r24, r18
    2326:	e0 0d       	add	r30, r0
    2328:	f1 1d       	adc	r31, r1
    232a:	64 9f       	mul	r22, r20
    232c:	e0 0d       	add	r30, r0
    232e:	f1 1d       	adc	r31, r1
    2330:	92 9f       	mul	r25, r18
    2332:	f0 0d       	add	r31, r0
    2334:	83 9f       	mul	r24, r19
    2336:	f0 0d       	add	r31, r0
    2338:	74 9f       	mul	r23, r20
    233a:	f0 0d       	add	r31, r0
    233c:	65 9f       	mul	r22, r21
    233e:	f0 0d       	add	r31, r0
    2340:	99 27       	eor	r25, r25
    2342:	72 9f       	mul	r23, r18
    2344:	b0 0d       	add	r27, r0
    2346:	e1 1d       	adc	r30, r1
    2348:	f9 1f       	adc	r31, r25
    234a:	63 9f       	mul	r22, r19
    234c:	b0 0d       	add	r27, r0
    234e:	e1 1d       	adc	r30, r1
    2350:	f9 1f       	adc	r31, r25
    2352:	bd 01       	movw	r22, r26
    2354:	cf 01       	movw	r24, r30
    2356:	11 24       	eor	r1, r1
    2358:	08 95       	ret

0000235a <__udivmodsi4>:
    235a:	a1 e2       	ldi	r26, 0x21	; 33
    235c:	1a 2e       	mov	r1, r26
    235e:	aa 1b       	sub	r26, r26
    2360:	bb 1b       	sub	r27, r27
    2362:	fd 01       	movw	r30, r26
    2364:	0d c0       	rjmp	.+26     	; 0x2380 <__udivmodsi4_ep>

00002366 <__udivmodsi4_loop>:
    2366:	aa 1f       	adc	r26, r26
    2368:	bb 1f       	adc	r27, r27
    236a:	ee 1f       	adc	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	a2 17       	cp	r26, r18
    2370:	b3 07       	cpc	r27, r19
    2372:	e4 07       	cpc	r30, r20
    2374:	f5 07       	cpc	r31, r21
    2376:	20 f0       	brcs	.+8      	; 0x2380 <__udivmodsi4_ep>
    2378:	a2 1b       	sub	r26, r18
    237a:	b3 0b       	sbc	r27, r19
    237c:	e4 0b       	sbc	r30, r20
    237e:	f5 0b       	sbc	r31, r21

00002380 <__udivmodsi4_ep>:
    2380:	66 1f       	adc	r22, r22
    2382:	77 1f       	adc	r23, r23
    2384:	88 1f       	adc	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	1a 94       	dec	r1
    238a:	69 f7       	brne	.-38     	; 0x2366 <__udivmodsi4_loop>
    238c:	60 95       	com	r22
    238e:	70 95       	com	r23
    2390:	80 95       	com	r24
    2392:	90 95       	com	r25
    2394:	9b 01       	movw	r18, r22
    2396:	ac 01       	movw	r20, r24
    2398:	bd 01       	movw	r22, r26
    239a:	cf 01       	movw	r24, r30
    239c:	08 95       	ret

0000239e <__tablejump2__>:
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31

000023a2 <__tablejump__>:
    23a2:	05 90       	lpm	r0, Z+
    23a4:	f4 91       	lpm	r31, Z+
    23a6:	e0 2d       	mov	r30, r0
    23a8:	09 94       	ijmp

000023aa <_exit>:
    23aa:	f8 94       	cli

000023ac <__stop_program>:
    23ac:	ff cf       	rjmp	.-2      	; 0x23ac <__stop_program>
