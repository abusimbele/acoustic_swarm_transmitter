
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00001f92  00002026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c9  008001b2  008001b2  000020d8  2**0
                  ALLOC
  3 .debug_aranges 00000978  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001a2e  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d4e3  00000000  00000000  0000447e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002a15  00000000  00000000  00011961  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000638d  00000000  00000000  00014376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000011e0  00000000  00000000  0001a704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002dfe  00000000  00000000  0001b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005fbc  00000000  00000000  0001e6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000828  00000000  00000000  0002469e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
{
    _address[0] = first_octet;
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}
       4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_1>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_2>



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
       c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
}

void operator delete[](void * ptr)
{
  free(ptr);
}
      10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  switch(command) {
  case SYSTEM_RESET: currentSystemResetCallback = NULL; break;
  case STRING_DATA: currentStringCallback = NULL; break;
  case START_SYSEX: currentSysexCallback = NULL; break;
  default:
    attach(command, (callbackFunction)NULL);
      14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
}


void send_bit_0(){
	//do nothing
}
      18:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>


	this->pointer_message_read=0;
	MSG_LENGTH=6;

}
      1c:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_7>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      20:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      24:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      30:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      38:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      3c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      40:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_16>
      44:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      48:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__vector_18>
      4c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_19>
      50:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      58:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      5c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      60:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_24>
      64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>

00000068 <_ZL21tone_pin_to_timer_PGM>:
      68:	02                                                  .

00000069 <port_to_mode_PGM>:
      69:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000073 <port_to_output_PGM>:
      73:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007d <port_to_input_PGM>:
      7d:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000087 <digital_pin_to_port_PGM>:
      87:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      97:	03 03 03 03                                         ....

0000009b <digital_pin_to_bit_mask_PGM>:
      9b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ab:	04 08 10 20                                         ... 

000000af <digital_pin_to_timer_PGM>:
      af:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      bf:	00 00 00 00 00                                      .....

000000c4 <__ctors_start>:
      c4:	6b 09       	sbc	r22, r11
      c6:	c1 09       	sbc	r28, r1
      c8:	51 0c       	add	r5, r1
      ca:	d5 0e       	add	r13, r21

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d8 e0       	ldi	r29, 0x08	; 8
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e2 e9       	ldi	r30, 0x92	; 146
      e0:	ff e1       	ldi	r31, 0x1F	; 31
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <.do_copy_data_start>

000000e4 <.do_copy_data_loop>:
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0

000000e8 <.do_copy_data_start>:
      e8:	a2 3b       	cpi	r26, 0xB2	; 178
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <.do_copy_data_loop>

000000ee <__do_clear_bss>:
      ee:	13 e0       	ldi	r17, 0x03	; 3
      f0:	a2 eb       	ldi	r26, 0xB2	; 178
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	ab 37       	cpi	r26, 0x7B	; 123
      fa:	b1 07       	cpc	r27, r17
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>

000000fe <__do_global_ctors>:
      fe:	10 e0       	ldi	r17, 0x00	; 0
     100:	cc ec       	ldi	r28, 0xCC	; 204
     102:	d0 e0       	ldi	r29, 0x00	; 0
     104:	04 c0       	rjmp	.+8      	; 0x10e <.do_global_ctors_start>

00000106 <.do_global_ctors_loop>:
     106:	22 97       	sbiw	r28, 0x02	; 2
     108:	fe 01       	movw	r30, r28
     10a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__tablejump__>

0000010e <.do_global_ctors_start>:
     10e:	c4 3c       	cpi	r28, 0xC4	; 196
     110:	d1 07       	cpc	r29, r17
     112:	c9 f7       	brne	.-14     	; 0x106 <.do_global_ctors_loop>
     114:	0e 94 21 0c 	call	0x1842	; 0x1842 <main>
     118:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <_exit>

0000011c <__bad_interrupt>:
     11c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000120 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     120:	82 30       	cpi	r24, 0x02	; 2
     122:	00 f5       	brcc	.+64     	; 0x164 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
     124:	e8 2f       	mov	r30, r24
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	ee 0f       	add	r30, r30
     12a:	ff 1f       	adc	r31, r31
     12c:	ee 54       	subi	r30, 0x4E	; 78
     12e:	fe 4f       	sbci	r31, 0xFE	; 254
     130:	71 83       	std	Z+1, r23	; 0x01
     132:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     134:	88 23       	and	r24, r24
     136:	19 f0       	breq	.+6      	; 0x13e <attachInterrupt+0x1e>
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	a1 f4       	brne	.+40     	; 0x164 <attachInterrupt+0x44>
     13c:	08 c0       	rjmp	.+16     	; 0x14e <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     13e:	80 91 69 00 	lds	r24, 0x0069
     142:	8c 7f       	andi	r24, 0xFC	; 252
     144:	84 2b       	or	r24, r20
     146:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
     14a:	e8 9a       	sbi	0x1d, 0	; 29
     14c:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     14e:	80 91 69 00 	lds	r24, 0x0069
     152:	44 0f       	add	r20, r20
     154:	55 1f       	adc	r21, r21
     156:	44 0f       	add	r20, r20
     158:	55 1f       	adc	r21, r21
     15a:	83 7f       	andi	r24, 0xF3	; 243
     15c:	84 2b       	or	r24, r20
     15e:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
     162:	e9 9a       	sbi	0x1d, 1	; 29
     164:	08 95       	ret

00000166 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	80 f4       	brcc	.+32     	; 0x18a <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
     16a:	88 23       	and	r24, r24
     16c:	19 f0       	breq	.+6      	; 0x174 <detachInterrupt+0xe>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	21 f4       	brne	.+8      	; 0x17a <detachInterrupt+0x14>
     172:	02 c0       	rjmp	.+4      	; 0x178 <detachInterrupt+0x12>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
     174:	e8 98       	cbi	0x1d, 0	; 29
     176:	01 c0       	rjmp	.+2      	; 0x17a <detachInterrupt+0x14>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
     178:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
     17a:	e8 2f       	mov	r30, r24
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	ee 54       	subi	r30, 0x4E	; 78
     184:	fe 4f       	sbci	r31, 0xFE	; 254
     186:	11 82       	std	Z+1, r1	; 0x01
     188:	10 82       	st	Z, r1
     18a:	08 95       	ret

0000018c <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	11 24       	eor	r1, r1
     196:	2f 93       	push	r18
     198:	3f 93       	push	r19
     19a:	4f 93       	push	r20
     19c:	5f 93       	push	r21
     19e:	6f 93       	push	r22
     1a0:	7f 93       	push	r23
     1a2:	8f 93       	push	r24
     1a4:	9f 93       	push	r25
     1a6:	af 93       	push	r26
     1a8:	bf 93       	push	r27
     1aa:	ef 93       	push	r30
     1ac:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     1ae:	80 91 b2 01 	lds	r24, 0x01B2
     1b2:	90 91 b3 01 	lds	r25, 0x01B3
     1b6:	89 2b       	or	r24, r25
     1b8:	29 f0       	breq	.+10     	; 0x1c4 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     1ba:	e0 91 b2 01 	lds	r30, 0x01B2
     1be:	f0 91 b3 01 	lds	r31, 0x01B3
     1c2:	09 95       	icall
}
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	bf 91       	pop	r27
     1ca:	af 91       	pop	r26
     1cc:	9f 91       	pop	r25
     1ce:	8f 91       	pop	r24
     1d0:	7f 91       	pop	r23
     1d2:	6f 91       	pop	r22
     1d4:	5f 91       	pop	r21
     1d6:	4f 91       	pop	r20
     1d8:	3f 91       	pop	r19
     1da:	2f 91       	pop	r18
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <__vector_2>:

SIGNAL(INT1_vect) {
     1e6:	1f 92       	push	r1
     1e8:	0f 92       	push	r0
     1ea:	0f b6       	in	r0, 0x3f	; 63
     1ec:	0f 92       	push	r0
     1ee:	11 24       	eor	r1, r1
     1f0:	2f 93       	push	r18
     1f2:	3f 93       	push	r19
     1f4:	4f 93       	push	r20
     1f6:	5f 93       	push	r21
     1f8:	6f 93       	push	r22
     1fa:	7f 93       	push	r23
     1fc:	8f 93       	push	r24
     1fe:	9f 93       	push	r25
     200:	af 93       	push	r26
     202:	bf 93       	push	r27
     204:	ef 93       	push	r30
     206:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     208:	80 91 b4 01 	lds	r24, 0x01B4
     20c:	90 91 b5 01 	lds	r25, 0x01B5
     210:	89 2b       	or	r24, r25
     212:	29 f0       	breq	.+10     	; 0x21e <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     214:	e0 91 b4 01 	lds	r30, 0x01B4
     218:	f0 91 b5 01 	lds	r31, 0x01B5
     21c:	09 95       	icall
}
     21e:	ff 91       	pop	r31
     220:	ef 91       	pop	r30
     222:	bf 91       	pop	r27
     224:	af 91       	pop	r26
     226:	9f 91       	pop	r25
     228:	8f 91       	pop	r24
     22a:	7f 91       	pop	r23
     22c:	6f 91       	pop	r22
     22e:	5f 91       	pop	r21
     230:	4f 91       	pop	r20
     232:	3f 91       	pop	r19
     234:	2f 91       	pop	r18
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	bc 01       	movw	r22, r24
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	91 05       	cpc	r25, r1
     24e:	10 f4       	brcc	.+4      	; 0x254 <malloc+0x14>
     250:	62 e0       	ldi	r22, 0x02	; 2
     252:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     254:	e0 91 79 03 	lds	r30, 0x0379
     258:	f0 91 7a 03 	lds	r31, 0x037A
     25c:	a0 e0       	ldi	r26, 0x00	; 0
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	24 c0       	rjmp	.+72     	; 0x2ae <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
     266:	80 81       	ld	r24, Z
     268:	91 81       	ldd	r25, Z+1	; 0x01
     26a:	86 17       	cp	r24, r22
     26c:	97 07       	cpc	r25, r23
     26e:	d0 f0       	brcs	.+52     	; 0x2a4 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
     270:	86 17       	cp	r24, r22
     272:	97 07       	cpc	r25, r23
     274:	71 f4       	brne	.+28     	; 0x292 <malloc+0x52>
     276:	82 81       	ldd	r24, Z+2	; 0x02
     278:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     27a:	10 97       	sbiw	r26, 0x00	; 0
     27c:	29 f0       	breq	.+10     	; 0x288 <malloc+0x48>
				fp2->nx = fp1->nx;
     27e:	13 96       	adiw	r26, 0x03	; 3
     280:	9c 93       	st	X, r25
     282:	8e 93       	st	-X, r24
     284:	12 97       	sbiw	r26, 0x02	; 2
     286:	2c c0       	rjmp	.+88     	; 0x2e0 <malloc+0xa0>
			else
				__flp = fp1->nx;
     288:	90 93 7a 03 	sts	0x037A, r25
     28c:	80 93 79 03 	sts	0x0379, r24
     290:	27 c0       	rjmp	.+78     	; 0x2e0 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
     292:	41 15       	cp	r20, r1
     294:	51 05       	cpc	r21, r1
     296:	19 f0       	breq	.+6      	; 0x29e <malloc+0x5e>
     298:	84 17       	cp	r24, r20
     29a:	95 07       	cpc	r25, r21
     29c:	18 f4       	brcc	.+6      	; 0x2a4 <malloc+0x64>
     29e:	ef 01       	movw	r28, r30
     2a0:	8d 01       	movw	r16, r26
     2a2:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     2a4:	df 01       	movw	r26, r30
     2a6:	82 81       	ldd	r24, Z+2	; 0x02
     2a8:	93 81       	ldd	r25, Z+3	; 0x03
     2aa:	9c 01       	movw	r18, r24
     2ac:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
     2ae:	30 97       	sbiw	r30, 0x00	; 0
     2b0:	d1 f6       	brne	.-76     	; 0x266 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     2b2:	41 15       	cp	r20, r1
     2b4:	51 05       	cpc	r21, r1
     2b6:	f9 f0       	breq	.+62     	; 0x2f6 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
     2b8:	ca 01       	movw	r24, r20
     2ba:	86 1b       	sub	r24, r22
     2bc:	97 0b       	sbc	r25, r23
     2be:	84 30       	cpi	r24, 0x04	; 4
     2c0:	91 05       	cpc	r25, r1
     2c2:	80 f4       	brcc	.+32     	; 0x2e4 <malloc+0xa4>
     2c4:	8a 81       	ldd	r24, Y+2	; 0x02
     2c6:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
     2c8:	01 15       	cp	r16, r1
     2ca:	11 05       	cpc	r17, r1
     2cc:	21 f0       	breq	.+8      	; 0x2d6 <malloc+0x96>
				sfp2->nx = sfp1->nx;
     2ce:	f8 01       	movw	r30, r16
     2d0:	93 83       	std	Z+3, r25	; 0x03
     2d2:	82 83       	std	Z+2, r24	; 0x02
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <malloc+0x9e>
			else
				__flp = sfp1->nx;
     2d6:	90 93 7a 03 	sts	0x037A, r25
     2da:	80 93 79 03 	sts	0x0379, r24
			return &(sfp1->nx);
     2de:	fe 01       	movw	r30, r28
     2e0:	32 96       	adiw	r30, 0x02	; 2
     2e2:	2f c0       	rjmp	.+94     	; 0x342 <malloc+0x102>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
     2e4:	fe 01       	movw	r30, r28
     2e6:	e8 0f       	add	r30, r24
     2e8:	f9 1f       	adc	r31, r25
     2ea:	61 93       	st	Z+, r22
     2ec:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
     2ee:	02 97       	sbiw	r24, 0x02	; 2
     2f0:	99 83       	std	Y+1, r25	; 0x01
     2f2:	88 83       	st	Y, r24
     2f4:	26 c0       	rjmp	.+76     	; 0x342 <malloc+0x102>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	cp = STACK_POINTER() - __MALLOC_MARGIN__;
     2f6:	8d b7       	in	r24, 0x3d	; 61
     2f8:	9e b7       	in	r25, 0x3e	; 62
     2fa:	88 57       	subi	r24, 0x78	; 120
     2fc:	90 40       	sbci	r25, 0x00	; 0
	if (cp <= __brkval)
     2fe:	20 91 00 01 	lds	r18, 0x0100
     302:	30 91 01 01 	lds	r19, 0x0101
     306:	28 17       	cp	r18, r24
     308:	39 07       	cpc	r19, r25
     30a:	c8 f4       	brcc	.+50     	; 0x33e <malloc+0xfe>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
     30c:	ac 01       	movw	r20, r24
     30e:	42 1b       	sub	r20, r18
     310:	53 0b       	sbc	r21, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
     312:	46 17       	cp	r20, r22
     314:	57 07       	cpc	r21, r23
     316:	98 f0       	brcs	.+38     	; 0x33e <malloc+0xfe>
     318:	cb 01       	movw	r24, r22
     31a:	02 96       	adiw	r24, 0x02	; 2
     31c:	48 17       	cp	r20, r24
     31e:	59 07       	cpc	r21, r25
     320:	70 f0       	brcs	.+28     	; 0x33e <malloc+0xfe>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	90 93 01 01 	sts	0x0101, r25
     32a:	80 93 00 01 	sts	0x0100, r24
		__brkval_maximum = __brkval;
     32e:	90 93 03 01 	sts	0x0103, r25
     332:	80 93 02 01 	sts	0x0102, r24
		fp1->sz = len;
     336:	f9 01       	movw	r30, r18
     338:	61 93       	st	Z+, r22
     33a:	71 93       	st	Z+, r23
     33c:	02 c0       	rjmp	.+4      	; 0x342 <malloc+0x102>
		return &(fp1->nx);
     33e:	e0 e0       	ldi	r30, 0x00	; 0
     340:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
     342:	cf 01       	movw	r24, r30
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	08 95       	ret

0000034e <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	9c 01       	movw	r18, r24
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	09 f4       	brne	.+2      	; 0x35a <free+0xc>
     358:	8f c0       	rjmp	.+286    	; 0x478 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
     35a:	ec 01       	movw	r28, r24
     35c:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
     35e:	1b 82       	std	Y+3, r1	; 0x03
     360:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
     362:	60 91 79 03 	lds	r22, 0x0379
     366:	70 91 7a 03 	lds	r23, 0x037A
     36a:	61 15       	cp	r22, r1
     36c:	71 05       	cpc	r23, r1
     36e:	81 f4       	brne	.+32     	; 0x390 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
     370:	88 81       	ld	r24, Y
     372:	99 81       	ldd	r25, Y+1	; 0x01
     374:	82 0f       	add	r24, r18
     376:	93 1f       	adc	r25, r19
     378:	20 91 00 01 	lds	r18, 0x0100
     37c:	30 91 01 01 	lds	r19, 0x0101
     380:	28 17       	cp	r18, r24
     382:	39 07       	cpc	r19, r25
     384:	39 f5       	brne	.+78     	; 0x3d4 <free+0x86>
			__brkval = cpnew;
     386:	d0 93 01 01 	sts	0x0101, r29
     38a:	c0 93 00 01 	sts	0x0100, r28
     38e:	74 c0       	rjmp	.+232    	; 0x478 <free+0x12a>
		else
			__flp = fpnew;
     390:	db 01       	movw	r26, r22
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     396:	ac 17       	cp	r26, r28
     398:	bd 07       	cpc	r27, r29
     39a:	08 f1       	brcs	.+66     	; 0x3de <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     39c:	bb 83       	std	Y+3, r27	; 0x03
     39e:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
     3a0:	fe 01       	movw	r30, r28
     3a2:	21 91       	ld	r18, Z+
     3a4:	31 91       	ld	r19, Z+
     3a6:	e2 0f       	add	r30, r18
     3a8:	f3 1f       	adc	r31, r19
     3aa:	ae 17       	cp	r26, r30
     3ac:	bf 07       	cpc	r27, r31
     3ae:	79 f4       	brne	.+30     	; 0x3ce <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
     3b0:	8d 91       	ld	r24, X+
     3b2:	9c 91       	ld	r25, X
     3b4:	11 97       	sbiw	r26, 0x01	; 1
     3b6:	28 0f       	add	r18, r24
     3b8:	39 1f       	adc	r19, r25
     3ba:	2e 5f       	subi	r18, 0xFE	; 254
     3bc:	3f 4f       	sbci	r19, 0xFF	; 255
     3be:	39 83       	std	Y+1, r19	; 0x01
     3c0:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
     3c2:	12 96       	adiw	r26, 0x02	; 2
     3c4:	8d 91       	ld	r24, X+
     3c6:	9c 91       	ld	r25, X
     3c8:	13 97       	sbiw	r26, 0x03	; 3
     3ca:	9b 83       	std	Y+3, r25	; 0x03
     3cc:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
     3ce:	41 15       	cp	r20, r1
     3d0:	51 05       	cpc	r21, r1
     3d2:	71 f4       	brne	.+28     	; 0x3f0 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
     3d4:	d0 93 7a 03 	sts	0x037A, r29
     3d8:	c0 93 79 03 	sts	0x0379, r28
     3dc:	4d c0       	rjmp	.+154    	; 0x478 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     3de:	12 96       	adiw	r26, 0x02	; 2
     3e0:	8d 91       	ld	r24, X+
     3e2:	9c 91       	ld	r25, X
     3e4:	13 97       	sbiw	r26, 0x03	; 3
     3e6:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	11 f0       	breq	.+4      	; 0x3f0 <free+0xa2>
     3ec:	dc 01       	movw	r26, r24
     3ee:	d3 cf       	rjmp	.-90     	; 0x396 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
     3f0:	da 01       	movw	r26, r20
     3f2:	13 96       	adiw	r26, 0x03	; 3
     3f4:	dc 93       	st	X, r29
     3f6:	ce 93       	st	-X, r28
     3f8:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
     3fa:	fa 01       	movw	r30, r20
     3fc:	21 91       	ld	r18, Z+
     3fe:	31 91       	ld	r19, Z+
     400:	e2 0f       	add	r30, r18
     402:	f3 1f       	adc	r31, r19
     404:	ce 17       	cp	r28, r30
     406:	df 07       	cpc	r29, r31
     408:	69 f4       	brne	.+26     	; 0x424 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
     40a:	88 81       	ld	r24, Y
     40c:	99 81       	ldd	r25, Y+1	; 0x01
     40e:	28 0f       	add	r18, r24
     410:	39 1f       	adc	r19, r25
     412:	2e 5f       	subi	r18, 0xFE	; 254
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	fa 01       	movw	r30, r20
     418:	31 83       	std	Z+1, r19	; 0x01
     41a:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	9b 81       	ldd	r25, Y+3	; 0x03
     420:	93 83       	std	Z+3, r25	; 0x03
     422:	82 83       	std	Z+2, r24	; 0x02
     424:	e0 e0       	ldi	r30, 0x00	; 0
     426:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
     428:	db 01       	movw	r26, r22
     42a:	12 96       	adiw	r26, 0x02	; 2
     42c:	8d 91       	ld	r24, X+
     42e:	9c 91       	ld	r25, X
     430:	13 97       	sbiw	r26, 0x03	; 3
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	19 f0       	breq	.+6      	; 0x43c <free+0xee>
     436:	bc 01       	movw	r22, r24
     438:	fd 01       	movw	r30, r26
     43a:	f6 cf       	rjmp	.-20     	; 0x428 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
     43c:	ab 01       	movw	r20, r22
     43e:	4e 5f       	subi	r20, 0xFE	; 254
     440:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
     442:	db 01       	movw	r26, r22
     444:	8d 91       	ld	r24, X+
     446:	9c 91       	ld	r25, X
     448:	84 0f       	add	r24, r20
     44a:	95 1f       	adc	r25, r21
     44c:	20 91 00 01 	lds	r18, 0x0100
     450:	30 91 01 01 	lds	r19, 0x0101
     454:	28 17       	cp	r18, r24
     456:	39 07       	cpc	r19, r25
     458:	79 f4       	brne	.+30     	; 0x478 <free+0x12a>
		if (fp2 == NULL)
     45a:	30 97       	sbiw	r30, 0x00	; 0
     45c:	29 f4       	brne	.+10     	; 0x468 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
     45e:	10 92 7a 03 	sts	0x037A, r1
     462:	10 92 79 03 	sts	0x0379, r1
     466:	02 c0       	rjmp	.+4      	; 0x46c <free+0x11e>
		else
			fp2->nx = NULL;
     468:	13 82       	std	Z+3, r1	; 0x03
     46a:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
     46c:	42 50       	subi	r20, 0x02	; 2
     46e:	50 40       	sbci	r21, 0x00	; 0
     470:	50 93 01 01 	sts	0x0101, r21
     474:	40 93 00 01 	sts	0x0100, r20
	}
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
     47e:	6f 92       	push	r6
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	8c 01       	movw	r16, r24
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	29 f4       	brne	.+10     	; 0x4aa <realloc+0x2c>
		return malloc(len);
     4a0:	cb 01       	movw	r24, r22
     4a2:	0e 94 20 01 	call	0x240	; 0x240 <malloc>
     4a6:	8c 01       	movw	r16, r24
     4a8:	b4 c0       	rjmp	.+360    	; 0x612 <realloc+0x194>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
     4aa:	8e ef       	ldi	r24, 0xFE	; 254
     4ac:	e8 2e       	mov	r14, r24
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	f8 2e       	mov	r15, r24
     4b2:	e0 0e       	add	r14, r16
     4b4:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
     4b6:	58 01       	movw	r10, r16
     4b8:	a6 0e       	add	r10, r22
     4ba:	b7 1e       	adc	r11, r23
	if (cp < cp1)
     4bc:	ae 14       	cp	r10, r14
     4be:	bf 04       	cpc	r11, r15
     4c0:	08 f4       	brcc	.+2      	; 0x4c4 <realloc+0x46>
     4c2:	a5 c0       	rjmp	.+330    	; 0x60e <realloc+0x190>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
     4c4:	d7 01       	movw	r26, r14
     4c6:	4d 91       	ld	r20, X+
     4c8:	5c 91       	ld	r21, X
     4ca:	11 97       	sbiw	r26, 0x01	; 1
     4cc:	46 17       	cp	r20, r22
     4ce:	57 07       	cpc	r21, r23
     4d0:	b8 f0       	brcs	.+46     	; 0x500 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
     4d2:	45 30       	cpi	r20, 0x05	; 5
     4d4:	51 05       	cpc	r21, r1
     4d6:	08 f4       	brcc	.+2      	; 0x4da <realloc+0x5c>
     4d8:	9c c0       	rjmp	.+312    	; 0x612 <realloc+0x194>
     4da:	ca 01       	movw	r24, r20
     4dc:	04 97       	sbiw	r24, 0x04	; 4
     4de:	86 17       	cp	r24, r22
     4e0:	97 07       	cpc	r25, r23
     4e2:	08 f4       	brcc	.+2      	; 0x4e6 <realloc+0x68>
     4e4:	96 c0       	rjmp	.+300    	; 0x612 <realloc+0x194>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
     4e6:	42 50       	subi	r20, 0x02	; 2
     4e8:	50 40       	sbci	r21, 0x00	; 0
     4ea:	46 1b       	sub	r20, r22
     4ec:	57 0b       	sbc	r21, r23
     4ee:	f5 01       	movw	r30, r10
     4f0:	41 93       	st	Z+, r20
     4f2:	51 93       	st	Z+, r21
		fp1->sz = len;
     4f4:	6d 93       	st	X+, r22
     4f6:	7c 93       	st	X, r23
		free(&(fp2->nx));
     4f8:	cf 01       	movw	r24, r30
     4fa:	0e 94 a7 01 	call	0x34e	; 0x34e <free>
     4fe:	89 c0       	rjmp	.+274    	; 0x612 <realloc+0x194>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
     500:	4b 01       	movw	r8, r22
     502:	84 1a       	sub	r8, r20
     504:	95 0a       	sbc	r9, r21
	cp = (char *)ptr + fp1->sz;
     506:	38 01       	movw	r6, r16
     508:	64 0e       	add	r6, r20
     50a:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
     50c:	a0 91 79 03 	lds	r26, 0x0379
     510:	b0 91 7a 03 	lds	r27, 0x037A
     514:	cc 24       	eor	r12, r12
     516:	dd 24       	eor	r13, r13
     518:	e0 e0       	ldi	r30, 0x00	; 0
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	47 c0       	rjmp	.+142    	; 0x5ac <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
     51e:	a6 15       	cp	r26, r6
     520:	b7 05       	cpc	r27, r7
     522:	a9 f5       	brne	.+106    	; 0x58e <realloc+0x110>
     524:	cd 91       	ld	r28, X+
     526:	dc 91       	ld	r29, X
     528:	11 97       	sbiw	r26, 0x01	; 1
     52a:	ce 01       	movw	r24, r28
     52c:	02 96       	adiw	r24, 0x02	; 2
     52e:	88 15       	cp	r24, r8
     530:	99 05       	cpc	r25, r9
     532:	68 f1       	brcs	.+90     	; 0x58e <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
     534:	ce 01       	movw	r24, r28
     536:	88 19       	sub	r24, r8
     538:	99 09       	sbc	r25, r9
     53a:	02 96       	adiw	r24, 0x02	; 2
     53c:	12 96       	adiw	r26, 0x02	; 2
     53e:	2c 91       	ld	r18, X
     540:	12 97       	sbiw	r26, 0x02	; 2
     542:	13 96       	adiw	r26, 0x03	; 3
     544:	3c 91       	ld	r19, X
     546:	05 97       	sbiw	r24, 0x05	; 5
     548:	58 f0       	brcs	.+22     	; 0x560 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
     54a:	f5 01       	movw	r30, r10
				fp2->nx = fp3->nx;
     54c:	22 83       	std	Z+2, r18	; 0x02
     54e:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
     550:	c8 19       	sub	r28, r8
     552:	d9 09       	sbc	r29, r9
     554:	d1 83       	std	Z+1, r29	; 0x01
     556:	c0 83       	st	Z, r28
				fp1->sz = len;
     558:	d7 01       	movw	r26, r14
     55a:	6d 93       	st	X+, r22
     55c:	7c 93       	st	X, r23
     55e:	09 c0       	rjmp	.+18     	; 0x572 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
     560:	4e 5f       	subi	r20, 0xFE	; 254
     562:	5f 4f       	sbci	r21, 0xFF	; 255
     564:	4c 0f       	add	r20, r28
     566:	5d 1f       	adc	r21, r29
     568:	f7 01       	movw	r30, r14
     56a:	51 83       	std	Z+1, r21	; 0x01
     56c:	40 83       	st	Z, r20
				fp2 = fp3->nx;
     56e:	c9 01       	movw	r24, r18
     570:	fc 01       	movw	r30, r24
			}
			if (ofp3)
     572:	c1 14       	cp	r12, r1
     574:	d1 04       	cpc	r13, r1
     576:	31 f0       	breq	.+12     	; 0x584 <realloc+0x106>
				ofp3->nx = fp2;
     578:	d6 01       	movw	r26, r12
     57a:	13 96       	adiw	r26, 0x03	; 3
     57c:	fc 93       	st	X, r31
     57e:	ee 93       	st	-X, r30
     580:	12 97       	sbiw	r26, 0x02	; 2
     582:	47 c0       	rjmp	.+142    	; 0x612 <realloc+0x194>
			else
				__flp = fp2;
     584:	f0 93 7a 03 	sts	0x037A, r31
     588:	e0 93 79 03 	sts	0x0379, r30
     58c:	42 c0       	rjmp	.+132    	; 0x612 <realloc+0x194>
     58e:	8d 91       	ld	r24, X+
     590:	9c 91       	ld	r25, X
     592:	11 97       	sbiw	r26, 0x01	; 1
     594:	e8 17       	cp	r30, r24
     596:	f9 07       	cpc	r31, r25
     598:	08 f4       	brcc	.+2      	; 0x59c <realloc+0x11e>
     59a:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
     59c:	6d 01       	movw	r12, r26
     59e:	12 96       	adiw	r26, 0x02	; 2
     5a0:	8c 91       	ld	r24, X
     5a2:	12 97       	sbiw	r26, 0x02	; 2
     5a4:	13 96       	adiw	r26, 0x03	; 3
     5a6:	9c 91       	ld	r25, X
     5a8:	9c 01       	movw	r18, r24
     5aa:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
     5ac:	10 97       	sbiw	r26, 0x00	; 0
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <realloc+0x134>
     5b0:	b6 cf       	rjmp	.-148    	; 0x51e <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
     5b2:	80 91 00 01 	lds	r24, 0x0100
     5b6:	90 91 01 01 	lds	r25, 0x0101
     5ba:	86 15       	cp	r24, r6
     5bc:	97 05       	cpc	r25, r7
     5be:	b1 f4       	brne	.+44     	; 0x5ec <realloc+0x16e>
     5c0:	e6 17       	cp	r30, r22
     5c2:	f7 07       	cpc	r31, r23
     5c4:	98 f4       	brcc	.+38     	; 0x5ec <realloc+0x16e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __MALLOC_MARGIN__;
     5c6:	8d b7       	in	r24, 0x3d	; 61
     5c8:	9e b7       	in	r25, 0x3e	; 62
		if (cp < cp1) {
     5ca:	88 57       	subi	r24, 0x78	; 120
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	a8 16       	cp	r10, r24
     5d0:	b9 06       	cpc	r11, r25
     5d2:	e8 f4       	brcc	.+58     	; 0x60e <realloc+0x190>
			__brkval = cp;
     5d4:	b0 92 01 01 	sts	0x0101, r11
     5d8:	a0 92 00 01 	sts	0x0100, r10
			__brkval_maximum = cp;
     5dc:	b0 92 03 01 	sts	0x0103, r11
     5e0:	a0 92 02 01 	sts	0x0102, r10
			fp1->sz = len;
     5e4:	f7 01       	movw	r30, r14
     5e6:	71 83       	std	Z+1, r23	; 0x01
     5e8:	60 83       	st	Z, r22
     5ea:	13 c0       	rjmp	.+38     	; 0x612 <realloc+0x194>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
     5ec:	cb 01       	movw	r24, r22
     5ee:	0e 94 20 01 	call	0x240	; 0x240 <malloc>
     5f2:	ec 01       	movw	r28, r24
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	59 f0       	breq	.+22     	; 0x60e <realloc+0x190>
		return 0;
	memcpy(memp, ptr, fp1->sz);
     5f8:	d7 01       	movw	r26, r14
     5fa:	4d 91       	ld	r20, X+
     5fc:	5c 91       	ld	r21, X
     5fe:	b8 01       	movw	r22, r16
     600:	0e 94 a7 07 	call	0xf4e	; 0xf4e <memcpy>
	free(ptr);
     604:	c8 01       	movw	r24, r16
     606:	0e 94 a7 01 	call	0x34e	; 0x34e <free>
     60a:	8e 01       	movw	r16, r28
     60c:	02 c0       	rjmp	.+4      	; 0x612 <realloc+0x194>
	return memp;
     60e:	00 e0       	ldi	r16, 0x00	; 0
     610:	10 e0       	ldi	r17, 0x00	; 0
}
     612:	c8 01       	movw	r24, r16
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	7f 90       	pop	r7
     62e:	6f 90       	pop	r6
     630:	08 95       	ret

00000632 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	2f 93       	push	r18
     63e:	3f 93       	push	r19
     640:	8f 93       	push	r24
     642:	9f 93       	push	r25
     644:	af 93       	push	r26
     646:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     648:	80 91 ba 01 	lds	r24, 0x01BA
     64c:	90 91 bb 01 	lds	r25, 0x01BB
     650:	a0 91 bc 01 	lds	r26, 0x01BC
     654:	b0 91 bd 01 	lds	r27, 0x01BD
	unsigned char f = timer0_fract;
     658:	30 91 be 01 	lds	r19, 0x01BE

	m += MILLIS_INC;
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	a1 1d       	adc	r26, r1
     660:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     662:	23 2f       	mov	r18, r19
     664:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     666:	2d 37       	cpi	r18, 0x7D	; 125
     668:	20 f0       	brcs	.+8      	; 0x672 <__vector_16+0x40>
		f -= FRACT_MAX;
     66a:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	a1 1d       	adc	r26, r1
     670:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     672:	20 93 be 01 	sts	0x01BE, r18
	timer0_millis = m;
     676:	80 93 ba 01 	sts	0x01BA, r24
     67a:	90 93 bb 01 	sts	0x01BB, r25
     67e:	a0 93 bc 01 	sts	0x01BC, r26
     682:	b0 93 bd 01 	sts	0x01BD, r27
	timer0_overflow_count++;
     686:	80 91 b6 01 	lds	r24, 0x01B6
     68a:	90 91 b7 01 	lds	r25, 0x01B7
     68e:	a0 91 b8 01 	lds	r26, 0x01B8
     692:	b0 91 b9 01 	lds	r27, 0x01B9
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	a1 1d       	adc	r26, r1
     69a:	b1 1d       	adc	r27, r1
     69c:	80 93 b6 01 	sts	0x01B6, r24
     6a0:	90 93 b7 01 	sts	0x01B7, r25
     6a4:	a0 93 b8 01 	sts	0x01B8, r26
     6a8:	b0 93 b9 01 	sts	0x01B9, r27
}
     6ac:	bf 91       	pop	r27
     6ae:	af 91       	pop	r26
     6b0:	9f 91       	pop	r25
     6b2:	8f 91       	pop	r24
     6b4:	3f 91       	pop	r19
     6b6:	2f 91       	pop	r18
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     6c2:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     6c4:	f8 94       	cli
	m = timer0_millis;
     6c6:	20 91 ba 01 	lds	r18, 0x01BA
     6ca:	30 91 bb 01 	lds	r19, 0x01BB
     6ce:	40 91 bc 01 	lds	r20, 0x01BC
     6d2:	50 91 bd 01 	lds	r21, 0x01BD
	SREG = oldSREG;
     6d6:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     6d8:	b9 01       	movw	r22, r18
     6da:	ca 01       	movw	r24, r20
     6dc:	08 95       	ret

000006de <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     6de:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     6e0:	f8 94       	cli
	m = timer0_overflow_count;
     6e2:	20 91 b6 01 	lds	r18, 0x01B6
     6e6:	30 91 b7 01 	lds	r19, 0x01B7
     6ea:	40 91 b8 01 	lds	r20, 0x01B8
     6ee:	50 91 b9 01 	lds	r21, 0x01B9
#if defined(TCNT0)
	t = TCNT0;
     6f2:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     6f4:	a8 9b       	sbis	0x15, 0	; 21
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <micros+0x26>
     6f8:	8f 3f       	cpi	r24, 0xFF	; 255
     6fa:	21 f0       	breq	.+8      	; 0x704 <micros+0x26>
		m++;
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	4f 4f       	sbci	r20, 0xFF	; 255
     702:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     704:	9f bf       	out	0x3f, r25	; 63
     706:	54 2f       	mov	r21, r20
     708:	43 2f       	mov	r20, r19
     70a:	32 2f       	mov	r19, r18
     70c:	22 27       	eor	r18, r18
     70e:	28 0f       	add	r18, r24
     710:	31 1d       	adc	r19, r1
     712:	41 1d       	adc	r20, r1
     714:	51 1d       	adc	r21, r1
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	22 0f       	add	r18, r18
     71a:	33 1f       	adc	r19, r19
     71c:	44 1f       	adc	r20, r20
     71e:	55 1f       	adc	r21, r21
     720:	8a 95       	dec	r24
     722:	d1 f7       	brne	.-12     	; 0x718 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
     724:	b9 01       	movw	r22, r18
     726:	ca 01       	movw	r24, r20
     728:	08 95       	ret

0000072a <delay>:

void delay(unsigned long ms)
{
     72a:	9b 01       	movw	r18, r22
     72c:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     72e:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
     730:	f8 94       	cli
	m = timer0_overflow_count;
     732:	80 91 b6 01 	lds	r24, 0x01B6
     736:	90 91 b7 01 	lds	r25, 0x01B7
     73a:	a0 91 b8 01 	lds	r26, 0x01B8
     73e:	b0 91 b9 01 	lds	r27, 0x01B9
#if defined(TCNT0)
	t = TCNT0;
     742:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     744:	a8 9b       	sbis	0x15, 0	; 21
     746:	05 c0       	rjmp	.+10     	; 0x752 <delay+0x28>
     748:	6f 3f       	cpi	r22, 0xFF	; 255
     74a:	19 f0       	breq	.+6      	; 0x752 <delay+0x28>
		m++;
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	a1 1d       	adc	r26, r1
     750:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     752:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
     754:	ba 2f       	mov	r27, r26
     756:	a9 2f       	mov	r26, r25
     758:	98 2f       	mov	r25, r24
     75a:	88 27       	eor	r24, r24
     75c:	86 0f       	add	r24, r22
     75e:	91 1d       	adc	r25, r1
     760:	a1 1d       	adc	r26, r1
     762:	b1 1d       	adc	r27, r1
     764:	62 e0       	ldi	r22, 0x02	; 2
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	aa 1f       	adc	r26, r26
     76c:	bb 1f       	adc	r27, r27
     76e:	6a 95       	dec	r22
     770:	d1 f7       	brne	.-12     	; 0x766 <delay+0x3c>
     772:	bc 01       	movw	r22, r24
     774:	2d c0       	rjmp	.+90     	; 0x7d0 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     776:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
     778:	f8 94       	cli
	m = timer0_overflow_count;
     77a:	80 91 b6 01 	lds	r24, 0x01B6
     77e:	90 91 b7 01 	lds	r25, 0x01B7
     782:	a0 91 b8 01 	lds	r26, 0x01B8
     786:	b0 91 b9 01 	lds	r27, 0x01B9
#if defined(TCNT0)
	t = TCNT0;
     78a:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     78c:	a8 9b       	sbis	0x15, 0	; 21
     78e:	05 c0       	rjmp	.+10     	; 0x79a <delay+0x70>
     790:	ef 3f       	cpi	r30, 0xFF	; 255
     792:	19 f0       	breq	.+6      	; 0x79a <delay+0x70>
		m++;
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	a1 1d       	adc	r26, r1
     798:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     79a:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
     79c:	ba 2f       	mov	r27, r26
     79e:	a9 2f       	mov	r26, r25
     7a0:	98 2f       	mov	r25, r24
     7a2:	88 27       	eor	r24, r24
     7a4:	8e 0f       	add	r24, r30
     7a6:	91 1d       	adc	r25, r1
     7a8:	a1 1d       	adc	r26, r1
     7aa:	b1 1d       	adc	r27, r1
     7ac:	e2 e0       	ldi	r30, 0x02	; 2
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	ea 95       	dec	r30
     7b8:	d1 f7       	brne	.-12     	; 0x7ae <delay+0x84>
     7ba:	86 1b       	sub	r24, r22
     7bc:	97 0b       	sbc	r25, r23
     7be:	88 5e       	subi	r24, 0xE8	; 232
     7c0:	93 40       	sbci	r25, 0x03	; 3
     7c2:	c8 f2       	brcs	.-78     	; 0x776 <delay+0x4c>
			ms--;
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	30 40       	sbci	r19, 0x00	; 0
     7c8:	40 40       	sbci	r20, 0x00	; 0
     7ca:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
     7cc:	68 51       	subi	r22, 0x18	; 24
     7ce:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     7d0:	21 15       	cp	r18, r1
     7d2:	31 05       	cpc	r19, r1
     7d4:	41 05       	cpc	r20, r1
     7d6:	51 05       	cpc	r21, r1
     7d8:	71 f6       	brne	.-100    	; 0x776 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     7da:	08 95       	ret

000007dc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	39 f0       	breq	.+14     	; 0x7ee <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
     7e8:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <delayMicroseconds+0xe>
     7ee:	08 95       	ret

000007f0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     7f0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     7f2:	84 b5       	in	r24, 0x24	; 36
     7f4:	82 60       	ori	r24, 0x02	; 2
     7f6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     7f8:	84 b5       	in	r24, 0x24	; 36
     7fa:	81 60       	ori	r24, 0x01	; 1
     7fc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     7fe:	85 b5       	in	r24, 0x25	; 37
     800:	82 60       	ori	r24, 0x02	; 2
     802:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     804:	85 b5       	in	r24, 0x25	; 37
     806:	81 60       	ori	r24, 0x01	; 1
     808:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     80a:	ee e6       	ldi	r30, 0x6E	; 110
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	81 60       	ori	r24, 0x01	; 1
     812:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     814:	e1 e8       	ldi	r30, 0x81	; 129
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     81a:	80 81       	ld	r24, Z
     81c:	82 60       	ori	r24, 0x02	; 2
     81e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     820:	80 81       	ld	r24, Z
     822:	81 60       	ori	r24, 0x01	; 1
     824:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     826:	e0 e8       	ldi	r30, 0x80	; 128
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     830:	e1 eb       	ldi	r30, 0xB1	; 177
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	84 60       	ori	r24, 0x04	; 4
     838:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     83a:	e0 eb       	ldi	r30, 0xB0	; 176
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	81 60       	ori	r24, 0x01	; 1
     842:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     844:	ea e7       	ldi	r30, 0x7A	; 122
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	84 60       	ori	r24, 0x04	; 4
     84c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     84e:	80 81       	ld	r24, Z
     850:	82 60       	ori	r24, 0x02	; 2
     852:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     854:	80 81       	ld	r24, Z
     856:	81 60       	ori	r24, 0x01	; 1
     858:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     85a:	80 81       	ld	r24, Z
     85c:	80 68       	ori	r24, 0x80	; 128
     85e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     860:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     864:	08 95       	ret

00000866 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     86a:	48 2f       	mov	r20, r24
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	ca 01       	movw	r24, r20
     870:	85 56       	subi	r24, 0x65	; 101
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	fc 01       	movw	r30, r24
     876:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
     878:	49 57       	subi	r20, 0x79	; 121
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	fa 01       	movw	r30, r20
     87e:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     880:	88 23       	and	r24, r24
     882:	69 f1       	breq	.+90     	; 0x8de <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	fc 01       	movw	r30, r24
     88c:	e7 59       	subi	r30, 0x97	; 151
     88e:	ff 4f       	sbci	r31, 0xFF	; 255
     890:	a5 91       	lpm	r26, Z+
     892:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
     894:	fc 01       	movw	r30, r24
     896:	ed 58       	subi	r30, 0x8D	; 141
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	c5 91       	lpm	r28, Z+
     89c:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
     89e:	66 23       	and	r22, r22
     8a0:	51 f4       	brne	.+20     	; 0x8b6 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     8a2:	2f b7       	in	r18, 0x3f	; 63
                cli();
     8a4:	f8 94       	cli
		*reg &= ~bit;
     8a6:	8c 91       	ld	r24, X
     8a8:	93 2f       	mov	r25, r19
     8aa:	90 95       	com	r25
     8ac:	89 23       	and	r24, r25
     8ae:	8c 93       	st	X, r24
		*out &= ~bit;
     8b0:	88 81       	ld	r24, Y
     8b2:	89 23       	and	r24, r25
     8b4:	0b c0       	rjmp	.+22     	; 0x8cc <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     8b6:	62 30       	cpi	r22, 0x02	; 2
     8b8:	61 f4       	brne	.+24     	; 0x8d2 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     8ba:	2f b7       	in	r18, 0x3f	; 63
                cli();
     8bc:	f8 94       	cli
		*reg &= ~bit;
     8be:	8c 91       	ld	r24, X
     8c0:	93 2f       	mov	r25, r19
     8c2:	90 95       	com	r25
     8c4:	89 23       	and	r24, r25
     8c6:	8c 93       	st	X, r24
		*out |= bit;
     8c8:	88 81       	ld	r24, Y
     8ca:	83 2b       	or	r24, r19
     8cc:	88 83       	st	Y, r24
		SREG = oldSREG;
     8ce:	2f bf       	out	0x3f, r18	; 63
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     8d2:	9f b7       	in	r25, 0x3f	; 63
                cli();
     8d4:	f8 94       	cli
		*reg |= bit;
     8d6:	8c 91       	ld	r24, X
     8d8:	83 2b       	or	r24, r19
     8da:	8c 93       	st	X, r24
		SREG = oldSREG;
     8dc:	9f bf       	out	0x3f, r25	; 63
	}
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
     8e4:	48 2f       	mov	r20, r24
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	ca 01       	movw	r24, r20
     8ea:	81 55       	subi	r24, 0x51	; 81
     8ec:	9f 4f       	sbci	r25, 0xFF	; 255
     8ee:	fc 01       	movw	r30, r24
     8f0:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     8f2:	ca 01       	movw	r24, r20
     8f4:	85 56       	subi	r24, 0x65	; 101
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	fc 01       	movw	r30, r24
     8fa:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
     8fc:	49 57       	subi	r20, 0x79	; 121
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	fa 01       	movw	r30, r20
     902:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     904:	33 23       	and	r19, r19
     906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
     908:	40 c0       	rjmp	.+128    	; 0x98a <__stack+0x8b>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     90a:	22 23       	and	r18, r18
     90c:	51 f1       	breq	.+84     	; 0x962 <__stack+0x63>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     90e:	23 30       	cpi	r18, 0x03	; 3
     910:	71 f0       	breq	.+28     	; 0x92e <__stack+0x2f>
     912:	24 30       	cpi	r18, 0x04	; 4
     914:	28 f4       	brcc	.+10     	; 0x920 <__stack+0x21>
     916:	21 30       	cpi	r18, 0x01	; 1
     918:	a1 f0       	breq	.+40     	; 0x942 <__stack+0x43>
     91a:	22 30       	cpi	r18, 0x02	; 2
     91c:	11 f5       	brne	.+68     	; 0x962 <__stack+0x63>
     91e:	14 c0       	rjmp	.+40     	; 0x948 <__stack+0x49>
     920:	26 30       	cpi	r18, 0x06	; 6
     922:	b1 f0       	breq	.+44     	; 0x950 <__stack+0x51>
     924:	27 30       	cpi	r18, 0x07	; 7
     926:	c1 f0       	breq	.+48     	; 0x958 <__stack+0x59>
     928:	24 30       	cpi	r18, 0x04	; 4
     92a:	d9 f4       	brne	.+54     	; 0x962 <__stack+0x63>
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0x37>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     92e:	80 91 80 00 	lds	r24, 0x0080
     932:	8f 77       	andi	r24, 0x7F	; 127
     934:	03 c0       	rjmp	.+6      	; 0x93c <__stack+0x3d>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     936:	80 91 80 00 	lds	r24, 0x0080
     93a:	8f 7d       	andi	r24, 0xDF	; 223
     93c:	80 93 80 00 	sts	0x0080, r24
     940:	10 c0       	rjmp	.+32     	; 0x962 <__stack+0x63>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     942:	84 b5       	in	r24, 0x24	; 36
     944:	8f 77       	andi	r24, 0x7F	; 127
     946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     948:	84 b5       	in	r24, 0x24	; 36
     94a:	8f 7d       	andi	r24, 0xDF	; 223
     94c:	84 bd       	out	0x24, r24	; 36
     94e:	09 c0       	rjmp	.+18     	; 0x962 <__stack+0x63>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     950:	80 91 b0 00 	lds	r24, 0x00B0
     954:	8f 77       	andi	r24, 0x7F	; 127
     956:	03 c0       	rjmp	.+6      	; 0x95e <__stack+0x5f>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     958:	80 91 b0 00 	lds	r24, 0x00B0
     95c:	8f 7d       	andi	r24, 0xDF	; 223
     95e:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
     962:	e3 2f       	mov	r30, r19
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	ed 58       	subi	r30, 0x8D	; 141
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	a5 91       	lpm	r26, Z+
     970:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
     972:	2f b7       	in	r18, 0x3f	; 63
	cli();
     974:	f8 94       	cli

	if (val == LOW) {
     976:	66 23       	and	r22, r22
     978:	21 f4       	brne	.+8      	; 0x982 <__stack+0x83>
		*out &= ~bit;
     97a:	8c 91       	ld	r24, X
     97c:	90 95       	com	r25
     97e:	89 23       	and	r24, r25
     980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x87>
	} else {
		*out |= bit;
     982:	8c 91       	ld	r24, X
     984:	89 2b       	or	r24, r25
     986:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     988:	2f bf       	out	0x3f, r18	; 63
     98a:	08 95       	ret

0000098c <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
     98c:	68 2f       	mov	r22, r24
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	cb 01       	movw	r24, r22
     992:	81 55       	subi	r24, 0x51	; 81
     994:	9f 4f       	sbci	r25, 0xFF	; 255
     996:	fc 01       	movw	r30, r24
     998:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     99a:	cb 01       	movw	r24, r22
     99c:	85 56       	subi	r24, 0x65	; 101
     99e:	9f 4f       	sbci	r25, 0xFF	; 255
     9a0:	fc 01       	movw	r30, r24
     9a2:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
     9a4:	69 57       	subi	r22, 0x79	; 121
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	fb 01       	movw	r30, r22
     9aa:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
     9ac:	99 23       	and	r25, r25
     9ae:	19 f4       	brne	.+6      	; 0x9b6 <digitalRead+0x2a>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	3c c0       	rjmp	.+120    	; 0xa2e <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     9b6:	22 23       	and	r18, r18
     9b8:	51 f1       	breq	.+84     	; 0xa0e <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     9ba:	23 30       	cpi	r18, 0x03	; 3
     9bc:	71 f0       	breq	.+28     	; 0x9da <digitalRead+0x4e>
     9be:	24 30       	cpi	r18, 0x04	; 4
     9c0:	28 f4       	brcc	.+10     	; 0x9cc <digitalRead+0x40>
     9c2:	21 30       	cpi	r18, 0x01	; 1
     9c4:	a1 f0       	breq	.+40     	; 0x9ee <digitalRead+0x62>
     9c6:	22 30       	cpi	r18, 0x02	; 2
     9c8:	11 f5       	brne	.+68     	; 0xa0e <digitalRead+0x82>
     9ca:	14 c0       	rjmp	.+40     	; 0x9f4 <digitalRead+0x68>
     9cc:	26 30       	cpi	r18, 0x06	; 6
     9ce:	b1 f0       	breq	.+44     	; 0x9fc <digitalRead+0x70>
     9d0:	27 30       	cpi	r18, 0x07	; 7
     9d2:	c1 f0       	breq	.+48     	; 0xa04 <digitalRead+0x78>
     9d4:	24 30       	cpi	r18, 0x04	; 4
     9d6:	d9 f4       	brne	.+54     	; 0xa0e <digitalRead+0x82>
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     9da:	80 91 80 00 	lds	r24, 0x0080
     9de:	8f 77       	andi	r24, 0x7F	; 127
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     9e2:	80 91 80 00 	lds	r24, 0x0080
     9e6:	8f 7d       	andi	r24, 0xDF	; 223
     9e8:	80 93 80 00 	sts	0x0080, r24
     9ec:	10 c0       	rjmp	.+32     	; 0xa0e <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     9ee:	84 b5       	in	r24, 0x24	; 36
     9f0:	8f 77       	andi	r24, 0x7F	; 127
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     9f4:	84 b5       	in	r24, 0x24	; 36
     9f6:	8f 7d       	andi	r24, 0xDF	; 223
     9f8:	84 bd       	out	0x24, r24	; 36
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     9fc:	80 91 b0 00 	lds	r24, 0x00B0
     a00:	8f 77       	andi	r24, 0x7F	; 127
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     a04:	80 91 b0 00 	lds	r24, 0x00B0
     a08:	8f 7d       	andi	r24, 0xDF	; 223
     a0a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
     a0e:	89 2f       	mov	r24, r25
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	83 58       	subi	r24, 0x83	; 131
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	fc 01       	movw	r30, r24
     a1c:	a5 91       	lpm	r26, Z+
     a1e:	b4 91       	lpm	r27, Z+
     a20:	8c 91       	ld	r24, X
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	84 23       	and	r24, r20
     a28:	11 f0       	breq	.+4      	; 0xa2e <digitalRead+0xa2>
     a2a:	21 e0       	ldi	r18, 0x01	; 1
     a2c:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
     a2e:	c9 01       	movw	r24, r18
     a30:	08 95       	ret

00000a32 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     a32:	88 0f       	add	r24, r24
     a34:	80 93 ba 00 	sts	0x00BA, r24
}
     a38:	08 95       	ret

00000a3a <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
     a3a:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     a3c:	41 32       	cpi	r20, 0x21	; 33
     a3e:	10 f0       	brcs	.+4      	; 0xa44 <twi_readFrom+0xa>
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	42 c0       	rjmp	.+132    	; 0xac8 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     a44:	80 91 bf 01 	lds	r24, 0x01BF
     a48:	88 23       	and	r24, r24
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	90 93 bf 01 	sts	0x01BF, r25
  twi_sendStop = sendStop;
     a52:	20 93 c1 01 	sts	0x01C1, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	80 93 2c 02 	sts	0x022C, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     a5c:	10 92 e7 01 	sts	0x01E7, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     a60:	41 50       	subi	r20, 0x01	; 1
     a62:	40 93 e8 01 	sts	0x01E8, r20
     a66:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     a68:	90 93 c0 01 	sts	0x01C0, r25
  twi_slarw |= address << 1;
     a6c:	80 91 c0 01 	lds	r24, 0x01C0
     a70:	33 0f       	add	r19, r19
     a72:	83 2b       	or	r24, r19
     a74:	80 93 c0 01 	sts	0x01C0, r24

  if (true == twi_inRepStart) {
     a78:	80 91 c2 01 	lds	r24, 0x01C2
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	41 f4       	brne	.+16     	; 0xa90 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     a80:	10 92 c2 01 	sts	0x01C2, r1
    TWDR = twi_slarw;
     a84:	80 91 c0 01 	lds	r24, 0x01C0
     a88:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     a8c:	85 ec       	ldi	r24, 0xC5	; 197
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     a90:	85 ee       	ldi	r24, 0xE5	; 229
     a92:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     a96:	80 91 bf 01 	lds	r24, 0x01BF
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	e1 f3       	breq	.-8      	; 0xa96 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
     a9e:	80 91 e7 01 	lds	r24, 0x01E7
     aa2:	84 17       	cp	r24, r20
     aa4:	10 f4       	brcc	.+4      	; 0xaaa <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
     aa6:	40 91 e7 01 	lds	r20, 0x01E7
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	0a c0       	rjmp	.+20     	; 0xac4 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
     ab0:	fb 01       	movw	r30, r22
     ab2:	e2 0f       	add	r30, r18
     ab4:	f3 1f       	adc	r31, r19
     ab6:	d9 01       	movw	r26, r18
     ab8:	a9 53       	subi	r26, 0x39	; 57
     aba:	be 4f       	sbci	r27, 0xFE	; 254
     abc:	8c 91       	ld	r24, X
     abe:	80 83       	st	Z, r24
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     ac4:	24 17       	cp	r18, r20
     ac6:	a0 f3       	brcs	.-24     	; 0xab0 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     ac8:	84 2f       	mov	r24, r20
     aca:	08 95       	ret

00000acc <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	58 2f       	mov	r21, r24
     ad2:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     ad4:	41 32       	cpi	r20, 0x21	; 33
     ad6:	10 f0       	brcs	.+4      	; 0xadc <twi_writeTo+0x10>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	4a c0       	rjmp	.+148    	; 0xb70 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     adc:	80 91 bf 01 	lds	r24, 0x01BF
     ae0:	88 23       	and	r24, r24
     ae2:	e1 f7       	brne	.-8      	; 0xadc <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	80 93 bf 01 	sts	0x01BF, r24
  twi_sendStop = sendStop;
     aea:	00 93 c1 01 	sts	0x01C1, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	80 93 2c 02 	sts	0x022C, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     af4:	10 92 e7 01 	sts	0x01E7, r1
  twi_masterBufferLength = length;
     af8:	40 93 e8 01 	sts	0x01E8, r20
     afc:	a7 ec       	ldi	r26, 0xC7	; 199
     afe:	b1 e0       	ldi	r27, 0x01	; 1
     b00:	fb 01       	movw	r30, r22
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     b04:	81 91       	ld	r24, Z+
     b06:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 1b       	sub	r24, r22
     b0c:	84 17       	cp	r24, r20
     b0e:	d0 f3       	brcs	.-12     	; 0xb04 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     b10:	10 92 c0 01 	sts	0x01C0, r1
  twi_slarw |= address << 1;
     b14:	80 91 c0 01 	lds	r24, 0x01C0
     b18:	55 0f       	add	r21, r21
     b1a:	85 2b       	or	r24, r21
     b1c:	80 93 c0 01 	sts	0x01C0, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     b20:	80 91 c2 01 	lds	r24, 0x01C2
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	41 f4       	brne	.+16     	; 0xb38 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     b28:	10 92 c2 01 	sts	0x01C2, r1
    TWDR = twi_slarw;				
     b2c:	80 91 c0 01 	lds	r24, 0x01C0
     b30:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     b34:	85 ec       	ldi	r24, 0xC5	; 197
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
     b38:	85 ee       	ldi	r24, 0xE5	; 229
     b3a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     b3e:	11 23       	and	r17, r17
     b40:	21 f0       	breq	.+8      	; 0xb4a <twi_writeTo+0x7e>
     b42:	80 91 bf 01 	lds	r24, 0x01BF
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	e1 f3       	breq	.-8      	; 0xb42 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
     b4a:	80 91 2c 02 	lds	r24, 0x022C
     b4e:	8f 3f       	cpi	r24, 0xFF	; 255
     b50:	11 f4       	brne	.+4      	; 0xb56 <twi_writeTo+0x8a>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0d c0       	rjmp	.+26     	; 0xb70 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     b56:	80 91 2c 02 	lds	r24, 0x022C
     b5a:	80 32       	cpi	r24, 0x20	; 32
     b5c:	11 f4       	brne	.+4      	; 0xb62 <twi_writeTo+0x96>
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	07 c0       	rjmp	.+14     	; 0xb70 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     b62:	80 91 2c 02 	lds	r24, 0x022C
     b66:	80 33       	cpi	r24, 0x30	; 48
     b68:	11 f0       	breq	.+4      	; 0xb6e <twi_writeTo+0xa2>
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <twi_writeTo+0xa4>
     b6e:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	08 95       	ret

00000b76 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     b76:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     b78:	61 32       	cpi	r22, 0x21	; 33
     b7a:	10 f0       	brcs	.+4      	; 0xb80 <twi_transmit+0xa>
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     b80:	80 91 bf 01 	lds	r24, 0x01BF
     b84:	84 30       	cpi	r24, 0x04	; 4
     b86:	11 f0       	breq	.+4      	; 0xb8c <twi_transmit+0x16>
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     b8c:	60 93 0a 02 	sts	0x020A, r22
     b90:	a9 ee       	ldi	r26, 0xE9	; 233
     b92:	b1 e0       	ldi	r27, 0x01	; 1
     b94:	84 2f       	mov	r24, r20
     b96:	9c 01       	movw	r18, r24
     b98:	f9 01       	movw	r30, r18
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
     b9c:	81 91       	ld	r24, Z+
     b9e:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     ba0:	8e 2f       	mov	r24, r30
     ba2:	84 1b       	sub	r24, r20
     ba4:	86 17       	cp	r24, r22
     ba6:	d0 f3       	brcs	.-12     	; 0xb9c <twi_transmit+0x26>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     baa:	08 95       	ret

00000bac <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     bac:	90 93 c6 01 	sts	0x01C6, r25
     bb0:	80 93 c5 01 	sts	0x01C5, r24
}
     bb4:	08 95       	ret

00000bb6 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     bb6:	90 93 c4 01 	sts	0x01C4, r25
     bba:	80 93 c3 01 	sts	0x01C3, r24
}
     bbe:	08 95       	ret

00000bc0 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     bc0:	88 23       	and	r24, r24
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <twi_reply+0x8>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     bc4:	85 ec       	ldi	r24, 0xC5	; 197
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <twi_reply+0xa>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     bc8:	85 e8       	ldi	r24, 0x85	; 133
     bca:	80 93 bc 00 	sts	0x00BC, r24
     bce:	08 95       	ret

00000bd0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     bd0:	85 ed       	ldi	r24, 0xD5	; 213
     bd2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     bd6:	80 91 bc 00 	lds	r24, 0x00BC
     bda:	84 fd       	sbrc	r24, 4
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     bde:	10 92 bf 01 	sts	0x01BF, r1
}
     be2:	08 95       	ret

00000be4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     be4:	85 ec       	ldi	r24, 0xC5	; 197
     be6:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     bea:	10 92 bf 01 	sts	0x01BF, r1
}
     bee:	08 95       	ret

00000bf0 <__vector_24>:

SIGNAL(TWI_vect)
{
     bf0:	1f 92       	push	r1
     bf2:	0f 92       	push	r0
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	0f 92       	push	r0
     bf8:	11 24       	eor	r1, r1
     bfa:	2f 93       	push	r18
     bfc:	3f 93       	push	r19
     bfe:	4f 93       	push	r20
     c00:	5f 93       	push	r21
     c02:	6f 93       	push	r22
     c04:	7f 93       	push	r23
     c06:	8f 93       	push	r24
     c08:	9f 93       	push	r25
     c0a:	af 93       	push	r26
     c0c:	bf 93       	push	r27
     c0e:	ef 93       	push	r30
     c10:	ff 93       	push	r31
  switch(TW_STATUS){
     c12:	80 91 b9 00 	lds	r24, 0x00B9
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	88 7f       	andi	r24, 0xF8	; 248
     c1a:	90 70       	andi	r25, 0x00	; 0
     c1c:	80 36       	cpi	r24, 0x60	; 96
     c1e:	91 05       	cpc	r25, r1
     c20:	09 f4       	brne	.+2      	; 0xc24 <__vector_24+0x34>
     c22:	f2 c0       	rjmp	.+484    	; 0xe08 <__vector_24+0x218>
     c24:	81 36       	cpi	r24, 0x61	; 97
     c26:	91 05       	cpc	r25, r1
     c28:	cc f5       	brge	.+114    	; 0xc9c <__vector_24+0xac>
     c2a:	88 32       	cpi	r24, 0x28	; 40
     c2c:	91 05       	cpc	r25, r1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__vector_24+0x42>
     c30:	7b c0       	rjmp	.+246    	; 0xd28 <__vector_24+0x138>
     c32:	89 32       	cpi	r24, 0x29	; 41
     c34:	91 05       	cpc	r25, r1
     c36:	b4 f4       	brge	.+44     	; 0xc64 <__vector_24+0x74>
     c38:	80 31       	cpi	r24, 0x10	; 16
     c3a:	91 05       	cpc	r25, r1
     c3c:	09 f4       	brne	.+2      	; 0xc40 <__vector_24+0x50>
     c3e:	6f c0       	rjmp	.+222    	; 0xd1e <__vector_24+0x12e>
     c40:	81 31       	cpi	r24, 0x11	; 17
     c42:	91 05       	cpc	r25, r1
     c44:	3c f4       	brge	.+14     	; 0xc54 <__vector_24+0x64>
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	09 f4       	brne	.+2      	; 0xc4c <__vector_24+0x5c>
     c4a:	47 c1       	rjmp	.+654    	; 0xeda <__vector_24+0x2ea>
     c4c:	08 97       	sbiw	r24, 0x08	; 8
     c4e:	09 f0       	breq	.+2      	; 0xc52 <__vector_24+0x62>
     c50:	4f c1       	rjmp	.+670    	; 0xef0 <__vector_24+0x300>
     c52:	65 c0       	rjmp	.+202    	; 0xd1e <__vector_24+0x12e>
     c54:	88 31       	cpi	r24, 0x18	; 24
     c56:	91 05       	cpc	r25, r1
     c58:	09 f4       	brne	.+2      	; 0xc5c <__vector_24+0x6c>
     c5a:	66 c0       	rjmp	.+204    	; 0xd28 <__vector_24+0x138>
     c5c:	80 97       	sbiw	r24, 0x20	; 32
     c5e:	09 f0       	breq	.+2      	; 0xc62 <__vector_24+0x72>
     c60:	47 c1       	rjmp	.+654    	; 0xef0 <__vector_24+0x300>
     c62:	82 c0       	rjmp	.+260    	; 0xd68 <__vector_24+0x178>
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <__vector_24+0x7c>
     c6a:	a4 c0       	rjmp	.+328    	; 0xdb4 <__vector_24+0x1c4>
     c6c:	81 34       	cpi	r24, 0x41	; 65
     c6e:	91 05       	cpc	r25, r1
     c70:	44 f4       	brge	.+16     	; 0xc82 <__vector_24+0x92>
     c72:	80 33       	cpi	r24, 0x30	; 48
     c74:	91 05       	cpc	r25, r1
     c76:	09 f4       	brne	.+2      	; 0xc7a <__vector_24+0x8a>
     c78:	82 c0       	rjmp	.+260    	; 0xd7e <__vector_24+0x18e>
     c7a:	c8 97       	sbiw	r24, 0x38	; 56
     c7c:	09 f0       	breq	.+2      	; 0xc80 <__vector_24+0x90>
     c7e:	38 c1       	rjmp	.+624    	; 0xef0 <__vector_24+0x300>
     c80:	89 c0       	rjmp	.+274    	; 0xd94 <__vector_24+0x1a4>
     c82:	80 35       	cpi	r24, 0x50	; 80
     c84:	91 05       	cpc	r25, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <__vector_24+0x9a>
     c88:	89 c0       	rjmp	.+274    	; 0xd9c <__vector_24+0x1ac>
     c8a:	88 35       	cpi	r24, 0x58	; 88
     c8c:	91 05       	cpc	r25, r1
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__vector_24+0xa2>
     c90:	96 c0       	rjmp	.+300    	; 0xdbe <__vector_24+0x1ce>
     c92:	88 34       	cpi	r24, 0x48	; 72
     c94:	91 05       	cpc	r25, r1
     c96:	09 f0       	breq	.+2      	; 0xc9a <__vector_24+0xaa>
     c98:	2b c1       	rjmp	.+598    	; 0xef0 <__vector_24+0x300>
     c9a:	ae c0       	rjmp	.+348    	; 0xdf8 <__vector_24+0x208>
     c9c:	88 39       	cpi	r24, 0x98	; 152
     c9e:	91 05       	cpc	r25, r1
     ca0:	09 f4       	brne	.+2      	; 0xca4 <__vector_24+0xb4>
     ca2:	13 c1       	rjmp	.+550    	; 0xeca <__vector_24+0x2da>
     ca4:	89 39       	cpi	r24, 0x99	; 153
     ca6:	91 05       	cpc	r25, r1
     ca8:	ec f4       	brge	.+58     	; 0xce4 <__vector_24+0xf4>
     caa:	88 37       	cpi	r24, 0x78	; 120
     cac:	91 05       	cpc	r25, r1
     cae:	09 f4       	brne	.+2      	; 0xcb2 <__vector_24+0xc2>
     cb0:	ab c0       	rjmp	.+342    	; 0xe08 <__vector_24+0x218>
     cb2:	89 37       	cpi	r24, 0x79	; 121
     cb4:	91 05       	cpc	r25, r1
     cb6:	4c f4       	brge	.+18     	; 0xcca <__vector_24+0xda>
     cb8:	88 36       	cpi	r24, 0x68	; 104
     cba:	91 05       	cpc	r25, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <__vector_24+0xd0>
     cbe:	a4 c0       	rjmp	.+328    	; 0xe08 <__vector_24+0x218>
     cc0:	80 37       	cpi	r24, 0x70	; 112
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <__vector_24+0xd8>
     cc6:	14 c1       	rjmp	.+552    	; 0xef0 <__vector_24+0x300>
     cc8:	9f c0       	rjmp	.+318    	; 0xe08 <__vector_24+0x218>
     cca:	88 38       	cpi	r24, 0x88	; 136
     ccc:	91 05       	cpc	r25, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <__vector_24+0xe2>
     cd0:	fc c0       	rjmp	.+504    	; 0xeca <__vector_24+0x2da>
     cd2:	80 39       	cpi	r24, 0x90	; 144
     cd4:	91 05       	cpc	r25, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <__vector_24+0xea>
     cd8:	9d c0       	rjmp	.+314    	; 0xe14 <__vector_24+0x224>
     cda:	80 38       	cpi	r24, 0x80	; 128
     cdc:	91 05       	cpc	r25, r1
     cde:	09 f0       	breq	.+2      	; 0xce2 <__vector_24+0xf2>
     ce0:	07 c1       	rjmp	.+526    	; 0xef0 <__vector_24+0x300>
     ce2:	98 c0       	rjmp	.+304    	; 0xe14 <__vector_24+0x224>
     ce4:	80 3b       	cpi	r24, 0xB0	; 176
     ce6:	91 05       	cpc	r25, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <__vector_24+0xfc>
     cea:	c6 c0       	rjmp	.+396    	; 0xe78 <__vector_24+0x288>
     cec:	81 3b       	cpi	r24, 0xB1	; 177
     cee:	91 05       	cpc	r25, r1
     cf0:	4c f4       	brge	.+18     	; 0xd04 <__vector_24+0x114>
     cf2:	80 3a       	cpi	r24, 0xA0	; 160
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <__vector_24+0x10a>
     cf8:	9f c0       	rjmp	.+318    	; 0xe38 <__vector_24+0x248>
     cfa:	88 3a       	cpi	r24, 0xA8	; 168
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f0       	breq	.+2      	; 0xd02 <__vector_24+0x112>
     d00:	f7 c0       	rjmp	.+494    	; 0xef0 <__vector_24+0x300>
     d02:	ba c0       	rjmp	.+372    	; 0xe78 <__vector_24+0x288>
     d04:	80 3c       	cpi	r24, 0xC0	; 192
     d06:	91 05       	cpc	r25, r1
     d08:	09 f4       	brne	.+2      	; 0xd0c <__vector_24+0x11c>
     d0a:	e3 c0       	rjmp	.+454    	; 0xed2 <__vector_24+0x2e2>
     d0c:	88 3c       	cpi	r24, 0xC8	; 200
     d0e:	91 05       	cpc	r25, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <__vector_24+0x124>
     d12:	df c0       	rjmp	.+446    	; 0xed2 <__vector_24+0x2e2>
     d14:	88 3b       	cpi	r24, 0xB8	; 184
     d16:	91 05       	cpc	r25, r1
     d18:	09 f0       	breq	.+2      	; 0xd1c <__vector_24+0x12c>
     d1a:	ea c0       	rjmp	.+468    	; 0xef0 <__vector_24+0x300>
     d1c:	c2 c0       	rjmp	.+388    	; 0xea2 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     d1e:	80 91 c0 01 	lds	r24, 0x01C0
     d22:	80 93 bb 00 	sts	0x00BB, r24
     d26:	cf c0       	rjmp	.+414    	; 0xec6 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     d28:	90 91 e7 01 	lds	r25, 0x01E7
     d2c:	80 91 e8 01 	lds	r24, 0x01E8
     d30:	98 17       	cp	r25, r24
     d32:	68 f4       	brcc	.+26     	; 0xd4e <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     d34:	90 91 e7 01 	lds	r25, 0x01E7
     d38:	e9 2f       	mov	r30, r25
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	e9 53       	subi	r30, 0x39	; 57
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
     d40:	80 81       	ld	r24, Z
     d42:	80 93 bb 00 	sts	0x00BB, r24
     d46:	9f 5f       	subi	r25, 0xFF	; 255
     d48:	90 93 e7 01 	sts	0x01E7, r25
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
     d4e:	80 91 c1 01 	lds	r24, 0x01C1
     d52:	88 23       	and	r24, r24
     d54:	09 f4       	brne	.+2      	; 0xd58 <__vector_24+0x168>
     d56:	4b c0       	rjmp	.+150    	; 0xdee <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d58:	85 ed       	ldi	r24, 0xD5	; 213
     d5a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d5e:	80 91 bc 00 	lds	r24, 0x00BC
     d62:	84 fd       	sbrc	r24, 4
     d64:	fc cf       	rjmp	.-8      	; 0xd5e <__vector_24+0x16e>
     d66:	c2 c0       	rjmp	.+388    	; 0xeec <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     d68:	80 e2       	ldi	r24, 0x20	; 32
     d6a:	80 93 2c 02 	sts	0x022C, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d6e:	85 ed       	ldi	r24, 0xD5	; 213
     d70:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d74:	80 91 bc 00 	lds	r24, 0x00BC
     d78:	84 fd       	sbrc	r24, 4
     d7a:	fc cf       	rjmp	.-8      	; 0xd74 <__vector_24+0x184>
     d7c:	b7 c0       	rjmp	.+366    	; 0xeec <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     d7e:	80 e3       	ldi	r24, 0x30	; 48
     d80:	80 93 2c 02 	sts	0x022C, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d84:	85 ed       	ldi	r24, 0xD5	; 213
     d86:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d8a:	80 91 bc 00 	lds	r24, 0x00BC
     d8e:	84 fd       	sbrc	r24, 4
     d90:	fc cf       	rjmp	.-8      	; 0xd8a <__vector_24+0x19a>
     d92:	ac c0       	rjmp	.+344    	; 0xeec <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     d94:	88 e3       	ldi	r24, 0x38	; 56
     d96:	80 93 2c 02 	sts	0x022C, r24
     d9a:	9b c0       	rjmp	.+310    	; 0xed2 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     d9c:	80 91 e7 01 	lds	r24, 0x01E7
     da0:	90 91 bb 00 	lds	r25, 0x00BB
     da4:	e8 2f       	mov	r30, r24
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	e9 53       	subi	r30, 0x39	; 57
     daa:	fe 4f       	sbci	r31, 0xFE	; 254
     dac:	90 83       	st	Z, r25
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	80 93 e7 01 	sts	0x01E7, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     db4:	90 91 e7 01 	lds	r25, 0x01E7
     db8:	80 91 e8 01 	lds	r24, 0x01E8
     dbc:	82 c0       	rjmp	.+260    	; 0xec2 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     dbe:	80 91 e7 01 	lds	r24, 0x01E7
     dc2:	90 91 bb 00 	lds	r25, 0x00BB
     dc6:	e8 2f       	mov	r30, r24
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	e9 53       	subi	r30, 0x39	; 57
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	90 83       	st	Z, r25
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	80 93 e7 01 	sts	0x01E7, r24
	if (twi_sendStop)
     dd6:	80 91 c1 01 	lds	r24, 0x01C1
     dda:	88 23       	and	r24, r24
     ddc:	41 f0       	breq	.+16     	; 0xdee <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     dde:	85 ed       	ldi	r24, 0xD5	; 213
     de0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     de4:	80 91 bc 00 	lds	r24, 0x00BC
     de8:	84 fd       	sbrc	r24, 4
     dea:	fc cf       	rjmp	.-8      	; 0xde4 <__vector_24+0x1f4>
     dec:	7f c0       	rjmp	.+254    	; 0xeec <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 c2 01 	sts	0x01C2, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     df4:	84 ea       	ldi	r24, 0xA4	; 164
     df6:	6e c0       	rjmp	.+220    	; 0xed4 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     df8:	85 ed       	ldi	r24, 0xD5	; 213
     dfa:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     dfe:	80 91 bc 00 	lds	r24, 0x00BC
     e02:	84 fd       	sbrc	r24, 4
     e04:	fc cf       	rjmp	.-8      	; 0xdfe <__vector_24+0x20e>
     e06:	72 c0       	rjmp	.+228    	; 0xeec <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	80 93 bf 01 	sts	0x01BF, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     e0e:	10 92 2b 02 	sts	0x022B, r1
     e12:	59 c0       	rjmp	.+178    	; 0xec6 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e14:	80 91 2b 02 	lds	r24, 0x022B
     e18:	80 32       	cpi	r24, 0x20	; 32
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <__vector_24+0x22e>
     e1c:	56 c0       	rjmp	.+172    	; 0xeca <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     e1e:	80 91 2b 02 	lds	r24, 0x022B
     e22:	90 91 bb 00 	lds	r25, 0x00BB
     e26:	e8 2f       	mov	r30, r24
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	e5 5f       	subi	r30, 0xF5	; 245
     e2c:	fd 4f       	sbci	r31, 0xFD	; 253
     e2e:	90 83       	st	Z, r25
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	80 93 2b 02 	sts	0x022B, r24
     e36:	47 c0       	rjmp	.+142    	; 0xec6 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e38:	80 91 2b 02 	lds	r24, 0x022B
     e3c:	80 32       	cpi	r24, 0x20	; 32
     e3e:	30 f4       	brcc	.+12     	; 0xe4c <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     e40:	e0 91 2b 02 	lds	r30, 0x022B
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	e5 5f       	subi	r30, 0xF5	; 245
     e48:	fd 4f       	sbci	r31, 0xFD	; 253
     e4a:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     e4c:	85 ed       	ldi	r24, 0xD5	; 213
     e4e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     e52:	80 91 bc 00 	lds	r24, 0x00BC
     e56:	84 fd       	sbrc	r24, 4
     e58:	fc cf       	rjmp	.-8      	; 0xe52 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     e5a:	10 92 bf 01 	sts	0x01BF, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     e5e:	60 91 2b 02 	lds	r22, 0x022B
     e62:	e0 91 c5 01 	lds	r30, 0x01C5
     e66:	f0 91 c6 01 	lds	r31, 0x01C6
     e6a:	8b e0       	ldi	r24, 0x0B	; 11
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     e72:	10 92 2b 02 	sts	0x022B, r1
     e76:	2d c0       	rjmp	.+90     	; 0xed2 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	80 93 bf 01 	sts	0x01BF, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     e7e:	10 92 09 02 	sts	0x0209, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     e82:	10 92 0a 02 	sts	0x020A, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     e86:	e0 91 c3 01 	lds	r30, 0x01C3
     e8a:	f0 91 c4 01 	lds	r31, 0x01C4
     e8e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     e90:	80 91 0a 02 	lds	r24, 0x020A
     e94:	88 23       	and	r24, r24
     e96:	29 f4       	brne	.+10     	; 0xea2 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 0a 02 	sts	0x020A, r24
        twi_txBuffer[0] = 0x00;
     e9e:	10 92 e9 01 	sts	0x01E9, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     ea2:	90 91 09 02 	lds	r25, 0x0209
     ea6:	e9 2f       	mov	r30, r25
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	e7 51       	subi	r30, 0x17	; 23
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	80 81       	ld	r24, Z
     eb0:	80 93 bb 00 	sts	0x00BB, r24
     eb4:	9f 5f       	subi	r25, 0xFF	; 255
     eb6:	90 93 09 02 	sts	0x0209, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     eba:	90 91 09 02 	lds	r25, 0x0209
     ebe:	80 91 0a 02 	lds	r24, 0x020A
     ec2:	98 17       	cp	r25, r24
     ec4:	10 f4       	brcc	.+4      	; 0xeca <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     ec6:	85 ec       	ldi	r24, 0xC5	; 197
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     eca:	85 e8       	ldi	r24, 0x85	; 133
     ecc:	80 93 bc 00 	sts	0x00BC, r24
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     ed2:	85 ec       	ldi	r24, 0xC5	; 197
     ed4:	80 93 bc 00 	sts	0x00BC, r24
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     eda:	10 92 2c 02 	sts	0x022C, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     ede:	85 ed       	ldi	r24, 0xD5	; 213
     ee0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     ee4:	80 91 bc 00 	lds	r24, 0x00BC
     ee8:	84 fd       	sbrc	r24, 4
     eea:	fc cf       	rjmp	.-8      	; 0xee4 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     eec:	10 92 bf 01 	sts	0x01BF, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     f12:	10 92 bf 01 	sts	0x01BF, r1
  twi_sendStop = true;		// default value
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 93 c1 01 	sts	0x01C1, r24
  twi_inRepStart = false;
     f1c:	10 92 c2 01 	sts	0x01C2, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     f20:	82 e1       	ldi	r24, 0x12	; 18
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	0e 94 72 04 	call	0x8e4	; 0x8e4 <digitalWrite>
  digitalWrite(SCL, 1);
     f28:	83 e1       	ldi	r24, 0x13	; 19
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     f30:	e9 eb       	ldi	r30, 0xB9	; 185
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     f3a:	80 81       	ld	r24, Z
     f3c:	8d 7f       	andi	r24, 0xFD	; 253
     f3e:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     f40:	88 e4       	ldi	r24, 0x48	; 72
     f42:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     f46:	85 e4       	ldi	r24, 0x45	; 69
     f48:	80 93 bc 00 	sts	0x00BC, r24
}
     f4c:	08 95       	ret

00000f4e <memcpy>:
     f4e:	fb 01       	movw	r30, r22
     f50:	dc 01       	movw	r26, r24
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <memcpy+0xa>
     f54:	01 90       	ld	r0, Z+
     f56:	0d 92       	st	X+, r0
     f58:	41 50       	subi	r20, 0x01	; 1
     f5a:	50 40       	sbci	r21, 0x00	; 0
     f5c:	d8 f7       	brcc	.-10     	; 0xf54 <memcpy+0x6>
     f5e:	08 95       	ret

00000f60 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     f60:	08 95       	ret

00000f62 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     f62:	1f 92       	push	r1
     f64:	0f 92       	push	r0
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	0f 92       	push	r0
     f6a:	11 24       	eor	r1, r1
     f6c:	2f 93       	push	r18
     f6e:	3f 93       	push	r19
     f70:	4f 93       	push	r20
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     f7a:	80 91 c0 00 	lds	r24, 0x00C0
     f7e:	82 fd       	sbrc	r24, 2
     f80:	1d c0       	rjmp	.+58     	; 0xfbc <__vector_18+0x5a>
      unsigned char c = UDR0;
     f82:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     f86:	20 91 6d 02 	lds	r18, 0x026D
     f8a:	30 91 6e 02 	lds	r19, 0x026E

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	2f 73       	andi	r18, 0x3F	; 63
     f94:	30 70       	andi	r19, 0x00	; 0
     f96:	80 91 6f 02 	lds	r24, 0x026F
     f9a:	90 91 70 02 	lds	r25, 0x0270
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
     fa4:	e0 91 6d 02 	lds	r30, 0x026D
     fa8:	f0 91 6e 02 	lds	r31, 0x026E
     fac:	e3 5d       	subi	r30, 0xD3	; 211
     fae:	fd 4f       	sbci	r31, 0xFD	; 253
     fb0:	40 83       	st	Z, r20
    buffer->head = i;
     fb2:	30 93 6e 02 	sts	0x026E, r19
     fb6:	20 93 6d 02 	sts	0x026D, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     fbc:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     fc0:	ff 91       	pop	r31
     fc2:	ef 91       	pop	r30
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     fd8:	e0 91 c1 02 	lds	r30, 0x02C1
     fdc:	f0 91 c2 02 	lds	r31, 0x02C2
     fe0:	e0 5c       	subi	r30, 0xC0	; 192
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	81 91       	ld	r24, Z+
     fe6:	91 91       	ld	r25, Z+
     fe8:	20 81       	ld	r18, Z
     fea:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     fec:	82 1b       	sub	r24, r18
     fee:	93 0b       	sbc	r25, r19
     ff0:	8f 73       	andi	r24, 0x3F	; 63
     ff2:	90 70       	andi	r25, 0x00	; 0
     ff4:	89 2b       	or	r24, r25
     ff6:	11 f0       	breq	.+4      	; 0xffc <_Z14serialEventRunv+0x24>
     ff8:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z11serialEventv>
     ffc:	08 95       	ret

00000ffe <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1014:	20 91 b1 02 	lds	r18, 0x02B1
    1018:	30 91 b2 02 	lds	r19, 0x02B2
    101c:	80 91 b3 02 	lds	r24, 0x02B3
    1020:	90 91 b4 02 	lds	r25, 0x02B4
    1024:	28 17       	cp	r18, r24
    1026:	39 07       	cpc	r19, r25
    1028:	31 f4       	brne	.+12     	; 0x1036 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    102a:	80 91 c1 00 	lds	r24, 0x00C1
    102e:	8f 7d       	andi	r24, 0xDF	; 223
    1030:	80 93 c1 00 	sts	0x00C1, r24
    1034:	14 c0       	rjmp	.+40     	; 0x105e <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1036:	e0 91 b3 02 	lds	r30, 0x02B3
    103a:	f0 91 b4 02 	lds	r31, 0x02B4
    103e:	ef 58       	subi	r30, 0x8F	; 143
    1040:	fd 4f       	sbci	r31, 0xFD	; 253
    1042:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1044:	80 91 b3 02 	lds	r24, 0x02B3
    1048:	90 91 b4 02 	lds	r25, 0x02B4
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	8f 73       	andi	r24, 0x3F	; 63
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	90 93 b4 02 	sts	0x02B4, r25
    1056:	80 93 b3 02 	sts	0x02B3, r24
	
  #if defined(UDR0)
    UDR0 = c;
    105a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	3f 91       	pop	r19
    1068:	2f 91       	pop	r18
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	ec 01       	movw	r28, r24
    1088:	7a 01       	movw	r14, r20
    108a:	8b 01       	movw	r16, r22
    108c:	dd 24       	eor	r13, r13
    108e:	40 30       	cpi	r20, 0x00	; 0
    1090:	81 ee       	ldi	r24, 0xE1	; 225
    1092:	58 07       	cpc	r21, r24
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	68 07       	cpc	r22, r24
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	78 07       	cpc	r23, r24
    109c:	11 f0       	breq	.+4      	; 0x10a2 <_ZN14HardwareSerial5beginEm+0x2e>
    109e:	dd 24       	eor	r13, r13
    10a0:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	a9 2e       	mov	r10, r25
    10a6:	b1 2c       	mov	r11, r1
    10a8:	ec 89       	ldd	r30, Y+20	; 0x14
    10aa:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    10ac:	dd 20       	and	r13, r13
    10ae:	69 f0       	breq	.+26     	; 0x10ca <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    10b0:	c5 01       	movw	r24, r10
    10b2:	08 a0       	ldd	r0, Y+32	; 0x20
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <_ZN14HardwareSerial5beginEm+0x46>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <_ZN14HardwareSerial5beginEm+0x42>
    10be:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	79 e0       	ldi	r23, 0x09	; 9
    10c4:	8d e3       	ldi	r24, 0x3D	; 61
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    10ca:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    10cc:	60 e8       	ldi	r22, 0x80	; 128
    10ce:	74 e8       	ldi	r23, 0x84	; 132
    10d0:	8e e1       	ldi	r24, 0x1E	; 30
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a8 01       	movw	r20, r16
    10d6:	97 01       	movw	r18, r14
    10d8:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__udivmodsi4>
    10dc:	21 50       	subi	r18, 0x01	; 1
    10de:	30 40       	sbci	r19, 0x00	; 0
    10e0:	40 40       	sbci	r20, 0x00	; 0
    10e2:	50 40       	sbci	r21, 0x00	; 0
    10e4:	56 95       	lsr	r21
    10e6:	47 95       	ror	r20
    10e8:	37 95       	ror	r19
    10ea:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    10ec:	80 e1       	ldi	r24, 0x10	; 16
    10ee:	20 30       	cpi	r18, 0x00	; 0
    10f0:	38 07       	cpc	r19, r24
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <_ZN14HardwareSerial5beginEm+0x88>
    10f4:	dd 20       	and	r13, r13
    10f6:	11 f0       	breq	.+4      	; 0x10fc <_ZN14HardwareSerial5beginEm+0x88>
    10f8:	dd 24       	eor	r13, r13
    10fa:	d6 cf       	rjmp	.-84     	; 0x10a8 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    10fc:	e8 89       	ldd	r30, Y+16	; 0x10
    10fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1100:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1102:	ea 89       	ldd	r30, Y+18	; 0x12
    1104:	fb 89       	ldd	r31, Y+19	; 0x13
    1106:	20 83       	st	Z, r18

  transmitting = false;
    1108:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    110a:	ee 89       	ldd	r30, Y+22	; 0x16
    110c:	ff 89       	ldd	r31, Y+23	; 0x17
    110e:	40 81       	ld	r20, Z
    1110:	21 e0       	ldi	r18, 0x01	; 1
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	c9 01       	movw	r24, r18
    1116:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1118:	02 c0       	rjmp	.+4      	; 0x111e <_ZN14HardwareSerial5beginEm+0xaa>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <_ZN14HardwareSerial5beginEm+0xa6>
    1122:	48 2b       	or	r20, r24
    1124:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1126:	ee 89       	ldd	r30, Y+22	; 0x16
    1128:	ff 89       	ldd	r31, Y+23	; 0x17
    112a:	40 81       	ld	r20, Z
    112c:	c9 01       	movw	r24, r18
    112e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <_ZN14HardwareSerial5beginEm+0xc2>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <_ZN14HardwareSerial5beginEm+0xbe>
    113a:	48 2b       	or	r20, r24
    113c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    113e:	ee 89       	ldd	r30, Y+22	; 0x16
    1140:	ff 89       	ldd	r31, Y+23	; 0x17
    1142:	40 81       	ld	r20, Z
    1144:	c9 01       	movw	r24, r18
    1146:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1148:	02 c0       	rjmp	.+4      	; 0x114e <_ZN14HardwareSerial5beginEm+0xda>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <_ZN14HardwareSerial5beginEm+0xd6>
    1152:	48 2b       	or	r20, r24
    1154:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1156:	ee 89       	ldd	r30, Y+22	; 0x16
    1158:	ff 89       	ldd	r31, Y+23	; 0x17
    115a:	80 81       	ld	r24, Z
    115c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <_ZN14HardwareSerial5beginEm+0xf0>
    1160:	22 0f       	add	r18, r18
    1162:	33 1f       	adc	r19, r19
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <_ZN14HardwareSerial5beginEm+0xec>
    1168:	20 95       	com	r18
    116a:	28 23       	and	r18, r24
    116c:	20 83       	st	Z, r18
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	df 90       	pop	r13
    117c:	bf 90       	pop	r11
    117e:	af 90       	pop	r10
    1180:	08 95       	ret

00001182 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1182:	dc 01       	movw	r26, r24
    1184:	1c 96       	adiw	r26, 0x0c	; 12
    1186:	ed 91       	ld	r30, X+
    1188:	fc 91       	ld	r31, X
    118a:	1d 97       	sbiw	r26, 0x0d	; 13
    118c:	e0 5c       	subi	r30, 0xC0	; 192
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	21 91       	ld	r18, Z+
    1192:	31 91       	ld	r19, Z+
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	28 1b       	sub	r18, r24
    119a:	39 0b       	sbc	r19, r25
    119c:	2f 73       	andi	r18, 0x3F	; 63
    119e:	30 70       	andi	r19, 0x00	; 0
}
    11a0:	c9 01       	movw	r24, r18
    11a2:	08 95       	ret

000011a4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    11a4:	dc 01       	movw	r26, r24
    11a6:	1c 96       	adiw	r26, 0x0c	; 12
    11a8:	ed 91       	ld	r30, X+
    11aa:	fc 91       	ld	r31, X
    11ac:	1d 97       	sbiw	r26, 0x0d	; 13
    11ae:	e0 5c       	subi	r30, 0xC0	; 192
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	20 81       	ld	r18, Z
    11b4:	31 81       	ldd	r19, Z+1	; 0x01
    11b6:	e0 54       	subi	r30, 0x40	; 64
    11b8:	f0 40       	sbci	r31, 0x00	; 0
    11ba:	df 01       	movw	r26, r30
    11bc:	ae 5b       	subi	r26, 0xBE	; 190
    11be:	bf 4f       	sbci	r27, 0xFF	; 255
    11c0:	8d 91       	ld	r24, X+
    11c2:	9c 91       	ld	r25, X
    11c4:	11 97       	sbiw	r26, 0x01	; 1
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	19 f4       	brne	.+6      	; 0x11d2 <_ZN14HardwareSerial4peekEv+0x2e>
    11cc:	2f ef       	ldi	r18, 0xFF	; 255
    11ce:	3f ef       	ldi	r19, 0xFF	; 255
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    11d2:	8d 91       	ld	r24, X+
    11d4:	9c 91       	ld	r25, X
    11d6:	e8 0f       	add	r30, r24
    11d8:	f9 1f       	adc	r31, r25
    11da:	80 81       	ld	r24, Z
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    11e0:	c9 01       	movw	r24, r18
    11e2:	08 95       	ret

000011e4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    11e4:	dc 01       	movw	r26, r24
    11e6:	1c 96       	adiw	r26, 0x0c	; 12
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	1d 97       	sbiw	r26, 0x0d	; 13
    11ee:	e0 5c       	subi	r30, 0xC0	; 192
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	20 81       	ld	r18, Z
    11f4:	31 81       	ldd	r19, Z+1	; 0x01
    11f6:	e0 54       	subi	r30, 0x40	; 64
    11f8:	f0 40       	sbci	r31, 0x00	; 0
    11fa:	df 01       	movw	r26, r30
    11fc:	ae 5b       	subi	r26, 0xBE	; 190
    11fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1200:	8d 91       	ld	r24, X+
    1202:	9c 91       	ld	r25, X
    1204:	11 97       	sbiw	r26, 0x01	; 1
    1206:	28 17       	cp	r18, r24
    1208:	39 07       	cpc	r19, r25
    120a:	19 f4       	brne	.+6      	; 0x1212 <_ZN14HardwareSerial4readEv+0x2e>
    120c:	2f ef       	ldi	r18, 0xFF	; 255
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	10 c0       	rjmp	.+32     	; 0x1232 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1212:	8d 91       	ld	r24, X+
    1214:	9c 91       	ld	r25, X
    1216:	11 97       	sbiw	r26, 0x01	; 1
    1218:	e8 0f       	add	r30, r24
    121a:	f9 1f       	adc	r31, r25
    121c:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    121e:	8d 91       	ld	r24, X+
    1220:	9c 91       	ld	r25, X
    1222:	11 97       	sbiw	r26, 0x01	; 1
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	8f 73       	andi	r24, 0x3F	; 63
    1228:	90 70       	andi	r25, 0x00	; 0
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
    return c;
    1230:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1232:	c9 01       	movw	r24, r18
    1234:	08 95       	ret

00001236 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    1236:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    1238:	91 96       	adiw	r26, 0x21	; 33
    123a:	8c 91       	ld	r24, X
    123c:	91 97       	sbiw	r26, 0x21	; 33
    123e:	88 23       	and	r24, r24
    1240:	39 f0       	breq	.+14     	; 0x1250 <_ZN14HardwareSerial5flushEv+0x1a>
    1242:	54 96       	adiw	r26, 0x14	; 20
    1244:	ed 91       	ld	r30, X+
    1246:	fc 91       	ld	r31, X
    1248:	55 97       	sbiw	r26, 0x15	; 21
    124a:	80 81       	ld	r24, Z
    124c:	86 ff       	sbrs	r24, 6
    124e:	f9 cf       	rjmp	.-14     	; 0x1242 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    1250:	91 96       	adiw	r26, 0x21	; 33
    1252:	1c 92       	st	X, r1
}
    1254:	08 95       	ret

00001256 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    125c:	ee 85       	ldd	r30, Y+14	; 0x0e
    125e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1260:	e0 5c       	subi	r30, 0xC0	; 192
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	20 81       	ld	r18, Z
    1266:	31 81       	ldd	r19, Z+1	; 0x01
    1268:	e0 54       	subi	r30, 0x40	; 64
    126a:	f0 40       	sbci	r31, 0x00	; 0
    126c:	2f 5f       	subi	r18, 0xFF	; 255
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	2f 73       	andi	r18, 0x3F	; 63
    1272:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1274:	df 01       	movw	r26, r30
    1276:	ae 5b       	subi	r26, 0xBE	; 190
    1278:	bf 4f       	sbci	r27, 0xFF	; 255
    127a:	8d 91       	ld	r24, X+
    127c:	9c 91       	ld	r25, X
    127e:	11 97       	sbiw	r26, 0x01	; 1
    1280:	28 17       	cp	r18, r24
    1282:	39 07       	cpc	r19, r25
    1284:	d1 f3       	breq	.-12     	; 0x127a <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1286:	e0 5c       	subi	r30, 0xC0	; 192
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	80 81       	ld	r24, Z
    128c:	91 81       	ldd	r25, Z+1	; 0x01
    128e:	e0 54       	subi	r30, 0x40	; 64
    1290:	f0 40       	sbci	r31, 0x00	; 0
    1292:	e8 0f       	add	r30, r24
    1294:	f9 1f       	adc	r31, r25
    1296:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1298:	ee 85       	ldd	r30, Y+14	; 0x0e
    129a:	ff 85       	ldd	r31, Y+15	; 0x0f
    129c:	e0 5c       	subi	r30, 0xC0	; 192
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	31 83       	std	Z+1, r19	; 0x01
    12a2:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    12a4:	ee 89       	ldd	r30, Y+22	; 0x16
    12a6:	ff 89       	ldd	r31, Y+23	; 0x17
    12a8:	20 81       	ld	r18, Z
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0f 8c       	ldd	r0, Y+31	; 0x1f
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <_ZN14HardwareSerial5writeEh+0x60>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <_ZN14HardwareSerial5writeEh+0x5c>
    12ba:	28 2b       	or	r18, r24
    12bc:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    12c2:	ec 89       	ldd	r30, Y+20	; 0x14
    12c4:	fd 89       	ldd	r31, Y+21	; 0x15
    12c6:	80 81       	ld	r24, Z
    12c8:	80 64       	ori	r24, 0x40	; 64
    12ca:	80 83       	st	Z, r24
  
  return 1;
}
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    12d6:	10 92 b8 02 	sts	0x02B8, r1
    12da:	10 92 b7 02 	sts	0x02B7, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    12de:	88 ee       	ldi	r24, 0xE8	; 232
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	80 93 b9 02 	sts	0x02B9, r24
    12ea:	90 93 ba 02 	sts	0x02BA, r25
    12ee:	a0 93 bb 02 	sts	0x02BB, r26
    12f2:	b0 93 bc 02 	sts	0x02BC, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    12f6:	88 e8       	ldi	r24, 0x88	; 136
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	90 93 b6 02 	sts	0x02B6, r25
    12fe:	80 93 b5 02 	sts	0x02B5, r24
{
  _rx_buffer = rx_buffer;
    1302:	8d e2       	ldi	r24, 0x2D	; 45
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	90 93 c2 02 	sts	0x02C2, r25
    130a:	80 93 c1 02 	sts	0x02C1, r24
  _tx_buffer = tx_buffer;
    130e:	81 e7       	ldi	r24, 0x71	; 113
    1310:	92 e0       	ldi	r25, 0x02	; 2
    1312:	90 93 c4 02 	sts	0x02C4, r25
    1316:	80 93 c3 02 	sts	0x02C3, r24
  _ubrrh = ubrrh;
    131a:	85 ec       	ldi	r24, 0xC5	; 197
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	90 93 c6 02 	sts	0x02C6, r25
    1322:	80 93 c5 02 	sts	0x02C5, r24
  _ubrrl = ubrrl;
    1326:	84 ec       	ldi	r24, 0xC4	; 196
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	90 93 c8 02 	sts	0x02C8, r25
    132e:	80 93 c7 02 	sts	0x02C7, r24
  _ucsra = ucsra;
    1332:	80 ec       	ldi	r24, 0xC0	; 192
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	90 93 ca 02 	sts	0x02CA, r25
    133a:	80 93 c9 02 	sts	0x02C9, r24
  _ucsrb = ucsrb;
    133e:	81 ec       	ldi	r24, 0xC1	; 193
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	90 93 cc 02 	sts	0x02CC, r25
    1346:	80 93 cb 02 	sts	0x02CB, r24
  _ucsrc = ucsrc;
    134a:	82 ec       	ldi	r24, 0xC2	; 194
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	90 93 ce 02 	sts	0x02CE, r25
    1352:	80 93 cd 02 	sts	0x02CD, r24
  _udr = udr;
    1356:	86 ec       	ldi	r24, 0xC6	; 198
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	90 93 d0 02 	sts	0x02D0, r25
    135e:	80 93 cf 02 	sts	0x02CF, r24
  _rxen = rxen;
    1362:	84 e0       	ldi	r24, 0x04	; 4
    1364:	80 93 d1 02 	sts	0x02D1, r24
  _txen = txen;
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	80 93 d2 02 	sts	0x02D2, r24
  _rxcie = rxcie;
    136e:	87 e0       	ldi	r24, 0x07	; 7
    1370:	80 93 d3 02 	sts	0x02D3, r24
  _udrie = udrie;
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	80 93 d4 02 	sts	0x02D4, r24
  _u2x = u2x;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 d5 02 	sts	0x02D5, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1380:	08 95       	ret

00001382 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    1382:	88 e9       	ldi	r24, 0x98	; 152
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	90 93 d8 02 	sts	0x02D8, r25
    138a:	80 93 d7 02 	sts	0x02D7, r24
{
    _address[0] = first_octet;
    138e:	10 92 d9 02 	sts	0x02D9, r1
    _address[1] = second_octet;
    1392:	10 92 da 02 	sts	0x02DA, r1
    _address[2] = third_octet;
    1396:	10 92 db 02 	sts	0x02DB, r1
    _address[3] = fourth_octet;
    139a:	10 92 dc 02 	sts	0x02DC, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    139e:	08 95       	ret

000013a0 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    13a0:	8f 92       	push	r8
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	4c 01       	movw	r8, r24
    13ba:	6b 01       	movw	r12, r22
    13bc:	7c 01       	movw	r14, r24
    13be:	aa 24       	eor	r10, r10
    13c0:	bb 24       	eor	r11, r11
    13c2:	c0 e0       	ldi	r28, 0x00	; 0
    13c4:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    13c6:	c6 01       	movw	r24, r12
    13c8:	f7 01       	movw	r30, r14
    13ca:	62 81       	ldd	r22, Z+2	; 0x02
    13cc:	4a e0       	ldi	r20, 0x0A	; 10
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN5Print5printEhi>
    13d4:	8c 01       	movw	r16, r24
        n += p.print('.');
    13d6:	c6 01       	movw	r24, r12
    13d8:	6e e2       	ldi	r22, 0x2E	; 46
    13da:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    13de:	08 0f       	add	r16, r24
    13e0:	19 1f       	adc	r17, r25
        n += p.print('.');
    13e2:	a0 0e       	add	r10, r16
    13e4:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    13e6:	21 96       	adiw	r28, 0x01	; 1
    13e8:	08 94       	sec
    13ea:	e1 1c       	adc	r14, r1
    13ec:	f1 1c       	adc	r15, r1
    13ee:	c3 30       	cpi	r28, 0x03	; 3
    13f0:	d1 05       	cpc	r29, r1
    13f2:	49 f7       	brne	.-46     	; 0x13c6 <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    13f4:	c6 01       	movw	r24, r12
    13f6:	f4 01       	movw	r30, r8
    13f8:	65 81       	ldd	r22, Z+5	; 0x05
    13fa:	4a e0       	ldi	r20, 0x0A	; 10
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN5Print5printEhi>
    1402:	95 01       	movw	r18, r10
    1404:	28 0f       	add	r18, r24
    1406:	39 1f       	adc	r19, r25
    return n;
}
    1408:	c9 01       	movw	r24, r18
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	df 90       	pop	r13
    1418:	cf 90       	pop	r12
    141a:	bf 90       	pop	r11
    141c:	af 90       	pop	r10
    141e:	9f 90       	pop	r9
    1420:	8f 90       	pop	r8
    1422:	08 95       	ret

00001424 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	7c 01       	movw	r14, r24
    1436:	6b 01       	movw	r12, r22
    1438:	8a 01       	movw	r16, r20
    143a:	c0 e0       	ldi	r28, 0x00	; 0
    143c:	d0 e0       	ldi	r29, 0x00	; 0
    143e:	0f c0       	rjmp	.+30     	; 0x145e <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1440:	d6 01       	movw	r26, r12
    1442:	6d 91       	ld	r22, X+
    1444:	6d 01       	movw	r12, r26
    1446:	d7 01       	movw	r26, r14
    1448:	ed 91       	ld	r30, X+
    144a:	fc 91       	ld	r31, X
    144c:	01 90       	ld	r0, Z+
    144e:	f0 81       	ld	r31, Z
    1450:	e0 2d       	mov	r30, r0
    1452:	c7 01       	movw	r24, r14
    1454:	09 95       	icall
    1456:	c8 0f       	add	r28, r24
    1458:	d9 1f       	adc	r29, r25
    145a:	01 50       	subi	r16, 0x01	; 1
    145c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    145e:	01 15       	cp	r16, r1
    1460:	11 05       	cpc	r17, r1
    1462:	71 f7       	brne	.-36     	; 0x1440 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1464:	ce 01       	movw	r24, r28
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	08 95       	ret

00001478 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    1478:	dc 01       	movw	r26, r24
{
  return write(c);
    147a:	ed 91       	ld	r30, X+
    147c:	fc 91       	ld	r31, X
    147e:	01 90       	ld	r0, Z+
    1480:	f0 81       	ld	r31, Z
    1482:	e0 2d       	mov	r30, r0
    1484:	09 95       	icall
}
    1486:	08 95       	ret

00001488 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1492:	dc 01       	movw	r26, r24
    1494:	ed 91       	ld	r30, X+
    1496:	fc 91       	ld	r31, X
    1498:	01 90       	ld	r0, Z+
    149a:	f0 81       	ld	r31, Z
    149c:	e0 2d       	mov	r30, r0
    149e:	6d e0       	ldi	r22, 0x0D	; 13
    14a0:	09 95       	icall
    14a2:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    14a4:	d8 01       	movw	r26, r16
    14a6:	ed 91       	ld	r30, X+
    14a8:	fc 91       	ld	r31, X
    14aa:	01 90       	ld	r0, Z+
    14ac:	f0 81       	ld	r31, Z
    14ae:	e0 2d       	mov	r30, r0
    14b0:	c8 01       	movw	r24, r16
    14b2:	6a e0       	ldi	r22, 0x0A	; 10
    14b4:	09 95       	icall
    14b6:	9c 01       	movw	r18, r24
    14b8:	2e 0d       	add	r18, r14
    14ba:	3f 1d       	adc	r19, r15
    14bc:	c9 01       	movw	r24, r18
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	08 95       	ret

000014c8 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    14ce:	61 15       	cp	r22, r1
    14d0:	71 05       	cpc	r23, r1
    14d2:	19 f4       	brne	.+6      	; 0x14da <_ZN5Print5writeEPKc+0x12>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    14da:	db 01       	movw	r26, r22
    14dc:	0d 90       	ld	r0, X+
    14de:	00 20       	and	r0, r0
    14e0:	e9 f7       	brne	.-6      	; 0x14dc <_ZN5Print5writeEPKc+0x14>
    14e2:	11 97       	sbiw	r26, 0x01	; 1
    14e4:	a6 1b       	sub	r26, r22
    14e6:	b7 0b       	sbc	r27, r23
    14e8:	e8 81       	ld	r30, Y
    14ea:	f9 81       	ldd	r31, Y+1	; 0x01
    14ec:	02 80       	ldd	r0, Z+2	; 0x02
    14ee:	f3 81       	ldd	r31, Z+3	; 0x03
    14f0:	e0 2d       	mov	r30, r0
    14f2:	ad 01       	movw	r20, r26
    14f4:	09 95       	icall
    14f6:	9c 01       	movw	r18, r24
    }
    14f8:	c9 01       	movw	r24, r18
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1500:	4f 92       	push	r4
    1502:	5f 92       	push	r5
    1504:	7f 92       	push	r7
    1506:	8f 92       	push	r8
    1508:	9f 92       	push	r9
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	a1 97       	sbiw	r28, 0x21	; 33
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	2c 01       	movw	r4, r24
    1530:	74 2e       	mov	r7, r20
    1532:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	08 f4       	brcc	.+2      	; 0x153a <_ZN5Print11printNumberEmh+0x3a>
    1538:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    153a:	19 a2       	std	Y+33, r1	; 0x21
    153c:	31 e2       	ldi	r19, 0x21	; 33
    153e:	c3 2e       	mov	r12, r19
    1540:	d1 2c       	mov	r13, r1
    1542:	cc 0e       	add	r12, r28
    1544:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1546:	82 2e       	mov	r8, r18
    1548:	99 24       	eor	r9, r9
    154a:	aa 24       	eor	r10, r10
    154c:	bb 24       	eor	r11, r11
    154e:	67 2d       	mov	r22, r7
    1550:	75 2f       	mov	r23, r21
    1552:	a5 01       	movw	r20, r10
    1554:	94 01       	movw	r18, r8
    1556:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__udivmodsi4>
    155a:	79 01       	movw	r14, r18
    155c:	8a 01       	movw	r16, r20
    char c = m - base * n;
    155e:	c8 01       	movw	r24, r16
    1560:	b7 01       	movw	r22, r14
    1562:	a5 01       	movw	r20, r10
    1564:	94 01       	movw	r18, r8
    1566:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__mulsi3>
    156a:	47 2d       	mov	r20, r7
    156c:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    156e:	08 94       	sec
    1570:	c1 08       	sbc	r12, r1
    1572:	d1 08       	sbc	r13, r1
    1574:	4a 30       	cpi	r20, 0x0A	; 10
    1576:	14 f4       	brge	.+4      	; 0x157c <_ZN5Print11printNumberEmh+0x7c>
    1578:	40 5d       	subi	r20, 0xD0	; 208
    157a:	01 c0       	rjmp	.+2      	; 0x157e <_ZN5Print11printNumberEmh+0x7e>
    157c:	49 5c       	subi	r20, 0xC9	; 201
    157e:	f6 01       	movw	r30, r12
    1580:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1582:	e1 14       	cp	r14, r1
    1584:	f1 04       	cpc	r15, r1
    1586:	01 05       	cpc	r16, r1
    1588:	11 05       	cpc	r17, r1
    158a:	21 f0       	breq	.+8      	; 0x1594 <_ZN5Print11printNumberEmh+0x94>
    158c:	7e 2c       	mov	r7, r14
    158e:	5f 2d       	mov	r21, r15
    1590:	c8 01       	movw	r24, r16
    1592:	dd cf       	rjmp	.-70     	; 0x154e <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1594:	c2 01       	movw	r24, r4
    1596:	b6 01       	movw	r22, r12
    1598:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN5Print5writeEPKc>
}
    159c:	a1 96       	adiw	r28, 0x21	; 33
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	9f 90       	pop	r9
    15be:	8f 90       	pop	r8
    15c0:	7f 90       	pop	r7
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	08 95       	ret

000015c8 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    15c8:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    15ca:	21 15       	cp	r18, r1
    15cc:	31 05       	cpc	r19, r1
    15ce:	41 f4       	brne	.+16     	; 0x15e0 <_ZN5Print5printEmi+0x18>
    15d0:	ed 91       	ld	r30, X+
    15d2:	fc 91       	ld	r31, X
    15d4:	01 90       	ld	r0, Z+
    15d6:	f0 81       	ld	r31, Z
    15d8:	e0 2d       	mov	r30, r0
    15da:	64 2f       	mov	r22, r20
    15dc:	09 95       	icall
    15de:	08 95       	ret
  else return printNumber(n, base);
    15e0:	0e 94 80 0a 	call	0x1500	; 0x1500 <_ZN5Print11printNumberEmh>
}
    15e4:	08 95       	ret

000015e6 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    15f0:	e6 2e       	mov	r14, r22
    15f2:	ff 24       	eor	r15, r15
    15f4:	00 e0       	ldi	r16, 0x00	; 0
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	b8 01       	movw	r22, r16
    15fa:	a7 01       	movw	r20, r14
    15fc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN5Print5printEmi>
}
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	08 95       	ret

0000160a <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	ec 01       	movw	r28, r24
    161c:	6a 01       	movw	r12, r20
    161e:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    1620:	21 15       	cp	r18, r1
    1622:	31 05       	cpc	r19, r1
    1624:	41 f4       	brne	.+16     	; 0x1636 <_ZN5Print5printEli+0x2c>
    return write(n);
    1626:	e8 81       	ld	r30, Y
    1628:	f9 81       	ldd	r31, Y+1	; 0x01
    162a:	01 90       	ld	r0, Z+
    162c:	f0 81       	ld	r31, Z
    162e:	e0 2d       	mov	r30, r0
    1630:	64 2f       	mov	r22, r20
    1632:	09 95       	icall
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    1636:	2a 30       	cpi	r18, 0x0A	; 10
    1638:	31 05       	cpc	r19, r1
    163a:	d1 f4       	brne	.+52     	; 0x1670 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    163c:	77 ff       	sbrs	r23, 7
    163e:	17 c0       	rjmp	.+46     	; 0x166e <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1640:	e8 81       	ld	r30, Y
    1642:	f9 81       	ldd	r31, Y+1	; 0x01
    1644:	01 90       	ld	r0, Z+
    1646:	f0 81       	ld	r31, Z
    1648:	e0 2d       	mov	r30, r0
    164a:	6d e2       	ldi	r22, 0x2D	; 45
    164c:	09 95       	icall
    164e:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    1650:	44 27       	eor	r20, r20
    1652:	55 27       	eor	r21, r21
    1654:	ba 01       	movw	r22, r20
    1656:	4c 19       	sub	r20, r12
    1658:	5d 09       	sbc	r21, r13
    165a:	6e 09       	sbc	r22, r14
    165c:	7f 09       	sbc	r23, r15
    165e:	ce 01       	movw	r24, r28
    1660:	2a e0       	ldi	r18, 0x0A	; 10
    1662:	0e 94 80 0a 	call	0x1500	; 0x1500 <_ZN5Print11printNumberEmh>
    1666:	98 01       	movw	r18, r16
    1668:	28 0f       	add	r18, r24
    166a:	39 1f       	adc	r19, r25
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    166e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1670:	0e 94 80 0a 	call	0x1500	; 0x1500 <_ZN5Print11printNumberEmh>
    1674:	9c 01       	movw	r18, r24
  }
}
    1676:	c9 01       	movw	r24, r18
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	08 95       	ret

0000168a <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	7b 01       	movw	r14, r22
    1694:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    1696:	00 27       	eor	r16, r16
    1698:	f7 fc       	sbrc	r15, 7
    169a:	00 95       	com	r16
    169c:	10 2f       	mov	r17, r16
    169e:	b8 01       	movw	r22, r16
    16a0:	a7 01       	movw	r20, r14
    16a2:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN5Print5printEli>
}
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	08 95       	ret

000016b0 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	6c 01       	movw	r12, r24
    16be:	7b 01       	movw	r14, r22
    16c0:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    16c2:	00 27       	eor	r16, r16
    16c4:	f7 fc       	sbrc	r15, 7
    16c6:	00 95       	com	r16
    16c8:	10 2f       	mov	r17, r16
    16ca:	b8 01       	movw	r22, r16
    16cc:	a7 01       	movw	r20, r14
    16ce:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN5Print5printEli>
    16d2:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    16d4:	c6 01       	movw	r24, r12
    16d6:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN5Print7printlnEv>
    16da:	08 0f       	add	r16, r24
    16dc:	19 1f       	adc	r17, r25
  return n;
}
    16de:	c8 01       	movw	r24, r16
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	08 95       	ret

000016ee <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    16ee:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN5Print5writeEPKc>
}
    16f2:	08 95       	ret

000016f4 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    16f4:	ef 92       	push	r14
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    16fe:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN5Print5writeEPKc>
    1702:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1704:	c7 01       	movw	r24, r14
    1706:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN5Print7printlnEv>
    170a:	08 0f       	add	r16, r24
    170c:	19 1f       	adc	r17, r25
  return n;
}
    170e:	c8 01       	movw	r24, r16
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	08 95       	ret

0000171a <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	41 f0       	breq	.+16     	; 0x172e <_Z12disableTimerh+0x14>
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	18 f0       	brcs	.+6      	; 0x1728 <_Z12disableTimerh+0xe>
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	d1 f4       	brne	.+52     	; 0x175a <_Z12disableTimerh+0x40>
    1726:	09 c0       	rjmp	.+18     	; 0x173a <_Z12disableTimerh+0x20>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1728:	10 92 6e 00 	sts	0x006E, r1
    172c:	08 95       	ret
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    172e:	80 91 6f 00 	lds	r24, 0x006F
    1732:	8d 7f       	andi	r24, 0xFD	; 253
    1734:	80 93 6f 00 	sts	0x006F, r24
    1738:	08 95       	ret
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    173a:	80 91 70 00 	lds	r24, 0x0070
    173e:	8d 7f       	andi	r24, 0xFD	; 253
    1740:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    174a:	80 91 b1 00 	lds	r24, 0x00B1
    174e:	88 7f       	andi	r24, 0xF8	; 248
    1750:	84 60       	ori	r24, 0x04	; 4
    1752:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1756:	10 92 b3 00 	sts	0x00B3, r1
    175a:	08 95       	ret

0000175c <_Z6noToneh>:
#endif
  }
}


void noTone(uint8_t _pin)
    175c:	1f 93       	push	r17
    175e:	18 2f       	mov	r17, r24
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1760:	80 91 75 01 	lds	r24, 0x0175
    1764:	81 17       	cp	r24, r17
    1766:	11 f0       	breq	.+4      	; 0x176c <_Z6noToneh+0x10>
    1768:	9f ef       	ldi	r25, 0xFF	; 255
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    176c:	e8 e6       	ldi	r30, 0x68	; 104
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	94 91       	lpm	r25, Z+
      tone_pins[i] = 255;
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	80 93 75 01 	sts	0x0175, r24
    }
  }
  
  disableTimer(_timer);
    1778:	89 2f       	mov	r24, r25
    177a:	0e 94 8d 0b 	call	0x171a	; 0x171a <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    177e:	81 2f       	mov	r24, r17
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	0e 94 72 04 	call	0x8e4	; 0x8e4 <digitalWrite>
}
    1786:	1f 91       	pop	r17
    1788:	08 95       	ret

0000178a <__vector_7>:
}
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
{

  if (timer2_toggle_count != 0)
    17ac:	80 91 dd 02 	lds	r24, 0x02DD
    17b0:	90 91 de 02 	lds	r25, 0x02DE
    17b4:	a0 91 df 02 	lds	r26, 0x02DF
    17b8:	b0 91 e0 02 	lds	r27, 0x02E0
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	a1 05       	cpc	r26, r1
    17c0:	b1 05       	cpc	r27, r1
    17c2:	51 f1       	breq	.+84     	; 0x1818 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    17c4:	e0 91 e1 02 	lds	r30, 0x02E1
    17c8:	f0 91 e2 02 	lds	r31, 0x02E2
    17cc:	80 81       	ld	r24, Z
    17ce:	90 91 e3 02 	lds	r25, 0x02E3
    17d2:	89 27       	eor	r24, r25
    17d4:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    17d6:	80 91 dd 02 	lds	r24, 0x02DD
    17da:	90 91 de 02 	lds	r25, 0x02DE
    17de:	a0 91 df 02 	lds	r26, 0x02DF
    17e2:	b0 91 e0 02 	lds	r27, 0x02E0
    17e6:	18 16       	cp	r1, r24
    17e8:	19 06       	cpc	r1, r25
    17ea:	1a 06       	cpc	r1, r26
    17ec:	1b 06       	cpc	r1, r27
    17ee:	c4 f4       	brge	.+48     	; 0x1820 <__vector_7+0x96>
      timer2_toggle_count--;
    17f0:	80 91 dd 02 	lds	r24, 0x02DD
    17f4:	90 91 de 02 	lds	r25, 0x02DE
    17f8:	a0 91 df 02 	lds	r26, 0x02DF
    17fc:	b0 91 e0 02 	lds	r27, 0x02E0
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	a1 09       	sbc	r26, r1
    1804:	b1 09       	sbc	r27, r1
    1806:	80 93 dd 02 	sts	0x02DD, r24
    180a:	90 93 de 02 	sts	0x02DE, r25
    180e:	a0 93 df 02 	sts	0x02DF, r26
    1812:	b0 93 e0 02 	sts	0x02E0, r27
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1818:	80 91 75 01 	lds	r24, 0x0175
    181c:	0e 94 ae 0b 	call	0x175c	; 0x175c <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <main>:
#include <Arduino.h>

int main(void)
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
{
	init();
    1846:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    184a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    184e:	cc ee       	ldi	r28, 0xEC	; 236
    1850:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    1852:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <loop>
		if (serialEventRun) serialEventRun();
    1856:	20 97       	sbiw	r28, 0x00	; 0
    1858:	e1 f3       	breq	.-8      	; 0x1852 <main+0x10>
    185a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z14serialEventRunv>
    185e:	f9 cf       	rjmp	.-14     	; 0x1852 <main+0x10>

00001860 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    1860:	0e 94 a7 01 	call	0x34e	; 0x34e <free>
}
    1864:	08 95       	ret

00001866 <_ZN12FirmataClass11systemResetEv>:
//******************************************************************************



// resets the system state upon a SYSTEM_RESET message from the host software
void FirmataClass::systemReset(void)
    1866:	fc 01       	movw	r30, r24
{
  byte i;

  waitForData = 0; // this flag says the next serial input will be data
    1868:	15 82       	std	Z+5, r1	; 0x05
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
    186a:	16 82       	std	Z+6, r1	; 0x06
  multiByteChannel = 0; // channel data for multiByteCommands
    186c:	17 82       	std	Z+7, r1	; 0x07
    186e:	dc 01       	movw	r26, r24
    1870:	80 e0       	ldi	r24, 0x00	; 0


  for(i=0; i<MAX_DATA_BYTES; i++) {
    storedInputData[i] = 0;
    1872:	18 96       	adiw	r26, 0x08	; 8
    1874:	1c 92       	st	X, r1
    1876:	18 97       	sbiw	r26, 0x08	; 8
  waitForData = 0; // this flag says the next serial input will be data
  executeMultiByteCommand = 0; // execute this after getting multi-byte data
  multiByteChannel = 0; // channel data for multiByteCommands


  for(i=0; i<MAX_DATA_BYTES; i++) {
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	11 96       	adiw	r26, 0x01	; 1
    187c:	80 32       	cpi	r24, 0x20	; 32
    187e:	c9 f7       	brne	.-14     	; 0x1872 <_ZN12FirmataClass11systemResetEv+0xc>
    storedInputData[i] = 0;
  }

  parsingSysex = false;
    1880:	10 a6       	std	Z+40, r1	; 0x28
  sysexBytesRead = 0;
    1882:	12 a6       	std	Z+42, r1	; 0x2a
    1884:	11 a6       	std	Z+41, r1	; 0x29

  if(currentSystemResetCallback)
    1886:	05 a8       	ldd	r0, Z+53	; 0x35
    1888:	f6 a9       	ldd	r31, Z+54	; 0x36
    188a:	e0 2d       	mov	r30, r0
    188c:	30 97       	sbiw	r30, 0x00	; 0
    188e:	09 f0       	breq	.+2      	; 0x1892 <_ZN12FirmataClass11systemResetEv+0x2c>
    (*currentSystemResetCallback)();
    1890:	09 95       	icall
    1892:	08 95       	ret

00001894 <_ZN12FirmataClassC1ER6Stream>:

//******************************************************************************
//* Constructors
//******************************************************************************

FirmataClass::FirmataClass(Stream &s) : FirmataSerial(s)
    1894:	fc 01       	movw	r30, r24
    1896:	71 83       	std	Z+1, r23	; 0x01
    1898:	60 83       	st	Z, r22
{
  firmwareVersionCount = 0;
    189a:	12 82       	std	Z+2, r1	; 0x02
  systemReset();
    189c:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN12FirmataClass11systemResetEv>
}
    18a0:	08 95       	ret

000018a2 <_GLOBAL__I__ZN12FirmataClass23sendValueAsTwo7bitBytesEi>:
  }
}


// make one instance for the user to use
FirmataClass Firmata(Serial);
    18a2:	84 ee       	ldi	r24, 0xE4	; 228
    18a4:	92 e0       	ldi	r25, 0x02	; 2
    18a6:	65 eb       	ldi	r22, 0xB5	; 181
    18a8:	72 e0       	ldi	r23, 0x02	; 2
    18aa:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN12FirmataClassC1ER6Stream>
    18ae:	08 95       	ret

000018b0 <_Z23activate_receiving_modev>:
	return msg;


}

void activate_receiving_mode(){
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17

	/*
		   *Activate receiver to listen to the channel
		   */

		  Wire.beginTransmission(113);
    18b4:	0d e6       	ldi	r16, 0x6D	; 109
    18b6:	13 e0       	ldi	r17, 0x03	; 3
    18b8:	c8 01       	movw	r24, r16
    18ba:	61 e7       	ldi	r22, 0x71	; 113
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN7TwoWire17beginTransmissionEi>
		  Wire.write(byte(0x00)); // Register 0 -> control register
    18c2:	c8 01       	movw	r24, r16
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN7TwoWire5writeEh>
		  Wire.write(byte(0x58)); // look
    18ca:	c8 01       	movw	r24, r16
    18cc:	68 e5       	ldi	r22, 0x58	; 88
    18ce:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN7TwoWire5writeEh>
		  Wire.endTransmission();
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN7TwoWire15endTransmissionEv>
		  delay(2);
    18d8:	62 e0       	ldi	r22, 0x02	; 2
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 95 03 	call	0x72a	; 0x72a <delay>
}
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	08 95       	ret

000018ea <_Z11receive_bitv>:
	  Serial.print("ControllerReadoutFirmware0: ");
	  Serial.println(controllerReadout);
	  controllerReadout=-1;
}

void receive_bit(){
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
	  /*
	   *	Received Impulses
	   */

	  Wire.beginTransmission(113);
    18ee:	8d e6       	ldi	r24, 0x6D	; 109
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	61 e7       	ldi	r22, 0x71	; 113
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN7TwoWire17beginTransmissionEi>
	  Wire.write(byte(0x00)); // Register 0 -> control register
    18fa:	8d e6       	ldi	r24, 0x6D	; 109
    18fc:	93 e0       	ldi	r25, 0x03	; 3
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN7TwoWire5writeEh>
	  Wire.endTransmission();
    1904:	8d e6       	ldi	r24, 0x6D	; 109
    1906:	93 e0       	ldi	r25, 0x03	; 3
    1908:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN7TwoWire15endTransmissionEv>
	  delay(2);
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 95 03 	call	0x72a	; 0x72a <delay>
    1918:	20 c0       	rjmp	.+64     	; 0x195a <_Z11receive_bitv+0x70>

	  while(controllerReadout==-1)
	    {


		  Wire.requestFrom(113,1);
    191a:	8d e6       	ldi	r24, 0x6D	; 109
    191c:	93 e0       	ldi	r25, 0x03	; 3
    191e:	61 e7       	ldi	r22, 0x71	; 113
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <_ZN7TwoWire11requestFromEii>
		  controllerReadout=Wire.read();
    192a:	8d e6       	ldi	r24, 0x6D	; 109
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_ZN7TwoWire4readEv>
    1932:	90 93 77 01 	sts	0x0177, r25
    1936:	80 93 76 01 	sts	0x0176, r24
		  Serial.print("ControllerReadoutFirmware: ");
    193a:	85 eb       	ldi	r24, 0xB5	; 181
    193c:	92 e0       	ldi	r25, 0x02	; 2
    193e:	61 e2       	ldi	r22, 0x21	; 33
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Print5printEPKc>
		  Serial.println(controllerReadout);
    1946:	60 91 76 01 	lds	r22, 0x0176
    194a:	70 91 77 01 	lds	r23, 0x0177
    194e:	85 eb       	ldi	r24, 0xB5	; 181
    1950:	92 e0       	ldi	r25, 0x02	; 2
    1952:	4a e0       	ldi	r20, 0x0A	; 10
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN5Print7printlnEii>
	  Wire.write(byte(0x00)); // Register 0 -> control register
	  Wire.endTransmission();
	  delay(2);


	  while(controllerReadout==-1)
    195a:	80 91 76 01 	lds	r24, 0x0176
    195e:	90 91 77 01 	lds	r25, 0x0177
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	c9 f2       	breq	.-78     	; 0x191a <_Z11receive_bitv+0x30>

	  /*
	   *  Pointer to Register 0x02
	   */

	  Wire.beginTransmission(113); // transmit to device #112
    1968:	8d e6       	ldi	r24, 0x6D	; 109
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	61 e7       	ldi	r22, 0x71	; 113
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN7TwoWire17beginTransmissionEi>
	  Wire.write(byte(0x02));      // sets register pointer to echo #1 register (0x02)
    1974:	8d e6       	ldi	r24, 0x6D	; 109
    1976:	93 e0       	ldi	r25, 0x03	; 3
    1978:	62 e0       	ldi	r22, 0x02	; 2
    197a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN7TwoWire5writeEh>
	  Wire.endTransmission();      // stop transmitting
    197e:	8d e6       	ldi	r24, 0x6D	; 109
    1980:	93 e0       	ldi	r25, 0x03	; 3
    1982:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN7TwoWire15endTransmissionEv>
	  delay(2);
    1986:	62 e0       	ldi	r22, 0x02	; 2
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 95 03 	call	0x72a	; 0x72a <delay>

	  /*
	   * Read values
	   */

	  Wire.requestFrom(113,2);
    1992:	8d e6       	ldi	r24, 0x6D	; 109
    1994:	93 e0       	ldi	r25, 0x03	; 3
    1996:	61 e7       	ldi	r22, 0x71	; 113
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	42 e0       	ldi	r20, 0x02	; 2
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <_ZN7TwoWire11requestFromEii>
	  reading=Wire.read();
    19a2:	8d e6       	ldi	r24, 0x6D	; 109
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_ZN7TwoWire4readEv>
	  reading = reading << 8;    // shift high byte to be high 8 bits
    19aa:	18 2f       	mov	r17, r24
    19ac:	00 e0       	ldi	r16, 0x00	; 0
    19ae:	10 93 20 03 	sts	0x0320, r17
    19b2:	00 93 1f 03 	sts	0x031F, r16
	  reading |= Wire.read();
    19b6:	8d e6       	ldi	r24, 0x6D	; 109
    19b8:	93 e0       	ldi	r25, 0x03	; 3
    19ba:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_ZN7TwoWire4readEv>
    19be:	08 2b       	or	r16, r24
    19c0:	19 2b       	or	r17, r25
    19c2:	10 93 20 03 	sts	0x0320, r17
    19c6:	00 93 1f 03 	sts	0x031F, r16
	  Serial.print("Seconds: ");
    19ca:	85 eb       	ldi	r24, 0xB5	; 181
    19cc:	92 e0       	ldi	r25, 0x02	; 2
    19ce:	6d e3       	ldi	r22, 0x3D	; 61
    19d0:	71 e0       	ldi	r23, 0x01	; 1
    19d2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Print5printEPKc>
	  Serial.println(reading);
    19d6:	60 91 1f 03 	lds	r22, 0x031F
    19da:	70 91 20 03 	lds	r23, 0x0320
    19de:	85 eb       	ldi	r24, 0xB5	; 181
    19e0:	92 e0       	ldi	r25, 0x02	; 2
    19e2:	4a e0       	ldi	r20, 0x0A	; 10
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN5Print7printlnEii>

	  Serial.print("DATA-BIT: ");
    19ea:	85 eb       	ldi	r24, 0xB5	; 181
    19ec:	92 e0       	ldi	r25, 0x02	; 2
    19ee:	67 e4       	ldi	r22, 0x47	; 71
    19f0:	71 e0       	ldi	r23, 0x01	; 1
    19f2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Print5printEPKc>
	  if(reading>11000)
    19f6:	80 91 1f 03 	lds	r24, 0x031F
    19fa:	90 91 20 03 	lds	r25, 0x0320
    19fe:	89 5f       	subi	r24, 0xF9	; 249
    1a00:	9a 42       	sbci	r25, 0x2A	; 42
    1a02:	2c f0       	brlt	.+10     	; 0x1a0e <_Z11receive_bitv+0x124>
	  	  {
		  Serial.println("0");
    1a04:	85 eb       	ldi	r24, 0xB5	; 181
    1a06:	92 e0       	ldi	r25, 0x02	; 2
    1a08:	62 e5       	ldi	r22, 0x52	; 82
    1a0a:	71 e0       	ldi	r23, 0x01	; 1
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <_Z11receive_bitv+0x12c>

	  	  }
	  else
	  {Serial.println("1");
    1a0e:	85 eb       	ldi	r24, 0xB5	; 181
    1a10:	92 e0       	ldi	r25, 0x02	; 2
    1a12:	64 e5       	ldi	r22, 0x54	; 84
    1a14:	71 e0       	ldi	r23, 0x01	; 1
    1a16:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN5Print7printlnEPKc>
	  }

	  Serial.println("*************");
    1a1a:	85 eb       	ldi	r24, 0xB5	; 181
    1a1c:	92 e0       	ldi	r25, 0x02	; 2
    1a1e:	66 e5       	ldi	r22, 0x56	; 86
    1a20:	71 e0       	ldi	r23, 0x01	; 1
    1a22:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN5Print7printlnEPKc>
}
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	08 95       	ret

00001a2c <_Z10send_bit_1v>:

void send_bit_0(){
	//do nothing
}

void send_bit_1(){
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
	  /*
	   *	Send 8 Impulses
	   */


	  Serial.println("PING");
    1a30:	85 eb       	ldi	r24, 0xB5	; 181
    1a32:	92 e0       	ldi	r25, 0x02	; 2
    1a34:	64 e6       	ldi	r22, 0x64	; 100
    1a36:	71 e0       	ldi	r23, 0x01	; 1
    1a38:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN5Print7printlnEPKc>
	  delay(5);
    1a3c:	65 e0       	ldi	r22, 0x05	; 5
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 95 03 	call	0x72a	; 0x72a <delay>
	  Wire.beginTransmission(112);
    1a48:	0d e6       	ldi	r16, 0x6D	; 109
    1a4a:	13 e0       	ldi	r17, 0x03	; 3
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	60 e7       	ldi	r22, 0x70	; 112
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN7TwoWire17beginTransmissionEi>
	  Wire.write(byte(0x00)); // Register 0 -> control register
    1a56:	c8 01       	movw	r24, r16
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN7TwoWire5writeEh>
	  Wire.write(byte(0x5C)); // Erzeugt einen 8 zyklischen 40khz Impuls/Ton
    1a5e:	c8 01       	movw	r24, r16
    1a60:	6c e5       	ldi	r22, 0x5C	; 92
    1a62:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN7TwoWire5writeEh>
	  Wire.endTransmission();
    1a66:	c8 01       	movw	r24, r16
    1a68:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZN7TwoWire15endTransmissionEv>

	  delay(2);
    1a6c:	62 e0       	ldi	r22, 0x02	; 2
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 95 03 	call	0x72a	; 0x72a <delay>


}
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	08 95       	ret

00001a7e <loop>:
}



void loop() {
	msg_bit=(*msg).nextBit();
    1a7e:	80 91 23 03 	lds	r24, 0x0323
    1a82:	90 91 24 03 	lds	r25, 0x0324
    1a86:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN7Message7nextBitEv>
    1a8a:	90 93 26 03 	sts	0x0326, r25
    1a8e:	80 93 25 03 	sts	0x0325, r24
	Serial.print("**p**");
    1a92:	85 eb       	ldi	r24, 0xB5	; 181
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	69 e6       	ldi	r22, 0x69	; 105
    1a98:	71 e0       	ldi	r23, 0x01	; 1
    1a9a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Print5printEPKc>
	Serial.println(msg_bit);
    1a9e:	60 91 25 03 	lds	r22, 0x0325
    1aa2:	70 91 26 03 	lds	r23, 0x0326
    1aa6:	85 eb       	ldi	r24, 0xB5	; 181
    1aa8:	92 e0       	ldi	r25, 0x02	; 2
    1aaa:	4a e0       	ldi	r20, 0x0A	; 10
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN5Print7printlnEii>
	if(msg_bit==1){
    1ab2:	80 91 25 03 	lds	r24, 0x0325
    1ab6:	90 91 26 03 	lds	r25, 0x0326
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	11 f4       	brne	.+4      	; 0x1ac2 <loop+0x44>
		send_bit_1();
    1abe:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_Z10send_bit_1v>
			send_bit_0();
		}



	controllerReadout=-1;
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	9f ef       	ldi	r25, 0xFF	; 255
    1ac6:	90 93 77 01 	sts	0x0177, r25
    1aca:	80 93 76 01 	sts	0x0176, r24
	activate_receiving_mode();
    1ace:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_Z23activate_receiving_modev>
	receive_bit();
    1ad2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_Z11receive_bitv>
	//delay(1000);
	counter=counter+1;
    1ad6:	80 91 21 03 	lds	r24, 0x0321
    1ada:	90 91 22 03 	lds	r25, 0x0322
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	90 93 22 03 	sts	0x0322, r25
    1ae4:	80 93 21 03 	sts	0x0321, r24
}
    1ae8:	08 95       	ret

00001aea <_Z17send_bit_sequencePi>:
int msg_bit=0;




Message send_bit_sequence(int bits_to_send[]){
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	8c 01       	movw	r16, r24
	Message msg(bits_to_send);
    1af0:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZN7MessageC1EPi>
	return msg;


}
    1af4:	c8 01       	movw	r24, r16
    1af6:	1f 91       	pop	r17
    1af8:	0f 91       	pop	r16
    1afa:	08 95       	ret

00001afc <setup>:





void setup() {
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	62 97       	sbiw	r28, 0x12	; 18
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
  (*msg)= send_bit_sequence(msg1_bits);
    1b14:	00 91 23 03 	lds	r16, 0x0323
    1b18:	10 91 24 03 	lds	r17, 0x0324
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	68 e7       	ldi	r22, 0x78	; 120
    1b22:	71 e0       	ldi	r23, 0x01	; 1
    1b24:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_Z17send_bit_sequencePi>
 */

#ifndef MESSAGE_H_
#define MESSAGE_H_

class Message {
    1b28:	d8 01       	movw	r26, r16
    1b2a:	12 96       	adiw	r26, 0x02	; 2
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	33 96       	adiw	r30, 0x03	; 3
    1b30:	8c e0       	ldi	r24, 0x0C	; 12
    1b32:	01 90       	ld	r0, Z+
    1b34:	0d 92       	st	X+, r0
    1b36:	81 50       	subi	r24, 0x01	; 1
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <setup+0x36>
    1b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3c:	98 89       	ldd	r25, Y+16	; 0x10
    1b3e:	f8 01       	movw	r30, r16
    1b40:	97 87       	std	Z+15, r25	; 0x0f
    1b42:	86 87       	std	Z+14, r24	; 0x0e
    1b44:	89 89       	ldd	r24, Y+17	; 0x11
    1b46:	9a 89       	ldd	r25, Y+18	; 0x12
    1b48:	91 8b       	std	Z+17, r25	; 0x11
    1b4a:	80 8b       	std	Z+16, r24	; 0x10
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN7MessageD1Ev>
  Wire.begin();
    1b54:	8d e6       	ldi	r24, 0x6D	; 109
    1b56:	93 e0       	ldi	r25, 0x03	; 3
    1b58:	0e 94 75 0f 	call	0x1eea	; 0x1eea <_ZN7TwoWire5beginEv>
  Serial.begin(19200);
    1b5c:	85 eb       	ldi	r24, 0xB5	; 181
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	5b e4       	ldi	r21, 0x4B	; 75
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN14HardwareSerial5beginEm>
  delay(1000);
    1b6c:	68 ee       	ldi	r22, 0xE8	; 232
    1b6e:	73 e0       	ldi	r23, 0x03	; 3
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 95 03 	call	0x72a	; 0x72a <delay>
  Serial.print("Msg: ");
    1b78:	85 eb       	ldi	r24, 0xB5	; 181
    1b7a:	92 e0       	ldi	r25, 0x02	; 2
    1b7c:	6f e6       	ldi	r22, 0x6F	; 111
    1b7e:	71 e0       	ldi	r23, 0x01	; 1
    1b80:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Print5printEPKc>
  Serial.print((*msg).get_bitvalues()[0]);
    1b84:	80 91 23 03 	lds	r24, 0x0323
    1b88:	90 91 24 03 	lds	r25, 0x0324
    1b8c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7Message13get_bitvaluesEv>
    1b90:	fc 01       	movw	r30, r24
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	85 eb       	ldi	r24, 0xB5	; 181
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	4a e0       	ldi	r20, 0x0A	; 10
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN5Print5printEii>
  Serial.print((*msg).get_bitvalues()[1]);
    1ba2:	80 91 23 03 	lds	r24, 0x0323
    1ba6:	90 91 24 03 	lds	r25, 0x0324
    1baa:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7Message13get_bitvaluesEv>
    1bae:	fc 01       	movw	r30, r24
    1bb0:	62 81       	ldd	r22, Z+2	; 0x02
    1bb2:	73 81       	ldd	r23, Z+3	; 0x03
    1bb4:	85 eb       	ldi	r24, 0xB5	; 181
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	4a e0       	ldi	r20, 0x0A	; 10
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN5Print5printEii>
  Serial.print((*msg).get_bitvalues()[2]);
    1bc0:	80 91 23 03 	lds	r24, 0x0323
    1bc4:	90 91 24 03 	lds	r25, 0x0324
    1bc8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7Message13get_bitvaluesEv>
    1bcc:	fc 01       	movw	r30, r24
    1bce:	64 81       	ldd	r22, Z+4	; 0x04
    1bd0:	75 81       	ldd	r23, Z+5	; 0x05
    1bd2:	85 eb       	ldi	r24, 0xB5	; 181
    1bd4:	92 e0       	ldi	r25, 0x02	; 2
    1bd6:	4a e0       	ldi	r20, 0x0A	; 10
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN5Print5printEii>
  Serial.print((*msg).get_bitvalues()[3]);
    1bde:	80 91 23 03 	lds	r24, 0x0323
    1be2:	90 91 24 03 	lds	r25, 0x0324
    1be6:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7Message13get_bitvaluesEv>
    1bea:	fc 01       	movw	r30, r24
    1bec:	66 81       	ldd	r22, Z+6	; 0x06
    1bee:	77 81       	ldd	r23, Z+7	; 0x07
    1bf0:	85 eb       	ldi	r24, 0xB5	; 181
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	4a e0       	ldi	r20, 0x0A	; 10
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN5Print5printEii>
  Serial.print((*msg).get_bitvalues()[4]);
    1bfc:	80 91 23 03 	lds	r24, 0x0323
    1c00:	90 91 24 03 	lds	r25, 0x0324
    1c04:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7Message13get_bitvaluesEv>
    1c08:	fc 01       	movw	r30, r24
    1c0a:	60 85       	ldd	r22, Z+8	; 0x08
    1c0c:	71 85       	ldd	r23, Z+9	; 0x09
    1c0e:	85 eb       	ldi	r24, 0xB5	; 181
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	4a e0       	ldi	r20, 0x0A	; 10
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN5Print5printEii>
  Serial.println((*msg).get_bitvalues()[5]);
    1c1a:	80 91 23 03 	lds	r24, 0x0323
    1c1e:	90 91 24 03 	lds	r25, 0x0324
    1c22:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7Message13get_bitvaluesEv>
    1c26:	fc 01       	movw	r30, r24
    1c28:	62 85       	ldd	r22, Z+10	; 0x0a
    1c2a:	73 85       	ldd	r23, Z+11	; 0x0b
    1c2c:	85 eb       	ldi	r24, 0xB5	; 181
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	4a e0       	ldi	r20, 0x0A	; 10
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN5Print7printlnEii>
  delay(2000);
    1c38:	60 ed       	ldi	r22, 0xD0	; 208
    1c3a:	77 e0       	ldi	r23, 0x07	; 7
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	0e 94 95 03 	call	0x72a	; 0x72a <delay>

}
    1c44:	62 96       	adiw	r28, 0x12	; 18
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	08 95       	ret

00001c5a <_ZN7MessageC1EPi>:





Message::Message(int bits[]) {
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	db 01       	movw	r26, r22
    1c5e:	8e e9       	ldi	r24, 0x9E	; 158
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub

	this->bits[0] = bits[0];
    1c66:	8d 91       	ld	r24, X+
    1c68:	9c 91       	ld	r25, X
    1c6a:	11 97       	sbiw	r26, 0x01	; 1
    1c6c:	93 83       	std	Z+3, r25	; 0x03
    1c6e:	82 83       	std	Z+2, r24	; 0x02
	this->bits[1] = bits[1];
    1c70:	12 96       	adiw	r26, 0x02	; 2
    1c72:	8d 91       	ld	r24, X+
    1c74:	9c 91       	ld	r25, X
    1c76:	13 97       	sbiw	r26, 0x03	; 3
    1c78:	95 83       	std	Z+5, r25	; 0x05
    1c7a:	84 83       	std	Z+4, r24	; 0x04
	this->bits[2] = bits[2];
    1c7c:	14 96       	adiw	r26, 0x04	; 4
    1c7e:	8d 91       	ld	r24, X+
    1c80:	9c 91       	ld	r25, X
    1c82:	15 97       	sbiw	r26, 0x05	; 5
    1c84:	97 83       	std	Z+7, r25	; 0x07
    1c86:	86 83       	std	Z+6, r24	; 0x06
	this->bits[3] = bits[3];
    1c88:	16 96       	adiw	r26, 0x06	; 6
    1c8a:	8d 91       	ld	r24, X+
    1c8c:	9c 91       	ld	r25, X
    1c8e:	17 97       	sbiw	r26, 0x07	; 7
    1c90:	91 87       	std	Z+9, r25	; 0x09
    1c92:	80 87       	std	Z+8, r24	; 0x08
	this->bits[4] = bits[4];
    1c94:	18 96       	adiw	r26, 0x08	; 8
    1c96:	8d 91       	ld	r24, X+
    1c98:	9c 91       	ld	r25, X
    1c9a:	19 97       	sbiw	r26, 0x09	; 9
    1c9c:	93 87       	std	Z+11, r25	; 0x0b
    1c9e:	82 87       	std	Z+10, r24	; 0x0a
	this->bits[5] = bits[5];
    1ca0:	1a 96       	adiw	r26, 0x0a	; 10
    1ca2:	8d 91       	ld	r24, X+
    1ca4:	9c 91       	ld	r25, X
    1ca6:	1b 97       	sbiw	r26, 0x0b	; 11
    1ca8:	95 87       	std	Z+13, r25	; 0x0d
    1caa:	84 87       	std	Z+12, r24	; 0x0c


	this->pointer_message_read=0;
    1cac:	17 86       	std	Z+15, r1	; 0x0f
    1cae:	16 86       	std	Z+14, r1	; 0x0e
	MSG_LENGTH=6;
    1cb0:	86 e0       	ldi	r24, 0x06	; 6
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	91 8b       	std	Z+17, r25	; 0x11
    1cb6:	80 8b       	std	Z+16, r24	; 0x10

}
    1cb8:	08 95       	ret

00001cba <_ZN7MessageD1Ev>:


Message::~Message() {
    1cba:	fc 01       	movw	r30, r24
    1cbc:	8e e9       	ldi	r24, 0x9E	; 158
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
	this->MSG_LENGTH=6;
    1cc4:	86 e0       	ldi	r24, 0x06	; 6
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	91 8b       	std	Z+17, r25	; 0x11
    1cca:	80 8b       	std	Z+16, r24	; 0x10
	// TODO Auto-generated destructor stub

}
    1ccc:	08 95       	ret

00001cce <_ZN7Message13get_bitvaluesEv>:


int* Message::get_bitvalues(){
    1cce:	9c 01       	movw	r18, r24
    1cd0:	2e 5f       	subi	r18, 0xFE	; 254
    1cd2:	3f 4f       	sbci	r19, 0xFF	; 255
	return this->bits;

}
    1cd4:	c9 01       	movw	r24, r18
    1cd6:	08 95       	ret

00001cd8 <_ZN7Message7nextBitEv>:


 int Message::nextBit(){
    1cd8:	dc 01       	movw	r26, r24
	int result = bits[pointer_message_read];
    1cda:	1e 96       	adiw	r26, 0x0e	; 14
    1cdc:	2d 91       	ld	r18, X+
    1cde:	3c 91       	ld	r19, X
    1ce0:	1f 97       	sbiw	r26, 0x0f	; 15
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	4f 5f       	subi	r20, 0xFF	; 255
    1ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce8:	fa 01       	movw	r30, r20
    1cea:	ee 0f       	add	r30, r30
    1cec:	ff 1f       	adc	r31, r31
    1cee:	ea 0f       	add	r30, r26
    1cf0:	fb 1f       	adc	r31, r27
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01

	if(pointer_message_read<(MSG_LENGTH-1)){
    1cf6:	50 96       	adiw	r26, 0x10	; 16
    1cf8:	8d 91       	ld	r24, X+
    1cfa:	9c 91       	ld	r25, X
    1cfc:	51 97       	sbiw	r26, 0x11	; 17
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	28 17       	cp	r18, r24
    1d02:	39 07       	cpc	r19, r25
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <_ZN7Message7nextBitEv+0x38>
		pointer_message_read=pointer_message_read+1;
    1d06:	1f 96       	adiw	r26, 0x0f	; 15
    1d08:	5c 93       	st	X, r21
    1d0a:	4e 93       	st	-X, r20
    1d0c:	1e 97       	sbiw	r26, 0x0e	; 14
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <_ZN7Message7nextBitEv+0x40>
	}
	else{
		pointer_message_read=0;
    1d10:	1f 96       	adiw	r26, 0x0f	; 15
    1d12:	1c 92       	st	X, r1
    1d14:	1e 92       	st	-X, r1
    1d16:	1e 97       	sbiw	r26, 0x0e	; 14

	}
	return result;

}
    1d18:	cb 01       	movw	r24, r22
    1d1a:	08 95       	ret

00001d1c <_ZN7MessageD0Ev>:
	MSG_LENGTH=6;

}


Message::~Message() {
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	8e e9       	ldi	r24, 0x9E	; 158
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
	this->MSG_LENGTH=6;
    1d26:	86 e0       	ldi	r24, 0x06	; 6
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	91 8b       	std	Z+17, r25	; 0x11
    1d2c:	80 8b       	std	Z+16, r24	; 0x10
	// TODO Auto-generated destructor stub

}
    1d2e:	cf 01       	movw	r24, r30
    1d30:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZdlPv>
    1d34:	08 95       	ret

00001d36 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	80 93 6c 03 	sts	0x036C, r24
  // set address of targeted slave
  txAddress = address;
    1d3c:	60 93 49 03 	sts	0x0349, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1d40:	10 92 6a 03 	sts	0x036A, r1
  txBufferLength = 0;
    1d44:	10 92 6b 03 	sts	0x036B, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    1d48:	08 95       	ret

00001d4a <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    1d4a:	20 91 48 03 	lds	r18, 0x0348
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	80 91 47 03 	lds	r24, 0x0347
    1d54:	28 1b       	sub	r18, r24
    1d56:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    1d58:	c9 01       	movw	r24, r18
    1d5a:	08 95       	ret

00001d5c <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1d5c:	40 91 47 03 	lds	r20, 0x0347
    1d60:	80 91 48 03 	lds	r24, 0x0348
    1d64:	48 17       	cp	r20, r24
    1d66:	18 f0       	brcs	.+6      	; 0x1d6e <_ZN7TwoWire4readEv+0x12>
    1d68:	2f ef       	ldi	r18, 0xFF	; 255
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	0a c0       	rjmp	.+20     	; 0x1d82 <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
    1d6e:	e4 2f       	mov	r30, r20
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	e9 5d       	subi	r30, 0xD9	; 217
    1d74:	fc 4f       	sbci	r31, 0xFC	; 252
    1d76:	80 81       	ld	r24, Z
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    1d7c:	4f 5f       	subi	r20, 0xFF	; 255
    1d7e:	40 93 47 03 	sts	0x0347, r20
  }

  return value;
}
    1d82:	c9 01       	movw	r24, r18
    1d84:	08 95       	ret

00001d86 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    1d86:	e0 91 47 03 	lds	r30, 0x0347
    1d8a:	80 91 48 03 	lds	r24, 0x0348
    1d8e:	e8 17       	cp	r30, r24
    1d90:	18 f0       	brcs	.+6      	; 0x1d98 <_ZN7TwoWire4peekEv+0x12>
    1d92:	ef ef       	ldi	r30, 0xFF	; 255
    1d94:	ff ef       	ldi	r31, 0xFF	; 255
    1d96:	06 c0       	rjmp	.+12     	; 0x1da4 <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	e9 5d       	subi	r30, 0xD9	; 217
    1d9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d9e:	80 81       	ld	r24, Z
    1da0:	e8 2f       	mov	r30, r24
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    1da4:	cf 01       	movw	r24, r30
    1da6:	08 95       	ret

00001da8 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    1da8:	08 95       	ret

00001daa <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1daa:	10 92 70 03 	sts	0x0370, r1
    1dae:	10 92 6f 03 	sts	0x036F, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1db2:	88 ee       	ldi	r24, 0xE8	; 232
    1db4:	93 e0       	ldi	r25, 0x03	; 3
    1db6:	a0 e0       	ldi	r26, 0x00	; 0
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	80 93 71 03 	sts	0x0371, r24
    1dbe:	90 93 72 03 	sts	0x0372, r25
    1dc2:	a0 93 73 03 	sts	0x0373, r26
    1dc6:	b0 93 74 03 	sts	0x0374, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1dca:	86 ea       	ldi	r24, 0xA6	; 166
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	90 93 6e 03 	sts	0x036E, r25
    1dd2:	80 93 6d 03 	sts	0x036D, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1dd6:	08 95       	ret

00001dd8 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    1dd8:	cf 92       	push	r12
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	7c 01       	movw	r14, r24
    1dea:	6b 01       	movw	r12, r22
    1dec:	8a 01       	movw	r16, r20
{
  if(transmitting){
    1dee:	80 91 6c 03 	lds	r24, 0x036C
    1df2:	88 23       	and	r24, r24
    1df4:	a1 f0       	breq	.+40     	; 0x1e1e <_ZN7TwoWire5writeEPKhj+0x46>
    1df6:	c0 e0       	ldi	r28, 0x00	; 0
    1df8:	d0 e0       	ldi	r29, 0x00	; 0
    1dfa:	0d c0       	rjmp	.+26     	; 0x1e16 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    1dfc:	d7 01       	movw	r26, r14
    1dfe:	ed 91       	ld	r30, X+
    1e00:	fc 91       	ld	r31, X
    1e02:	d6 01       	movw	r26, r12
    1e04:	ac 0f       	add	r26, r28
    1e06:	bd 1f       	adc	r27, r29
    1e08:	01 90       	ld	r0, Z+
    1e0a:	f0 81       	ld	r31, Z
    1e0c:	e0 2d       	mov	r30, r0
    1e0e:	c7 01       	movw	r24, r14
    1e10:	6c 91       	ld	r22, X
    1e12:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1e14:	21 96       	adiw	r28, 0x01	; 1
    1e16:	c0 17       	cp	r28, r16
    1e18:	d1 07       	cpc	r29, r17
    1e1a:	80 f3       	brcs	.-32     	; 0x1dfc <_ZN7TwoWire5writeEPKhj+0x24>
    1e1c:	04 c0       	rjmp	.+8      	; 0x1e26 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1e1e:	cb 01       	movw	r24, r22
    1e20:	64 2f       	mov	r22, r20
    1e22:	0e 94 bb 05 	call	0xb76	; 0xb76 <twi_transmit>
  }
  return quantity;
}
    1e26:	c8 01       	movw	r24, r16
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	ff 90       	pop	r15
    1e32:	ef 90       	pop	r14
    1e34:	df 90       	pop	r13
    1e36:	cf 90       	pop	r12
    1e38:	08 95       	ret

00001e3a <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	0f 92       	push	r0
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	fc 01       	movw	r30, r24
    1e46:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    1e48:	80 91 6c 03 	lds	r24, 0x036C
    1e4c:	88 23       	and	r24, r24
    1e4e:	c9 f0       	breq	.+50     	; 0x1e82 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    1e50:	80 91 6b 03 	lds	r24, 0x036B
    1e54:	80 32       	cpi	r24, 0x20	; 32
    1e56:	38 f0       	brcs	.+14     	; 0x1e66 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	93 83       	std	Z+3, r25	; 0x03
    1e5e:	82 83       	std	Z+2, r24	; 0x02
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	15 c0       	rjmp	.+42     	; 0x1e90 <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1e66:	80 91 6a 03 	lds	r24, 0x036A
    1e6a:	e8 2f       	mov	r30, r24
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	e6 5b       	subi	r30, 0xB6	; 182
    1e70:	fc 4f       	sbci	r31, 0xFC	; 252
    1e72:	99 81       	ldd	r25, Y+1	; 0x01
    1e74:	90 83       	st	Z, r25
    ++txBufferIndex;
    1e76:	8f 5f       	subi	r24, 0xFF	; 255
    1e78:	80 93 6a 03 	sts	0x036A, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1e7c:	80 93 6b 03 	sts	0x036B, r24
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	0e 94 bb 05 	call	0xb76	; 0xb76 <twi_transmit>
    1e8c:	21 e0       	ldi	r18, 0x01	; 1
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    1e90:	c9 01       	movw	r24, r18
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    1e9a:	0f 93       	push	r16
    1e9c:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    1e9e:	80 91 49 03 	lds	r24, 0x0349
    1ea2:	6a e4       	ldi	r22, 0x4A	; 74
    1ea4:	73 e0       	ldi	r23, 0x03	; 3
    1ea6:	40 91 6b 03 	lds	r20, 0x036B
    1eaa:	21 e0       	ldi	r18, 0x01	; 1
    1eac:	0e 94 66 05 	call	0xacc	; 0xacc <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1eb0:	10 92 6a 03 	sts	0x036A, r1
  txBufferLength = 0;
    1eb4:	10 92 6b 03 	sts	0x036B, r1
  // indicate that we are done transmitting
  transmitting = 0;
    1eb8:	10 92 6c 03 	sts	0x036C, r1
  return ret;
}
    1ebc:	0f 91       	pop	r16
    1ebe:	08 95       	ret

00001ec0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <_ZN7TwoWire15endTransmissionEh>
}
    1ec6:	08 95       	ret

00001ec8 <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    1ec8:	41 32       	cpi	r20, 0x21	; 33
    1eca:	08 f0       	brcs	.+2      	; 0x1ece <_ZN7TwoWire11requestFromEhhh+0x6>
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	86 2f       	mov	r24, r22
    1ed0:	67 e2       	ldi	r22, 0x27	; 39
    1ed2:	73 e0       	ldi	r23, 0x03	; 3
    1ed4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1ed8:	10 92 47 03 	sts	0x0347, r1
  rxBufferLength = read;
    1edc:	80 93 48 03 	sts	0x0348, r24

  return read;
}
    1ee0:	08 95       	ret

00001ee2 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1ee2:	21 e0       	ldi	r18, 0x01	; 1
    1ee4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7TwoWire11requestFromEhhh>
}
    1ee8:	08 95       	ret

00001eea <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    1eea:	10 92 47 03 	sts	0x0347, r1
  rxBufferLength = 0;
    1eee:	10 92 48 03 	sts	0x0348, r1

  txBufferIndex = 0;
    1ef2:	10 92 6a 03 	sts	0x036A, r1
  txBufferLength = 0;
    1ef6:	10 92 6b 03 	sts	0x036B, r1

  twi_init();
    1efa:	0e 94 89 07 	call	0xf12	; 0xf12 <twi_init>
}
    1efe:	08 95       	ret

00001f00 <__mulsi3>:
    1f00:	62 9f       	mul	r22, r18
    1f02:	d0 01       	movw	r26, r0
    1f04:	73 9f       	mul	r23, r19
    1f06:	f0 01       	movw	r30, r0
    1f08:	82 9f       	mul	r24, r18
    1f0a:	e0 0d       	add	r30, r0
    1f0c:	f1 1d       	adc	r31, r1
    1f0e:	64 9f       	mul	r22, r20
    1f10:	e0 0d       	add	r30, r0
    1f12:	f1 1d       	adc	r31, r1
    1f14:	92 9f       	mul	r25, r18
    1f16:	f0 0d       	add	r31, r0
    1f18:	83 9f       	mul	r24, r19
    1f1a:	f0 0d       	add	r31, r0
    1f1c:	74 9f       	mul	r23, r20
    1f1e:	f0 0d       	add	r31, r0
    1f20:	65 9f       	mul	r22, r21
    1f22:	f0 0d       	add	r31, r0
    1f24:	99 27       	eor	r25, r25
    1f26:	72 9f       	mul	r23, r18
    1f28:	b0 0d       	add	r27, r0
    1f2a:	e1 1d       	adc	r30, r1
    1f2c:	f9 1f       	adc	r31, r25
    1f2e:	63 9f       	mul	r22, r19
    1f30:	b0 0d       	add	r27, r0
    1f32:	e1 1d       	adc	r30, r1
    1f34:	f9 1f       	adc	r31, r25
    1f36:	bd 01       	movw	r22, r26
    1f38:	cf 01       	movw	r24, r30
    1f3a:	11 24       	eor	r1, r1
    1f3c:	08 95       	ret

00001f3e <__udivmodsi4>:
    1f3e:	a1 e2       	ldi	r26, 0x21	; 33
    1f40:	1a 2e       	mov	r1, r26
    1f42:	aa 1b       	sub	r26, r26
    1f44:	bb 1b       	sub	r27, r27
    1f46:	fd 01       	movw	r30, r26
    1f48:	0d c0       	rjmp	.+26     	; 0x1f64 <__udivmodsi4_ep>

00001f4a <__udivmodsi4_loop>:
    1f4a:	aa 1f       	adc	r26, r26
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	ee 1f       	adc	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	a2 17       	cp	r26, r18
    1f54:	b3 07       	cpc	r27, r19
    1f56:	e4 07       	cpc	r30, r20
    1f58:	f5 07       	cpc	r31, r21
    1f5a:	20 f0       	brcs	.+8      	; 0x1f64 <__udivmodsi4_ep>
    1f5c:	a2 1b       	sub	r26, r18
    1f5e:	b3 0b       	sbc	r27, r19
    1f60:	e4 0b       	sbc	r30, r20
    1f62:	f5 0b       	sbc	r31, r21

00001f64 <__udivmodsi4_ep>:
    1f64:	66 1f       	adc	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	1a 94       	dec	r1
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a <__udivmodsi4_loop>
    1f70:	60 95       	com	r22
    1f72:	70 95       	com	r23
    1f74:	80 95       	com	r24
    1f76:	90 95       	com	r25
    1f78:	9b 01       	movw	r18, r22
    1f7a:	ac 01       	movw	r20, r24
    1f7c:	bd 01       	movw	r22, r26
    1f7e:	cf 01       	movw	r24, r30
    1f80:	08 95       	ret

00001f82 <__tablejump2__>:
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31

00001f86 <__tablejump__>:
    1f86:	05 90       	lpm	r0, Z+
    1f88:	f4 91       	lpm	r31, Z+
    1f8a:	e0 2d       	mov	r30, r0
    1f8c:	09 94       	ijmp

00001f8e <_exit>:
    1f8e:	f8 94       	cli

00001f90 <__stop_program>:
    1f90:	ff cf       	rjmp	.-2      	; 0x1f90 <__stop_program>
